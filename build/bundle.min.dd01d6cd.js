!function b(a,c,d){function e(g,h){if(!c[g]){if(!a[g]){var i="function"==typeof require&&require;if(!h&&i)return i(g,!0);if(f)return f(g,!0);throw new Error("Cannot find module '"+g+"'")}var j=c[g]={exports:{}};a[g][0].call(j.exports,function(b){var c=a[g][1][b];return e(c?c:b)},j,j.exports,b,a,c,d)}return c[g].exports}for(var f="function"==typeof require&&require,g=0;g<d.length;g++)e(d[g]);return e}({1:[function(a,b,c){(function(){var b,d=this,e=d.Backbone,f=[],g=f.push,h=f.slice,i=f.splice;b="undefined"!=typeof c?c:d.Backbone={},b.VERSION="0.9.10";var j=d._;j||"undefined"==typeof a||(j=a("underscore")),b.$=d.jQuery||d.Zepto||d.ender,b.noConflict=function(){return d.Backbone=e,this},b.emulateHTTP=!1,b.emulateJSON=!1;var k=/\s+/,l=function(a,b,c,d){if(!c)return!0;if("object"==typeof c)for(var e in c)a[b].apply(a,[e,c[e]].concat(d));else{if(!k.test(c))return!0;for(var f=c.split(k),g=0,h=f.length;h>g;g++)a[b].apply(a,[f[g]].concat(d))}},m=function(a,b){var c,d=-1,e=a.length;switch(b.length){case 0:for(;++d<e;)(c=a[d]).callback.call(c.ctx);return;case 1:for(;++d<e;)(c=a[d]).callback.call(c.ctx,b[0]);return;case 2:for(;++d<e;)(c=a[d]).callback.call(c.ctx,b[0],b[1]);return;case 3:for(;++d<e;)(c=a[d]).callback.call(c.ctx,b[0],b[1],b[2]);return;default:for(;++d<e;)(c=a[d]).callback.apply(c.ctx,b)}},n=b.Events={on:function(a,b,c){if(!l(this,"on",a,[b,c])||!b)return this;this._events||(this._events={});var d=this._events[a]||(this._events[a]=[]);return d.push({callback:b,context:c,ctx:c||this}),this},once:function(a,b,c){if(!l(this,"once",a,[b,c])||!b)return this;var d=this,e=j.once(function(){d.off(a,e),b.apply(this,arguments)});return e._callback=b,this.on(a,e,c),this},off:function(a,b,c){var d,e,f,g,h,i,k,m;if(!this._events||!l(this,"off",a,[b,c]))return this;if(!a&&!b&&!c)return this._events={},this;for(g=a?[a]:j.keys(this._events),h=0,i=g.length;i>h;h++)if(a=g[h],d=this._events[a]){if(f=[],b||c)for(k=0,m=d.length;m>k;k++)e=d[k],(b&&b!==e.callback&&b!==e.callback._callback||c&&c!==e.context)&&f.push(e);this._events[a]=f}return this},trigger:function(a){if(!this._events)return this;var b=h.call(arguments,1);if(!l(this,"trigger",a,b))return this;var c=this._events[a],d=this._events.all;return c&&m(c,b),d&&m(d,arguments),this},listenTo:function(a,b,c){var d=this._listeners||(this._listeners={}),e=a._listenerId||(a._listenerId=j.uniqueId("l"));return d[e]=a,a.on(b,"object"==typeof b?this:c,this),this},stopListening:function(a,b,c){var d=this._listeners;if(d){if(a)a.off(b,"object"==typeof b?this:c,this),b||c||delete d[a._listenerId];else{"object"==typeof b&&(c=this);for(var e in d)d[e].off(b,c,this);this._listeners={}}return this}}};n.bind=n.on,n.unbind=n.off,j.extend(b,n);var o=b.Model=function(a,b){var c,d=a||{};this.cid=j.uniqueId("c"),this.attributes={},b&&b.collection&&(this.collection=b.collection),b&&b.parse&&(d=this.parse(d,b)||{}),(c=j.result(this,"defaults"))&&(d=j.defaults({},d,c)),this.set(d,b),this.changed={},this.initialize.apply(this,arguments)};j.extend(o.prototype,n,{changed:null,idAttribute:"id",initialize:function(){},toJSON:function(){return j.clone(this.attributes)},sync:function(){return b.sync.apply(this,arguments)},get:function(a){return this.attributes[a]},escape:function(a){return j.escape(this.get(a))},has:function(a){return null!=this.get(a)},set:function(a,b,c){var d,e,f,g,h,i,k,l;if(null==a)return this;if("object"==typeof a?(e=a,c=b):(e={})[a]=b,c||(c={}),!this._validate(e,c))return!1;f=c.unset,h=c.silent,g=[],i=this._changing,this._changing=!0,i||(this._previousAttributes=j.clone(this.attributes),this.changed={}),l=this.attributes,k=this._previousAttributes,this.idAttribute in e&&(this.id=e[this.idAttribute]);for(d in e)b=e[d],j.isEqual(l[d],b)||g.push(d),j.isEqual(k[d],b)?delete this.changed[d]:this.changed[d]=b,f?delete l[d]:l[d]=b;if(!h){g.length&&(this._pending=!0);for(var m=0,n=g.length;n>m;m++)this.trigger("change:"+g[m],this,l[g[m]],c)}if(i)return this;if(!h)for(;this._pending;)this._pending=!1,this.trigger("change",this,c);return this._pending=!1,this._changing=!1,this},unset:function(a,b){return this.set(a,void 0,j.extend({},b,{unset:!0}))},clear:function(a){var b={};for(var c in this.attributes)b[c]=void 0;return this.set(b,j.extend({},a,{unset:!0}))},hasChanged:function(a){return null==a?!j.isEmpty(this.changed):j.has(this.changed,a)},changedAttributes:function(a){if(!a)return this.hasChanged()?j.clone(this.changed):!1;var b,c=!1,d=this._changing?this._previousAttributes:this.attributes;for(var e in a)j.isEqual(d[e],b=a[e])||((c||(c={}))[e]=b);return c},previous:function(a){return null!=a&&this._previousAttributes?this._previousAttributes[a]:null},previousAttributes:function(){return j.clone(this._previousAttributes)},fetch:function(a){a=a?j.clone(a):{},void 0===a.parse&&(a.parse=!0);var b=a.success;return a.success=function(a,c,d){return a.set(a.parse(c,d),d)?(b&&b(a,c,d),void 0):!1},this.sync("read",this,a)},save:function(a,b,c){var d,e,f,g,h=this.attributes;return null==a||"object"==typeof a?(d=a,c=b):(d={})[a]=b,!d||c&&c.wait||this.set(d,c)?(c=j.extend({validate:!0},c),this._validate(d,c)?(d&&c.wait&&(this.attributes=j.extend({},h,d)),void 0===c.parse&&(c.parse=!0),e=c.success,c.success=function(a,b,c){a.attributes=h;var f=a.parse(b,c);return c.wait&&(f=j.extend(d||{},f)),j.isObject(f)&&!a.set(f,c)?!1:(e&&e(a,b,c),void 0)},f=this.isNew()?"create":c.patch?"patch":"update","patch"===f&&(c.attrs=d),g=this.sync(f,this,c),d&&c.wait&&(this.attributes=h),g):!1):!1},destroy:function(a){a=a?j.clone(a):{};var b=this,c=a.success,d=function(){b.trigger("destroy",b,b.collection,a)};if(a.success=function(a,b,e){(e.wait||a.isNew())&&d(),c&&c(a,b,e)},this.isNew())return a.success(this,null,a),!1;var e=this.sync("delete",this,a);return a.wait||d(),e},url:function(){var a=j.result(this,"urlRoot")||j.result(this.collection,"url")||H();return this.isNew()?a:a+("/"===a.charAt(a.length-1)?"":"/")+encodeURIComponent(this.id)},parse:function(a){return a},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return null==this.id},isValid:function(a){return!this.validate||!this.validate(this.attributes,a)},_validate:function(a,b){if(!b.validate||!this.validate)return!0;a=j.extend({},this.attributes,a);var c=this.validationError=this.validate(a,b)||null;return c?(this.trigger("invalid",this,c,b||{}),!1):!0}});var p=b.Collection=function(a,b){b||(b={}),b.model&&(this.model=b.model),void 0!==b.comparator&&(this.comparator=b.comparator),this.models=[],this._reset(),this.initialize.apply(this,arguments),a&&this.reset(a,j.extend({silent:!0},b))};j.extend(p.prototype,n,{model:o,initialize:function(){},toJSON:function(a){return this.map(function(b){return b.toJSON(a)})},sync:function(){return b.sync.apply(this,arguments)},add:function(a,b){a=j.isArray(a)?a.slice():[a],b||(b={});var c,d,e,f,h,k,l,m,n,o;for(l=[],m=b.at,n=this.comparator&&null==m&&0!=b.sort,o=j.isString(this.comparator)?this.comparator:null,c=0,d=a.length;d>c;c++)(e=this._prepareModel(f=a[c],b))?(h=this.get(e))?b.merge&&(h.set(f===e?e.attributes:f,b),n&&!k&&h.hasChanged(o)&&(k=!0)):(l.push(e),e.on("all",this._onModelEvent,this),this._byId[e.cid]=e,null!=e.id&&(this._byId[e.id]=e)):this.trigger("invalid",this,f,b);if(l.length&&(n&&(k=!0),this.length+=l.length,null!=m?i.apply(this.models,[m,0].concat(l)):g.apply(this.models,l)),k&&this.sort({silent:!0}),b.silent)return this;for(c=0,d=l.length;d>c;c++)(e=l[c]).trigger("add",e,this,b);return k&&this.trigger("sort",this,b),this},remove:function(a,b){a=j.isArray(a)?a.slice():[a],b||(b={});var c,d,e,f;for(c=0,d=a.length;d>c;c++)f=this.get(a[c]),f&&(delete this._byId[f.id],delete this._byId[f.cid],e=this.indexOf(f),this.models.splice(e,1),this.length--,b.silent||(b.index=e,f.trigger("remove",f,this,b)),this._removeReference(f));return this},push:function(a,b){return a=this._prepareModel(a,b),this.add(a,j.extend({at:this.length},b)),a},pop:function(a){var b=this.at(this.length-1);return this.remove(b,a),b},unshift:function(a,b){return a=this._prepareModel(a,b),this.add(a,j.extend({at:0},b)),a},shift:function(a){var b=this.at(0);return this.remove(b,a),b},slice:function(a,b){return this.models.slice(a,b)},get:function(a){return null==a?void 0:(this._idAttr||(this._idAttr=this.model.prototype.idAttribute),this._byId[a.id||a.cid||a[this._idAttr]||a])},at:function(a){return this.models[a]},where:function(a){return j.isEmpty(a)?[]:this.filter(function(b){for(var c in a)if(a[c]!==b.get(c))return!1;return!0})},sort:function(a){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");return a||(a={}),j.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(j.bind(this.comparator,this)),a.silent||this.trigger("sort",this,a),this},pluck:function(a){return j.invoke(this.models,"get",a)},update:function(a,b){b=j.extend({add:!0,merge:!0,remove:!0},b),b.parse&&(a=this.parse(a,b));var c,d,e,f,g=[],h=[],i={};if(j.isArray(a)||(a=a?[a]:[]),b.add&&!b.remove)return this.add(a,b);for(d=0,e=a.length;e>d;d++)c=a[d],f=this.get(c),b.remove&&f&&(i[f.cid]=!0),(b.add&&!f||b.merge&&f)&&g.push(c);if(b.remove)for(d=0,e=this.models.length;e>d;d++)c=this.models[d],i[c.cid]||h.push(c);return h.length&&this.remove(h,b),g.length&&this.add(g,b),this},reset:function(a,b){b||(b={}),b.parse&&(a=this.parse(a,b));for(var c=0,d=this.models.length;d>c;c++)this._removeReference(this.models[c]);return b.previousModels=this.models.slice(),this._reset(),a&&this.add(a,j.extend({silent:!0},b)),b.silent||this.trigger("reset",this,b),this},fetch:function(a){a=a?j.clone(a):{},void 0===a.parse&&(a.parse=!0);var b=a.success;return a.success=function(a,c,d){var e=d.update?"update":"reset";a[e](c,d),b&&b(a,c,d)},this.sync("read",this,a)},create:function(a,b){if(b=b?j.clone(b):{},!(a=this._prepareModel(a,b)))return!1;b.wait||this.add(a,b);var c=this,d=b.success;return b.success=function(a,b,e){e.wait&&c.add(a,e),d&&d(a,b,e)},a.save(null,b),a},parse:function(a){return a},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models.length=0,this._byId={}},_prepareModel:function(a,b){if(a instanceof o)return a.collection||(a.collection=this),a;b||(b={}),b.collection=this;var c=new this.model(a,b);return c._validate(a,b)?c:!1},_removeReference:function(a){this===a.collection&&delete a.collection,a.off("all",this._onModelEvent,this)},_onModelEvent:function(a,b,c,d){("add"!==a&&"remove"!==a||c===this)&&("destroy"===a&&this.remove(b,d),b&&a==="change:"+b.idAttribute&&(delete this._byId[b.previous(b.idAttribute)],null!=b.id&&(this._byId[b.id]=b)),this.trigger.apply(this,arguments))},sortedIndex:function(a,b,c){b||(b=this.comparator);var d=j.isFunction(b)?b:function(a){return a.get(b)};return j.sortedIndex(this.models,a,d,c)}});var q=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","indexOf","shuffle","lastIndexOf","isEmpty","chain"];j.each(q,function(a){p.prototype[a]=function(){var b=h.call(arguments);return b.unshift(this.models),j[a].apply(j,b)}});var r=["groupBy","countBy","sortBy"];j.each(r,function(a){p.prototype[a]=function(b,c){var d=j.isFunction(b)?b:function(a){return a.get(b)};return j[a](this.models,d,c)}});var s=b.Router=function(a){a||(a={}),a.routes&&(this.routes=a.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},t=/\((.*?)\)/g,u=/(\(\?)?:\w+/g,v=/\*\w+/g,w=/[\-{}\[\]+?.,\\\^$|#\s]/g;j.extend(s.prototype,n,{initialize:function(){},route:function(a,c,d){return j.isRegExp(a)||(a=this._routeToRegExp(a)),d||(d=this[c]),b.history.route(a,j.bind(function(e){var f=this._extractParameters(a,e);d&&d.apply(this,f),this.trigger.apply(this,["route:"+c].concat(f)),this.trigger("route",c,f),b.history.trigger("route",this,c,f)},this)),this},navigate:function(a,c){return b.history.navigate(a,c),this},_bindRoutes:function(){if(this.routes)for(var a,b=j.keys(this.routes);null!=(a=b.pop());)this.route(a,this.routes[a])},_routeToRegExp:function(a){return a=a.replace(w,"\\$&").replace(t,"(?:$1)?").replace(u,function(a,b){return b?a:"([^/]+)"}).replace(v,"(.*?)"),new RegExp("^"+a+"$")},_extractParameters:function(a,b){return a.exec(b).slice(1)}});var x=b.History=function(){this.handlers=[],j.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},y=/^[#\/]|\s+$/g,z=/^\/+|\/+$/g,A=/msie [\w.]+/,B=/\/$/;x.started=!1,j.extend(x.prototype,n,{interval:50,getHash:function(a){var b=(a||this).location.href.match(/#(.*)$/);return b?b[1]:""},getFragment:function(a,b){if(null==a)if(this._hasPushState||!this._wantsHashChange||b){a=this.location.pathname;var c=this.root.replace(B,"");a.indexOf(c)||(a=a.substr(c.length))}else a=this.getHash();return a.replace(y,"")},start:function(a){if(x.started)throw new Error("Backbone.history has already been started");x.started=!0,this.options=j.extend({},{root:"/"},this.options,a),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var c=this.getFragment(),d=document.documentMode,e=A.exec(navigator.userAgent.toLowerCase())&&(!d||7>=d);this.root=("/"+this.root+"/").replace(z,"/"),e&&this._wantsHashChange&&(this.iframe=b.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow,this.navigate(c)),this._hasPushState?b.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!e?b.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=c;var f=this.location,g=f.pathname.replace(/[^\/]$/,"$&/")===this.root;return this._wantsHashChange&&this._wantsPushState&&!this._hasPushState&&!g?(this.fragment=this.getFragment(null,!0),this.location.replace(this.root+this.location.search+"#"+this.fragment),!0):(this._wantsPushState&&this._hasPushState&&g&&f.hash&&(this.fragment=this.getHash().replace(y,""),this.history.replaceState({},document.title,this.root+this.fragment+f.search)),this.options.silent?void 0:this.loadUrl())},stop:function(){b.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),clearInterval(this._checkUrlInterval),x.started=!1},route:function(a,b){this.handlers.unshift({route:a,callback:b})},checkUrl:function(){var a=this.getFragment();return a===this.fragment&&this.iframe&&(a=this.getFragment(this.getHash(this.iframe))),a===this.fragment?!1:(this.iframe&&this.navigate(a),this.loadUrl()||this.loadUrl(this.getHash()),void 0)},loadUrl:function(a){var b=this.fragment=this.getFragment(a),c=j.any(this.handlers,function(a){return a.route.test(b)?(a.callback(b),!0):void 0});return c},navigate:function(a,b){if(!x.started)return!1;if(b&&b!==!0||(b={trigger:b}),a=this.getFragment(a||""),this.fragment!==a){this.fragment=a;var c=this.root+a;if(this._hasPushState)this.history[b.replace?"replaceState":"pushState"]({},document.title,c);else{if(!this._wantsHashChange)return this.location.assign(c);this._updateHash(this.location,a,b.replace),this.iframe&&a!==this.getFragment(this.getHash(this.iframe))&&(b.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,a,b.replace))}b.trigger&&this.loadUrl(a)}},_updateHash:function(a,b,c){if(c){var d=a.href.replace(/(javascript:|#).*$/,"");a.replace(d+"#"+b)}else a.hash="#"+b}}),b.history=new x;var C=b.View=function(a){this.cid=j.uniqueId("view"),this._configure(a||{}),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},D=/^(\S+)\s*(.*)$/,E=["model","collection","el","id","attributes","className","tagName","events"];j.extend(C.prototype,n,{tagName:"div",$:function(a){return this.$el.find(a)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(a,c){return this.$el&&this.undelegateEvents(),this.$el=a instanceof b.$?a:b.$(a),this.el=this.$el[0],c!==!1&&this.delegateEvents(),this},delegateEvents:function(a){if(a||(a=j.result(this,"events"))){this.undelegateEvents();for(var b in a){var c=a[b];if(j.isFunction(c)||(c=this[a[b]]),!c)throw new Error('Method "'+a[b]+'" does not exist');var d=b.match(D),e=d[1],f=d[2];c=j.bind(c,this),e+=".delegateEvents"+this.cid,""===f?this.$el.on(e,c):this.$el.on(e,f,c)}}},undelegateEvents:function(){this.$el.off(".delegateEvents"+this.cid)},_configure:function(a){this.options&&(a=j.extend({},j.result(this,"options"),a)),j.extend(this,j.pick(a,E)),this.options=a},_ensureElement:function(){if(this.el)this.setElement(j.result(this,"el"),!1);else{var a=j.extend({},j.result(this,"attributes"));this.id&&(a.id=j.result(this,"id")),this.className&&(a["class"]=j.result(this,"className"));var c=b.$("<"+j.result(this,"tagName")+">").attr(a);this.setElement(c,!1)}}});var F={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};b.sync=function(a,c,d){var e=F[a];j.defaults(d||(d={}),{emulateHTTP:b.emulateHTTP,emulateJSON:b.emulateJSON});var f={type:e,dataType:"json"};if(d.url||(f.url=j.result(c,"url")||H()),null!=d.data||!c||"create"!==a&&"update"!==a&&"patch"!==a||(f.contentType="application/json",f.data=JSON.stringify(d.attrs||c.toJSON(d))),d.emulateJSON&&(f.contentType="application/x-www-form-urlencoded",f.data=f.data?{model:f.data}:{}),d.emulateHTTP&&("PUT"===e||"DELETE"===e||"PATCH"===e)){f.type="POST",d.emulateJSON&&(f.data._method=e);var g=d.beforeSend;d.beforeSend=function(a){return a.setRequestHeader("X-HTTP-Method-Override",e),g?g.apply(this,arguments):void 0}}"GET"===f.type||d.emulateJSON||(f.processData=!1);var h=d.success;d.success=function(a){h&&h(c,a,d),c.trigger("sync",c,a,d)};var i=d.error;d.error=function(a){i&&i(c,a,d),c.trigger("error",c,a,d)};var k=d.xhr=b.ajax(j.extend(f,d));return c.trigger("request",c,k,d),k},b.ajax=function(){return b.$.ajax.apply(b.$,arguments)};var G=function(a,b){var c,d=this;c=a&&j.has(a,"constructor")?a.constructor:function(){return d.apply(this,arguments)},j.extend(c,d,b);var e=function(){this.constructor=c};return e.prototype=d.prototype,c.prototype=new e,a&&j.extend(c.prototype,a),c.__super__=d.prototype,c};o.extend=p.extend=s.extend=C.extend=x.extend=G;var H=function(){throw new Error('A "url" property or function must be specified')}}).call(this)},{underscore:17}],2:[function(){},{}],3:[function(a,b){function c(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function d(a){return"function"==typeof a}function e(a){return"number"==typeof a}function f(a){return"object"==typeof a&&null!==a}function g(a){return void 0===a}b.exports=c,c.EventEmitter=c,c.prototype._events=void 0,c.prototype._maxListeners=void 0,c.defaultMaxListeners=10,c.prototype.setMaxListeners=function(a){if(!e(a)||0>a||isNaN(a))throw TypeError("n must be a positive number");return this._maxListeners=a,this},c.prototype.emit=function(a){var b,c,e,h,i,j;if(this._events||(this._events={}),"error"===a&&(!this._events.error||f(this._events.error)&&!this._events.error.length))throw b=arguments[1],b instanceof Error?b:TypeError('Uncaught, unspecified "error" event.');if(c=this._events[a],g(c))return!1;if(d(c))switch(arguments.length){case 1:c.call(this);break;case 2:c.call(this,arguments[1]);break;case 3:c.call(this,arguments[1],arguments[2]);break;default:for(e=arguments.length,h=new Array(e-1),i=1;e>i;i++)h[i-1]=arguments[i];c.apply(this,h)}else if(f(c)){for(e=arguments.length,h=new Array(e-1),i=1;e>i;i++)h[i-1]=arguments[i];for(j=c.slice(),e=j.length,i=0;e>i;i++)j[i].apply(this,h)}return!0},c.prototype.addListener=function(a,b){var e;if(!d(b))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",a,d(b.listener)?b.listener:b),this._events[a]?f(this._events[a])?this._events[a].push(b):this._events[a]=[this._events[a],b]:this._events[a]=b,f(this._events[a])&&!this._events[a].warned){var e;e=g(this._maxListeners)?c.defaultMaxListeners:this._maxListeners,e&&e>0&&this._events[a].length>e&&(this._events[a].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[a].length),console.trace())}return this},c.prototype.on=c.prototype.addListener,c.prototype.once=function(a,b){function c(){this.removeListener(a,c),e||(e=!0,b.apply(this,arguments))}if(!d(b))throw TypeError("listener must be a function");var e=!1;return c.listener=b,this.on(a,c),this},c.prototype.removeListener=function(a,b){var c,e,g,h;if(!d(b))throw TypeError("listener must be a function");if(!this._events||!this._events[a])return this;if(c=this._events[a],g=c.length,e=-1,c===b||d(c.listener)&&c.listener===b)delete this._events[a],this._events.removeListener&&this.emit("removeListener",a,b);else if(f(c)){for(h=g;h-->0;)if(c[h]===b||c[h].listener&&c[h].listener===b){e=h;break}if(0>e)return this;1===c.length?(c.length=0,delete this._events[a]):c.splice(e,1),this._events.removeListener&&this.emit("removeListener",a,b)}return this},c.prototype.removeAllListeners=function(a){var b,c;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[a]&&delete this._events[a],this;if(0===arguments.length){for(b in this._events)"removeListener"!==b&&this.removeAllListeners(b);return this.removeAllListeners("removeListener"),this._events={},this}if(c=this._events[a],d(c))this.removeListener(a,c);else for(;c.length;)this.removeListener(a,c[c.length-1]);return delete this._events[a],this},c.prototype.listeners=function(a){var b;return b=this._events&&this._events[a]?d(this._events[a])?[this._events[a]]:this._events[a].slice():[]},c.listenerCount=function(a,b){var c;return c=a._events&&a._events[b]?d(a._events[b])?1:a._events[b].length:0}},{}],4:[function(a,b){b.exports="function"==typeof Object.create?function(a,b){a.super_=b,a.prototype=Object.create(b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}})}:function(a,b){a.super_=b;var c=function(){};c.prototype=b.prototype,a.prototype=new c,a.prototype.constructor=a}},{}],5:[function(a,b){var c=b.exports={};c.nextTick=function(){var a="undefined"!=typeof window&&window.setImmediate,b="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(a)return function(a){return window.setImmediate(a)};if(b){var c=[];return window.addEventListener("message",function(a){var b=a.source;if((b===window||null===b)&&"process-tick"===a.data&&(a.stopPropagation(),c.length>0)){var d=c.shift();d()}},!0),function(a){c.push(a),window.postMessage("process-tick","*")}}return function(a){setTimeout(a,0)}}(),c.title="browser",c.browser=!0,c.env={},c.argv=[],c.binding=function(){throw new Error("process.binding is not supported")},c.cwd=function(){return"/"},c.chdir=function(){throw new Error("process.chdir is not supported")}},{}],6:[function(a,b){b.exports=function(a){return a&&"object"==typeof a&&"function"==typeof a.copy&&"function"==typeof a.fill&&"function"==typeof a.readUInt8}},{}],7:[function(a,b,c){function d(a,b){var d={seen:[],stylize:f};return arguments.length>=3&&(d.depth=arguments[2]),arguments.length>=4&&(d.colors=arguments[3]),o(b)?d.showHidden=b:b&&c._extend(d,b),u(d.showHidden)&&(d.showHidden=!1),u(d.depth)&&(d.depth=2),u(d.colors)&&(d.colors=!1),u(d.customInspect)&&(d.customInspect=!0),d.colors&&(d.stylize=e),h(d,a,d.depth)}function e(a,b){var c=d.styles[b];return c?"["+d.colors[c][0]+"m"+a+"["+d.colors[c][1]+"m":a}function f(a){return a}function g(a){var b={};return a.forEach(function(a){b[a]=!0}),b}function h(a,b,d){if(a.customInspect&&b&&z(b.inspect)&&b.inspect!==c.inspect&&(!b.constructor||b.constructor.prototype!==b)){var e=b.inspect(d,a);return s(e)||(e=h(a,e,d)),e}var f=i(a,b);if(f)return f;var o=Object.keys(b),p=g(o);if(a.showHidden&&(o=Object.getOwnPropertyNames(b)),y(b)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return j(b);if(0===o.length){if(z(b)){var q=b.name?": "+b.name:"";return a.stylize("[Function"+q+"]","special")}if(v(b))return a.stylize(RegExp.prototype.toString.call(b),"regexp");if(x(b))return a.stylize(Date.prototype.toString.call(b),"date");if(y(b))return j(b)}var r="",t=!1,u=["{","}"];if(n(b)&&(t=!0,u=["[","]"]),z(b)){var w=b.name?": "+b.name:"";r=" [Function"+w+"]"}if(v(b)&&(r=" "+RegExp.prototype.toString.call(b)),x(b)&&(r=" "+Date.prototype.toUTCString.call(b)),y(b)&&(r=" "+j(b)),0===o.length&&(!t||0==b.length))return u[0]+r+u[1];if(0>d)return v(b)?a.stylize(RegExp.prototype.toString.call(b),"regexp"):a.stylize("[Object]","special");a.seen.push(b);var A;return A=t?k(a,b,d,p,o):o.map(function(c){return l(a,b,d,p,c,t)}),a.seen.pop(),m(A,r,u)}function i(a,b){if(u(b))return a.stylize("undefined","undefined");if(s(b)){var c="'"+JSON.stringify(b).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return a.stylize(c,"string")}return r(b)?a.stylize(""+b,"number"):o(b)?a.stylize(""+b,"boolean"):p(b)?a.stylize("null","null"):void 0}function j(a){return"["+Error.prototype.toString.call(a)+"]"}function k(a,b,c,d,e){for(var f=[],g=0,h=b.length;h>g;++g)E(b,String(g))?f.push(l(a,b,c,d,String(g),!0)):f.push("");return e.forEach(function(e){e.match(/^\d+$/)||f.push(l(a,b,c,d,e,!0))}),f}function l(a,b,c,d,e,f){var g,i,j;if(j=Object.getOwnPropertyDescriptor(b,e)||{value:b[e]},j.get?i=j.set?a.stylize("[Getter/Setter]","special"):a.stylize("[Getter]","special"):j.set&&(i=a.stylize("[Setter]","special")),E(d,e)||(g="["+e+"]"),i||(a.seen.indexOf(j.value)<0?(i=p(c)?h(a,j.value,null):h(a,j.value,c-1),i.indexOf("\n")>-1&&(i=f?i.split("\n").map(function(a){return"  "+a}).join("\n").substr(2):"\n"+i.split("\n").map(function(a){return"   "+a}).join("\n"))):i=a.stylize("[Circular]","special")),u(g)){if(f&&e.match(/^\d+$/))return i;g=JSON.stringify(""+e),g.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(g=g.substr(1,g.length-2),g=a.stylize(g,"name")):(g=g.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),g=a.stylize(g,"string"))}return g+": "+i}function m(a,b,c){var d=0,e=a.reduce(function(a,b){return d++,b.indexOf("\n")>=0&&d++,a+b.replace(/\u001b\[\d\d?m/g,"").length+1},0);return e>60?c[0]+(""===b?"":b+"\n ")+" "+a.join(",\n  ")+" "+c[1]:c[0]+b+" "+a.join(", ")+" "+c[1]}function n(a){return Array.isArray(a)}function o(a){return"boolean"==typeof a}function p(a){return null===a}function q(a){return null==a}function r(a){return"number"==typeof a}function s(a){return"string"==typeof a}function t(a){return"symbol"==typeof a}function u(a){return void 0===a}function v(a){return w(a)&&"[object RegExp]"===B(a)}function w(a){return"object"==typeof a&&null!==a}function x(a){return w(a)&&"[object Date]"===B(a)}function y(a){return w(a)&&("[object Error]"===B(a)||a instanceof Error)}function z(a){return"function"==typeof a}function A(a){return null===a||"boolean"==typeof a||"number"==typeof a||"string"==typeof a||"symbol"==typeof a||"undefined"==typeof a}function B(a){return Object.prototype.toString.call(a)}function C(a){return 10>a?"0"+a.toString(10):a.toString(10)}function D(){var a=new Date,b=[C(a.getHours()),C(a.getMinutes()),C(a.getSeconds())].join(":");return[a.getDate(),K[a.getMonth()],b].join(" ")}function E(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var F=a("__browserify_process"),G="undefined"!=typeof self?self:"undefined"!=typeof window?window:{},H=/%[sdj%]/g;c.format=function(a){if(!s(a)){for(var b=[],c=0;c<arguments.length;c++)b.push(d(arguments[c]));return b.join(" ")}for(var c=1,e=arguments,f=e.length,g=String(a).replace(H,function(a){if("%%"===a)return"%";if(c>=f)return a;switch(a){case"%s":return String(e[c++]);case"%d":return Number(e[c++]);case"%j":try{return JSON.stringify(e[c++])}catch(b){return"[Circular]"}default:return a}}),h=e[c];f>c;h=e[++c])g+=p(h)||!w(h)?" "+h:" "+d(h);return g},c.deprecate=function(a,b){function d(){if(!e){if(F.throwDeprecation)throw new Error(b);F.traceDeprecation?console.trace(b):console.error(b),e=!0}return a.apply(this,arguments)}if(u(G.process))return function(){return c.deprecate(a,b).apply(this,arguments)};if(F.noDeprecation===!0)return a;var e=!1;return d};var I,J={};c.debuglog=function(a){if(u(I)&&(I=F.env.NODE_DEBUG||""),a=a.toUpperCase(),!J[a])if(new RegExp("\\b"+a+"\\b","i").test(I)){var b=F.pid;J[a]=function(){var d=c.format.apply(c,arguments);console.error("%s %d: %s",a,b,d)}}else J[a]=function(){};return J[a]},c.inspect=d,d.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},d.styles={special:"cyan",number:"yellow","boolean":"yellow",undefined:"grey","null":"bold",string:"green",date:"magenta",regexp:"red"},c.isArray=n,c.isBoolean=o,c.isNull=p,c.isNullOrUndefined=q,c.isNumber=r,c.isString=s,c.isSymbol=t,c.isUndefined=u,c.isRegExp=v,c.isObject=w,c.isDate=x,c.isError=y,c.isFunction=z,c.isPrimitive=A,c.isBuffer=a("./support/isBuffer");var K=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];c.log=function(){console.log("%s - %s",D(),c.format.apply(c,arguments))},c.inherits=a("inherits"),c._extend=function(a,b){if(!b||!w(b))return a;for(var c=Object.keys(b),d=c.length;d--;)a[c[d]]=b[c[d]];return a}},{"./support/isBuffer":6,__browserify_process:5,inherits:4}],8:[function(a,b){b.exports.Dispatcher=a("./lib/Dispatcher")},{"./lib/Dispatcher":9}],9:[function(a,b){"use strict";function c(){this.$Dispatcher_callbacks={},this.$Dispatcher_isPending={},this.$Dispatcher_isHandled={},this.$Dispatcher_isDispatching=!1,this.$Dispatcher_pendingPayload=null}var d=a("./invariant"),e=1,f="ID_";c.prototype.register=function(a){var b=f+e++;return this.$Dispatcher_callbacks[b]=a,b},c.prototype.unregister=function(a){d(this.$Dispatcher_callbacks[a],"Dispatcher.unregister(...): `%s` does not map to a registered callback.",a),delete this.$Dispatcher_callbacks[a]},c.prototype.waitFor=function(a){d(this.$Dispatcher_isDispatching,"Dispatcher.waitFor(...): Must be invoked while dispatching.");for(var b=0;b<a.length;b++){var c=a[b];this.$Dispatcher_isPending[c]?d(this.$Dispatcher_isHandled[c],"Dispatcher.waitFor(...): Circular dependency detected while waiting for `%s`.",c):(d(this.$Dispatcher_callbacks[c],"Dispatcher.waitFor(...): `%s` does not map to a registered callback.",c),this.$Dispatcher_invokeCallback(c))}},c.prototype.dispatch=function(a){d(!this.$Dispatcher_isDispatching,"Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch."),this.$Dispatcher_startDispatching(a);try{for(var b in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[b]||this.$Dispatcher_invokeCallback(b)}finally{this.$Dispatcher_stopDispatching()}},c.prototype.isDispatching=function(){return this.$Dispatcher_isDispatching},c.prototype.$Dispatcher_invokeCallback=function(a){this.$Dispatcher_isPending[a]=!0,this.$Dispatcher_callbacks[a](this.$Dispatcher_pendingPayload),this.$Dispatcher_isHandled[a]=!0},c.prototype.$Dispatcher_startDispatching=function(a){for(var b in this.$Dispatcher_callbacks)this.$Dispatcher_isPending[b]=!1,this.$Dispatcher_isHandled[b]=!1;this.$Dispatcher_pendingPayload=a,this.$Dispatcher_isDispatching=!0},c.prototype.$Dispatcher_stopDispatching=function(){this.$Dispatcher_pendingPayload=null,this.$Dispatcher_isDispatching=!1},b.exports=c},{"./invariant":10}],10:[function(a,b){"use strict";var c=function(a,b,c,d,e,f,g,h){if(!a){var i;if(void 0===b)i=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var j=[c,d,e,f,g,h],k=0;i=new Error("Invariant Violation: "+b.replace(/%s/g,function(){return j[k++]}))}throw i.framesToPop=1,i}};b.exports=c
},{}],11:[function(a,b,c){c.markdown=a("./markdown"),c.parse=c.markdown.toHTML},{"./markdown":12}],12:[function(b,c,d){!function(c){function d(){return"Markdown.mk_block( "+uneval(this.toString())+", "+uneval(this.trailing)+", "+uneval(this.lineNumber)+" )"}function e(){var a=b("util");return"Markdown.mk_block( "+a.inspect(this.toString())+", "+a.inspect(this.trailing)+", "+a.inspect(this.lineNumber)+" )"}function f(a){for(var b=0,c=-1;-1!==(c=a.indexOf("\n",c+1));)b++;return b}function g(a,b){function c(a){this.len_after=a,this.name="close_"+b}var d=a+"_state",e="strong"==a?"em_state":"strong_state";return function(f){if(this[d][0]==b)return this[d].shift(),[f.length,new c(f.length-b.length)];var g=this[e].slice(),h=this[d].slice();this[d].unshift(b);{var i=this.processInline(f.substr(b.length)),j=i[i.length-1];this[d].shift()}if(j instanceof c){i.pop();var k=f.length-j.len_after;return[k,[a].concat(i)]}return this[e]=g,this[d]=h,[b.length,b]}}function h(a){for(var b=a.split(""),c=[""],d=!1;b.length;){var e=b.shift();switch(e){case" ":d?c[c.length-1]+=e:c.push("");break;case"'":case'"':d=!d;break;case"\\":e=b.shift();default:c[c.length-1]+=e}}return c}function i(a){return r(a)&&a.length>1&&"object"==typeof a[1]&&!r(a[1])?a[1]:void 0}function j(a){return a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function k(a){if("string"==typeof a)return j(a);var b=a.shift(),c={},d=[];for(!a.length||"object"!=typeof a[0]||a[0]instanceof Array||(c=a.shift());a.length;)d.push(arguments.callee(a.shift()));var e="";for(var f in c)e+=" "+f+'="'+j(c[f])+'"';return"img"==b||"br"==b||"hr"==b?"<"+b+e+"/>":"<"+b+e+">"+d.join("")+"</"+b+">"}function l(a,b,c){var d;c=c||{};var e=a.slice(0);"function"==typeof c.preprocessTreeNode&&(e=c.preprocessTreeNode(e,b));var f=i(e);if(f){e[1]={};for(d in f)e[1][d]=f[d];f=e[1]}if("string"==typeof e)return e;switch(e[0]){case"header":e[0]="h"+e[1].level,delete e[1].level;break;case"bulletlist":e[0]="ul";break;case"numberlist":e[0]="ol";break;case"listitem":e[0]="li";break;case"para":e[0]="p";break;case"markdown":e[0]="html",f&&delete f.references;break;case"code_block":e[0]="pre",d=f?2:1;var g=["code"];g.push.apply(g,e.splice(d)),e[d]=g;break;case"inlinecode":e[0]="code";break;case"img":e[1].src=e[1].href,delete e[1].href;break;case"linebreak":e[0]="br";break;case"link":e[0]="a";break;case"link_ref":e[0]="a";var h=b[f.ref];if(!h)return f.original;delete f.ref,f.href=h.href,h.title&&(f.title=h.title),delete f.original;break;case"img_ref":e[0]="img";var h=b[f.ref];if(!h)return f.original;delete f.ref,f.src=h.href,h.title&&(f.title=h.title),delete f.original}if(d=1,f){for(var j in e[1])d=2;1===d&&e.splice(d,1)}for(;d<e.length;++d)e[d]=arguments.callee(e[d],b,c);return e}function m(a){for(var b=i(a)?2:1;b<a.length;)"string"==typeof a[b]?b+1<a.length&&"string"==typeof a[b+1]?a[b]+=a.splice(b+1,1)[0]:++b:(arguments.callee(a[b]),++b)}var n=c.Markdown=function s(a){switch(typeof a){case"undefined":this.dialect=s.dialects.Gruber;break;case"object":this.dialect=a;break;default:if(!(a in s.dialects))throw new Error("Unknown Markdown dialect '"+String(a)+"'");this.dialect=s.dialects[a]}this.em_state=[],this.strong_state=[],this.debug_indent=""};c.parse=function(a,b){var c=new n(b);return c.toTree(a)},c.toHTML=function(a,b,d){var e=c.toHTMLTree(a,b,d);return c.renderJsonML(e)},c.toHTMLTree=function(a,b,c){"string"==typeof a&&(a=this.parse(a,b));var d=i(a),e={};d&&d.references&&(e=d.references);var f=l(a,e,c);return m(f),f};var o=n.mk_block=function(a,b,c){1==arguments.length&&(b="\n\n");var f=new String(a);return f.trailing=b,f.inspect=e,f.toSource=d,void 0!=c&&(f.lineNumber=c),f};n.prototype.split_blocks=function(a){var b,c=/([\s\S]+?)($|\n(?:\s*\n|$)+)/g,d=[],e=1;for(null!=(b=/^(\s*\n)/.exec(a))&&(e+=f(b[0]),c.lastIndex=b[0].length);null!==(b=c.exec(a));)d.push(o(b[1],b[2],e)),e+=f(b[0]);return d},n.prototype.processBlock=function(a,b){var c=this.dialect.block,d=c.__order__;if("__call__"in c)return c.__call__.call(this,a,b);for(var e=0;e<d.length;e++){var f=c[d[e]].call(this,a,b);if(f)return(!r(f)||f.length>0&&!r(f[0]))&&this.debug(d[e],"didn't return a proper array"),f}return[]},n.prototype.processInline=function(a){return this.dialect.inline.__call__.call(this,String(a))},n.prototype.toTree=function(a,b){var c=a instanceof Array?a:this.split_blocks(a),d=this.tree;try{for(this.tree=b||this.tree||["markdown"];c.length;){var e=this.processBlock(c.shift(),c);e.length&&this.tree.push.apply(this.tree,e)}return this.tree}finally{b&&(this.tree=d)}},n.prototype.debug=function(){var a=Array.prototype.slice.call(arguments);a.unshift(this.debug_indent),"undefined"!=typeof print&&print.apply(print,a),"undefined"!=typeof console&&"undefined"!=typeof console.log&&console.log.apply(null,a)},n.prototype.loop_re_over_block=function(a,b,c){for(var d,e=b.valueOf();e.length&&null!=(d=a.exec(e));)e=e.substr(d[0].length),c.call(this,d);return e},n.dialects={},n.dialects.Gruber={block:{atxHeader:function(a,b){var c=a.match(/^(#{1,6})\s*(.*?)\s*#*\s*(?:\n|$)/);if(!c)return void 0;var d=["header",{level:c[1].length}];return Array.prototype.push.apply(d,this.processInline(c[2])),c[0].length<a.length&&b.unshift(o(a.substr(c[0].length),a.trailing,a.lineNumber+2)),[d]},setextHeader:function(a,b){var c=a.match(/^(.*)\n([-=])\2\2+(?:\n|$)/);if(!c)return void 0;var d="="===c[2]?1:2,e=["header",{level:d},c[1]];return c[0].length<a.length&&b.unshift(o(a.substr(c[0].length),a.trailing,a.lineNumber+2)),[e]},code:function(a,b){var c=[],d=/^(?: {0,3}\t| {4})(.*)\n?/;if(!a.match(d))return void 0;a:for(;;){var e=this.loop_re_over_block(d,a.valueOf(),function(a){c.push(a[1])});if(e.length){b.unshift(o(e,a.trailing));break a}if(!b.length)break a;if(!b[0].match(d))break a;c.push(a.trailing.replace(/[^\n]/g,"").substring(2)),a=b.shift()}return[["code_block",c.join("\n")]]},horizRule:function(a,b){var c=a.match(/^(?:([\s\S]*?)\n)?[ \t]*([-_*])(?:[ \t]*\2){2,}[ \t]*(?:\n([\s\S]*))?$/);if(!c)return void 0;var d=[["hr"]];return c[1]&&d.unshift.apply(d,this.processBlock(c[1],[])),c[3]&&b.unshift(o(c[3])),d},lists:function(){function a(a){return new RegExp("(?:^("+i+"{0,"+a+"} {0,3})("+f+")\\s+)|(^"+i+"{0,"+(a-1)+"}[ ]{0,4})")}function b(a){return a.replace(/ {0,3}\t/g,"    ")}function c(a,b,c,d){if(b)return a.push(["para"].concat(c)),void 0;var e=a[a.length-1]instanceof Array&&"para"==a[a.length-1][0]?a[a.length-1]:a;d&&a.length>1&&c.unshift(d);for(var f=0;f<c.length;f++){var g=c[f],h="string"==typeof g;h&&e.length>1&&"string"==typeof e[e.length-1]?e[e.length-1]+=g:e.push(g)}}function d(a,b){for(var c=new RegExp("^("+i+"{"+a+"}.*?\\n?)*$"),d=new RegExp("^"+i+"{"+a+"}","gm"),e=[];b.length>0;){if(c.exec(b[0])){var f=b.shift(),g=f.replace(d,"");e.push(o(g,f.trailing,f.lineNumber))}break}return e}function e(a,b,c){var d=a.list,e=d[d.length-1];if(!(e[1]instanceof Array&&"para"==e[1][0]))if(b+1==c.length)e.push(["para"].concat(e.splice(1)));else{var f=e.pop();e.push(["para"].concat(e.splice(1)),f)}}var f="[*+-]|\\d+\\.",g=/[*+-]/,h=new RegExp("^( {0,3})("+f+")[ 	]+"),i="(?: {0,3}\\t| {4})";return function(f,i){function j(a){var b=g.exec(a[2])?["bulletlist"]:["numberlist"];return n.push({list:b,indent:a[1]}),b}var k=f.match(h);if(!k)return void 0;for(var l,m,n=[],o=j(k),p=!1,r=[n[0].list];;){for(var s=f.split(/(?=\n)/),t="",u=0;u<s.length;u++){var v="",w=s[u].replace(/^\n/,function(a){return v=a,""}),x=a(n.length);if(k=w.match(x),void 0!==k[1]){t.length&&(c(l,p,this.processInline(t),v),p=!1,t=""),k[1]=b(k[1]);var y=Math.floor(k[1].length/4)+1;if(y>n.length)o=j(k),l.push(o),l=o[1]=["listitem"];else{var z=!1;for(m=0;m<n.length;m++)if(n[m].indent==k[1]){o=n[m].list,n.splice(m+1),z=!0;break}z||(y++,y<=n.length?(n.splice(y),o=n[y-1].list):(o=j(k),l.push(o))),l=["listitem"],o.push(l)}v=""}w.length>k[0].length&&(t+=v+w.substr(k[0].length))}t.length&&(c(l,p,this.processInline(t),v),p=!1,t="");var A=d(n.length,i);A.length>0&&(q(n,e,this),l.push.apply(l,this.toTree(A,[])));var B=i[0]&&i[0].valueOf()||"";if(!B.match(h)&&!B.match(/^ /))break;f=i.shift();var C=this.dialect.block.horizRule(f,i);if(C){r.push.apply(r,C);break}q(n,e,this),p=!0}return r}}(),blockquote:function(a,b){if(!a.match(/^>/m))return void 0;var c=[];if(">"!=a[0]){for(var d=a.split(/\n/),e=[];d.length&&">"!=d[0][0];)e.push(d.shift());a=d.join("\n"),c.push.apply(c,this.processBlock(e.join("\n"),[]))}for(;b.length&&">"==b[0][0];){var f=b.shift();a=new String(a+a.trailing+f),a.trailing=f.trailing}{var g=a.replace(/^> ?/gm,"");this.tree}return c.push(this.toTree(g,["blockquote"])),c},referenceDefn:function(a,b){var c=/^\s*\[(.*?)\]:\s*(\S+)(?:\s+(?:(['"])(.*?)\3|\((.*?)\)))?\n?/;if(!a.match(c))return void 0;i(this.tree)||this.tree.splice(1,0,{});var d=i(this.tree);void 0===d.references&&(d.references={});var e=this.loop_re_over_block(c,a,function(a){a[2]&&"<"==a[2][0]&&">"==a[2][a[2].length-1]&&(a[2]=a[2].substring(1,a[2].length-1));var b=d.references[a[1].toLowerCase()]={href:a[2]};void 0!==a[4]?b.title=a[4]:void 0!==a[5]&&(b.title=a[5])});return e.length&&b.unshift(o(e,a.trailing)),[]},para:function(a){return[["para"].concat(this.processInline(a))]}}},n.dialects.Gruber.inline={__oneElement__:function(a,b,c){var d,e;b=b||this.dialect.inline.__patterns__;var f=new RegExp("([\\s\\S]*?)("+(b.source||b)+")");if(d=f.exec(a),!d)return[a.length,a];if(d[1])return[d[1].length,d[1]];var e;return d[2]in this.dialect.inline&&(e=this.dialect.inline[d[2]].call(this,a.substr(d.index),d,c||[])),e=e||[d[2].length,d[2]]},__call__:function(a,b){function c(a){"string"==typeof a&&"string"==typeof e[e.length-1]?e[e.length-1]+=a:e.push(a)}for(var d,e=[];a.length>0;)d=this.dialect.inline.__oneElement__.call(this,a,b,e),a=a.substr(d.shift()),q(d,c);return e},"]":function(){},"}":function(){},"\\":function(a){return a.match(/^\\[\\`\*_{}\[\]()#\+.!\-]/)?[2,a[1]]:[1,"\\"]},"![":function(a){var b=a.match(/^!\[(.*?)\][ \t]*\([ \t]*(\S*)(?:[ \t]+(["'])(.*?)\3)?[ \t]*\)/);if(b){b[2]&&"<"==b[2][0]&&">"==b[2][b[2].length-1]&&(b[2]=b[2].substring(1,b[2].length-1)),b[2]=this.dialect.inline.__call__.call(this,b[2],/\\/)[0];var c={alt:b[1],href:b[2]||""};return void 0!==b[4]&&(c.title=b[4]),[b[0].length,["img",c]]}return b=a.match(/^!\[(.*?)\][ \t]*\[(.*?)\]/),b?[b[0].length,["img_ref",{alt:b[1],ref:b[2].toLowerCase(),original:b[0]}]]:[2,"!["]},"[":function t(a){var b=String(a),c=n.DialectHelpers.inline_until_char.call(this,a.substr(1),"]");if(!c)return[1,"["];var t,d,e=1+c[0],f=c[1];a=a.substr(e);var g=a.match(/^\s*\([ \t]*(\S+)(?:[ \t]+(["'])(.*?)\2)?[ \t]*\)/);if(g){var h=g[1];if(e+=g[0].length,h&&"<"==h[0]&&">"==h[h.length-1]&&(h=h.substring(1,h.length-1)),!g[3])for(var i=1,j=0;j<h.length;j++)switch(h[j]){case"(":i++;break;case")":0==--i&&(e-=h.length-j,h=h.substring(0,j))}return h=this.dialect.inline.__call__.call(this,h,/\\/)[0],d={href:h||""},void 0!==g[3]&&(d.title=g[3]),t=["link",d].concat(f),[e,t]}return g=a.match(/^\s*\[(.*?)\]/),g?(e+=g[0].length,d={ref:(g[1]||String(f)).toLowerCase(),original:b.substr(0,e)},t=["link_ref",d].concat(f),[e,t]):1==f.length&&"string"==typeof f[0]?(d={ref:f[0].toLowerCase(),original:b.substr(0,e)},t=["link_ref",d,f[0]],[e,t]):[1,"["]},"<":function(a){var b;return null!=(b=a.match(/^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\.[a-zA-Z]+))>/))?b[3]?[b[0].length,["link",{href:"mailto:"+b[3]},b[3]]]:"mailto"==b[2]?[b[0].length,["link",{href:b[1]},b[1].substr("mailto:".length)]]:[b[0].length,["link",{href:b[1]},b[1]]]:[1,"<"]},"`":function(a){var b=a.match(/(`+)(([\s\S]*?)\1)/);return b&&b[2]?[b[1].length+b[2].length,["inlinecode",b[3]]]:[1,"`"]},"  \n":function(){return[3,["linebreak"]]}},n.dialects.Gruber.inline["**"]=g("strong","**"),n.dialects.Gruber.inline.__=g("strong","__"),n.dialects.Gruber.inline["*"]=g("em","*"),n.dialects.Gruber.inline._=g("em","_"),n.buildBlockOrder=function(a){var b=[];for(var c in a)"__order__"!=c&&"__call__"!=c&&b.push(c);a.__order__=b},n.buildInlinePatterns=function(a){var b=[];for(var c in a)if(!c.match(/^__.*__$/)){var d=c.replace(/([\\.*+?|()\[\]{}])/g,"\\$1").replace(/\n/,"\\n");b.push(1==c.length?d:"(?:"+d+")")}b=b.join("|"),a.__patterns__=b;var e=a.__call__;a.__call__=function(a,c){return void 0!=c?e.call(this,a,c):e.call(this,a,b)}},n.DialectHelpers={},n.DialectHelpers.inline_until_char=function(a,b){for(var c=0,d=[];;){if(a[c]==b)return c++,[c,d];if(c>=a.length)return null;res=this.dialect.inline.__oneElement__.call(this,a.substr(c)),c+=res[0],d.push.apply(d,res.slice(1))}},n.subclassDialect=function(a){function b(){}function c(){}return b.prototype=a.block,c.prototype=a.inline,{block:new b,inline:new c}},n.buildBlockOrder(n.dialects.Gruber.block),n.buildInlinePatterns(n.dialects.Gruber.inline),n.dialects.Maruku=n.subclassDialect(n.dialects.Gruber),n.dialects.Maruku.processMetaHash=function(a){for(var b=h(a),c={},d=0;d<b.length;++d)if(/^#/.test(b[d]))c.id=b[d].substring(1);else if(/^\./.test(b[d]))c["class"]=c["class"]?c["class"]+b[d].replace(/./," "):b[d].substring(1);else if(/\=/.test(b[d])){var e=b[d].split(/\=/);c[e[0]]=e[1]}return c},n.dialects.Maruku.block.document_meta=function(a){if(a.lineNumber>1)return void 0;if(!a.match(/^(?:\w+:.*\n)*\w+:.*$/))return void 0;i(this.tree)||this.tree.splice(1,0,{});var b=a.split(/\n/);for(p in b){var c=b[p].match(/(\w+):\s*(.*)$/),d=c[1].toLowerCase(),e=c[2];this.tree[1][d]=e}return[]},n.dialects.Maruku.block.block_meta=function(b){var c=b.match(/(^|\n) {0,3}\{:\s*((?:\\\}|[^\}])*)\s*\}$/);if(!c)return void 0;var d,e=this.dialect.processMetaHash(c[2]);if(""===c[1]){var f=this.tree[this.tree.length-1];if(d=i(f),"string"==typeof f)return void 0;d||(d={},f.splice(1,0,d));for(a in e)d[a]=e[a];return[]}var g=b.replace(/\n.*$/,""),h=this.processBlock(g,[]);d=i(h[0]),d||(d={},h[0].splice(1,0,d));for(a in e)d[a]=e[a];return h},n.dialects.Maruku.block.definition_list=function(a,b){var c,d=/^((?:[^\s:].*\n)+):\s+([\s\S]+)$/,e=["dl"];if(!(h=a.match(d)))return void 0;for(var f=[a];b.length&&d.exec(b[0]);)f.push(b.shift());for(var g=0;g<f.length;++g){var h=f[g].match(d),i=h[1].replace(/\n$/,"").split(/\n/),j=h[2].split(/\n:\s+/);for(c=0;c<i.length;++c)e.push(["dt",i[c]]);for(c=0;c<j.length;++c)e.push(["dd"].concat(this.processInline(j[c].replace(/(\n)\s+/,"$1"))))}return[e]},n.dialects.Maruku.inline["{:"]=function(a,b,c){if(!c.length)return[2,"{:"];var d=c[c.length-1];if("string"==typeof d)return[2,"{:"];var e=a.match(/^\{:\s*((?:\\\}|[^\}])*)\s*\}/);if(!e)return[2,"{:"];var f=this.dialect.processMetaHash(e[1]),g=i(d);g||(g={},d.splice(1,0,g));for(var h in f)g[h]=f[h];return[e[0].length,""]},n.buildBlockOrder(n.dialects.Maruku.block),n.buildInlinePatterns(n.dialects.Maruku.inline);var q,r=Array.isArray||function(a){return"[object Array]"==Object.prototype.toString.call(a)};q=Array.prototype.forEach?function(a,b,c){return a.forEach(b,c)}:function(a,b,c){for(var d=0;d<a.length;d++)b.call(c||a,a[d],d,a)},c.renderJsonML=function(a,b){b=b||{},b.root=b.root||!1;var c=[];if(b.root)c.push(k(a));else for(a.shift(),!a.length||"object"!=typeof a[0]||a[0]instanceof Array||a.shift();a.length;)c.push(k(a.shift()));return c.join("\n\n")}}(function(){return"undefined"==typeof d?(window.markdown={},window.markdown):d}())},{util:7}],13:[function(a,b){"use strict";function c(a){if(null==a)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(a)}b.exports=Object.assign||function(a){for(var b,d,e=c(a),f=1;f<arguments.length;f++){b=arguments[f],d=Object.keys(Object(b));for(var g=0;g<d.length;g++)e[d[g]]=b[d[g]]}return e}},{}],14:[function(a,b,c){var d=a("__browserify_process");!function(a){if("function"==typeof bootstrap)bootstrap("promise",a);else if("object"==typeof c)a(void 0,c);else if("function"==typeof define)define(a);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeQ=function(){var b={};return a(void 0,b)}}else a(void 0,Q={})}(function(a,b){"use strict";function c(a){return"[object StopIteration]"===sb(a)||a instanceof lb}function e(a,b){b.stack&&"object"==typeof a&&null!==a&&a.stack&&-1===a.stack.indexOf(tb)&&(a.stack=f(a.stack)+"\n"+tb+"\n"+f(b.stack))}function f(a){for(var b=a.split("\n"),c=[],d=0;d<b.length;++d){var e=b[d];h(e)||g(e)||c.push(e)}return c.join("\n")}function g(a){return-1!==a.indexOf("(module.js:")||-1!==a.indexOf("(node.js:")}function h(a){var b=/at .+ \((.*):(\d+):\d+\)/.exec(a);if(!b)return!1;var c=b[1],d=b[2];return c===bb&&d>=cb&&Ab>=d}function i(){if(Error.captureStackTrace){var a,b,c=Error.prepareStackTrace;return Error.prepareStackTrace=function(c,d){a=d[1].getFileName(),b=d[1].getLineNumber()},(new Error).stack,Error.prepareStackTrace=c,bb=a,b}}function j(a,b,c){return function(){return"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(b+" is deprecated, use "+c+" instead.",new Error("").stack),a.apply(a,arguments)}}function k(){function a(a){c&&(b=v(a),nb(c,function(a,c){fb(function(){b.promiseSend.apply(b,c)})},void 0),c=void 0,d=void 0)}var b,c=[],d=[],e=qb(k.prototype),f=qb(m.prototype);return f.promiseSend=function(a,e,f,g){var h=mb(arguments);c?(c.push(h),"when"===a&&g&&d.push(g)):fb(function(){b.promiseSend.apply(b,h)})},f.valueOf=function(){return c?f:b.valueOf()},Error.captureStackTrace&&(Error.captureStackTrace(f,k),f.stack=f.stack.substring(f.stack.indexOf("\n")+1)),eb(f),e.promise=f,e.resolve=a,e.reject=function(b){a(u(b))},e.notify=function(a){c&&nb(d,function(b,c){fb(function(){c(a)})},void 0)},e}function l(a){var b=k();return J(a,b.resolve,b.reject,b.notify).fail(b.reject),b.promise}function m(a,b,c,d){void 0===b&&(b=function(a){return u(new Error("Promise does not support operation: "+a))});var e=qb(m.prototype);return e.promiseSend=function(c,d){var f,g=mb(arguments,2);try{f=a[c]?a[c].apply(e,g):b.apply(e,[c].concat(g))}catch(h){f=u(h)}d&&d(f)},c&&(e.valueOf=c),d&&(e.exception=d),eb(e),e}function n(a){return o(a)?a.valueOf():a}function o(a){return a&&"function"==typeof a.promiseSend}function p(a){return a&&"function"==typeof a.then}function q(a){return r(a)||s(a)}function r(a){return!p(n(a))}function s(a){return a=n(a),o(a)&&"exception"in a}function t(){ub||"undefined"==typeof window||window.Touch||!window.console||console.log("Should be empty:",wb),ub=!0}function u(a){var b=m({when:function(b){if(b){var c=ob(vb,this);-1!==c&&(wb.splice(c,1),vb.splice(c,1))}return b?b(a):u(a)}},function(){return u(a)},function(){return this},a);return t(),vb.push(b),wb.push(a),b}function v(a){if(o(a))return a;if(a=n(a),p(a)){var b=k();return a.then(b.resolve,b.reject,b.notify),b.promise}return m({when:function(){return a},get:function(b){return a[b]},put:function(b,c){return a[b]=c,a},del:function(b){return delete a[b],a},post:function(b,c){return a[b].apply(a,c)},apply:function(b,c){return a.apply(b,c)},fapply:function(b){return a.apply(void 0,b)},viewInfo:function(){function b(a){d[a]||(d[a]=typeof c[a])}for(var c=a,d={};c;)Object.getOwnPropertyNames(c).forEach(b),c=Object.getPrototypeOf(c);return{type:typeof a,properties:d}},keys:function(){return rb(a)}},void 0,function(){return a})}function w(a){return m({isDef:function(){}},function(){var b=mb(arguments);return F.apply(void 0,[a].concat(b))},function(){return n(a)})}function x(a,b){return a=v(a),b?m({viewInfo:function(){return b}},function(){var b=mb(arguments);return F.apply(void 0,[a].concat(b))},function(){return n(a)}):F(a,"viewInfo")}function y(a){return x(a).when(function(b){var c;c="function"===b.type?function(){return yb(a,void 0,arguments)}:{};var d=b.properties||{};return rb(d).forEach(function(b){"function"===d[b]&&(c[b]=function(){return xb(a,b,arguments)})}),v(c)})}function z(a,b,c,d){function f(a){try{return"function"==typeof b?b(a):a}catch(c){return u(c)}}function g(a){if("function"==typeof c){e(a,l);try{return c(a)}catch(b){return u(b)}}return u(a)}function h(a){return"function"==typeof d?d(a):a}var i=k(),j=!1,l=v(a);return fb(function(){l.promiseSend("when",function(a){j||(j=!0,i.resolve(f(a)))},function(a){j||(j=!0,i.resolve(g(a)))})}),l.promiseSend("when",void 0,void 0,function(a){i.notify(h(a))}),i.promise}function A(a,b,c){return z(a,function(a){return M(a).then(function(a){return b.apply(void 0,a)},c)},c)}function B(a){return function(){function b(a,b){var g;try{g=d[a](b)}catch(h){return c(h)?h.value:u(h)}return z(g,e,f)}var d=a.apply(this,arguments),e=b.bind(b,"send"),f=b.bind(b,"throw");return e()}}function C(a){throw new lb(a)}function D(a){return function(){return M([this,M(arguments)]).spread(function(b,c){return a.apply(b,c)})}}function E(a){return function(b){var c=mb(arguments,1);return F.apply(void 0,[b,a].concat(c))}}function F(a,b){var c=k(),d=mb(arguments,2);return a=v(a),fb(function(){a.promiseSend.apply(a,[b,c.resolve].concat(d))}),c.promise}function G(a,b,c){var d=k();return a=v(a),fb(function(){a.promiseSend.apply(a,[b,d.resolve].concat(c))}),d.promise}function H(a){return function(b){var c=mb(arguments,1);return G(b,a,c)}}function I(a,b){var c=mb(arguments,2);return yb(a,b,c)}function J(a){var b=mb(arguments,1);return zb(a,b)}function K(a,b){var c=mb(arguments,2);return function(){var d=c.concat(mb(arguments));return yb(a,b,d)}}function L(a){var b=mb(arguments,1);return function(){var c=b.concat(mb(arguments));return zb(a,c)}}function M(a){return z(a,function(a){var b=a.length;if(0===b)return v(a);var c=k();return nb(a,function(d,e,f){r(e)?(a[f]=n(e),0===--b&&c.resolve(a)):z(e,function(d){a[f]=d,0===--b&&c.resolve(a)}).fail(c.reject)},void 0),c.promise})}function N(a){return z(a,function(a){return z(M(pb(a,function(a){return z(a,db,db)})),function(){return pb(a,v)})})}function O(a,b){return z(a,void 0,b)}function P(a,b){return z(a,void 0,void 0,b)}function Q(a,b){return z(a,function(a){return z(b(),function(){return a})},function(a){return z(b(),function(){return u(a)})})}function R(a,c,d,f){function g(c){fb(function(){if(e(c,a),!b.onerror)throw c;b.onerror(c)})}var h=c||d||f?z(a,c,d,f):a;O(h,g)}function S(a,b){var c=k(),d=setTimeout(function(){c.reject(new Error("Timed out after "+b+" ms"))},b);return z(a,function(a){clearTimeout(d),c.resolve(a)},function(a){clearTimeout(d),c.reject(a)}),c.promise}function T(a,b){void 0===b&&(b=a,a=void 0);var c=k();return setTimeout(function(){c.resolve(a)},b),c.promise}function U(a,b){var c=mb(b),d=k();return c.push(d.makeNodeResolver()),zb(a,c).fail(d.reject),d.promise}function V(a){var b=mb(arguments,1),c=k();return b.push(c.makeNodeResolver()),zb(a,b).fail(c.reject),c.promise}function W(a){var b=mb(arguments,1);return function(){var c=b.concat(mb(arguments)),d=k();return c.push(d.makeNodeResolver()),zb(a,c).fail(d.reject),d.promise}}function X(a,b,c){return Z(a,b).apply(void 0,c)}function Y(a,b){var c=mb(arguments,2);return X(a,b,c)}function Z(a){if(arguments.length>1){var b=arguments[1],c=mb(arguments,2),d=a;a=function(){var a=c.concat(mb(arguments));return d.apply(b,a)}}return function(){var b=k(),c=mb(arguments);return c.push(b.makeNodeResolver()),zb(a,c).fail(b.reject),b.promise}}function $(a,b,c){var d=mb(c),e=k();return d.push(e.makeNodeResolver()),xb(a,b,d).fail(e.reject),e.promise}function _(a,b){var c=mb(arguments,2),d=k();return c.push(d.makeNodeResolver()),xb(a,b,c).fail(d.reject),d.promise}function ab(a,b){return b?(a.then(function(a){fb(function(){b(null,a)})},function(a){fb(function(){b(a)})}),void 0):a}var bb,cb=i(),db=function(){},eb=Object.freeze||db;"undefined"!=typeof cajaVM&&(eb=cajaVM.def);var fb;if("undefined"!=typeof d)fb=d.nextTick;else if("function"==typeof setImmediate)fb=setImmediate;else if("undefined"!=typeof MessageChannel){var gb=new MessageChannel,hb={},ib=hb;gb.port1.onmessage=function(){hb=hb.next;var a=hb.task;delete hb.task,a()},fb=function(a){ib=ib.next={task:a},gb.port2.postMessage(0)}}else fb=function(a){setTimeout(a,0)};var jb;if(Function.prototype.bind){var kb=Function.prototype.bind;jb=kb.bind(kb.call)}else jb=function(a){return function(){return a.call.apply(a,arguments)}};var lb,mb=jb(Array.prototype.slice),nb=jb(Array.prototype.reduce||function(a,b){var c=0,d=this.length;if(1===arguments.length)for(;;){if(c in this){b=this[c++];break}if(++c>=d)throw new TypeError}for(;d>c;c++)c in this&&(b=a(b,this[c],c));return b}),ob=jb(Array.prototype.indexOf||function(a){for(var b=0;b<this.length;b++)if(this[b]===a)return b;return-1}),pb=jb(Array.prototype.map||function(a,b){var c=this,d=[];return nb(c,function(e,f,g){d.push(a.call(b,f,g,c))},void 0),d}),qb=Object.create||function(a){function b(){}return b.prototype=a,new b},rb=Object.keys||function(a){var b=[];for(var c in a)b.push(c);return b},sb=Object.prototype.toString;lb="undefined"!=typeof ReturnValue?ReturnValue:function(a){this.value=a};var tb="From previous event:";b.nextTick=fb,b.defer=k,k.prototype.makeNodeResolver=function(){var a=this;return function(b,c){b?a.reject(b):arguments.length>2?a.resolve(mb(arguments,1)):a.resolve(c)}},k.prototype.node=j(k.prototype.makeNodeResolver,"node","makeNodeResolver"),b.promise=l,b.makePromise=m,m.prototype.then=function(a,b,c){return z(this,a,b,c)},m.prototype.thenResolve=function(a){return z(this,function(){return a})},nb(["isResolved","isFulfilled","isRejected","when","spread","send","get","put","del","post","invoke","keys","apply","call","bind","fapply","fcall","fbind","all","allResolved","view","viewInfo","timeout","delay","catch","finally","fail","fin","progress","end","done","nfcall","nfapply","nfbind","ncall","napply","nbind","npost","ninvoke","nend","nodeify"],function(a,c){m.prototype[c]=function(){return b[c].apply(b,[this].concat(mb(arguments)))}},void 0),m.prototype.toSource=function(){return this.toString()},m.prototype.toString=function(){return"[object Promise]"},eb(m.prototype),b.nearer=n,b.isPromise=o,b.isPromiseAlike=p,b.isResolved=q,b.isFulfilled=r,b.isRejected=s;var ub,vb=[],wb=[];b.reject=u,b.begin=v,b.resolve=v,b.ref=j(v,"ref","resolve"),b.master=w,b.viewInfo=x,b.view=y,b.when=z,b.spread=A,b.async=B,b["return"]=C,b.promised=D,b.sender=j(E,"sender","dispatcher"),b.Method=j(E,"Method","dispatcher"),b.send=j(F,"send","dispatch"),b.dispatch=G,b.dispatcher=H,b.get=H("get"),b.put=H("put"),b["delete"]=b.del=H("del");var xb=b.post=H("post");b.invoke=function(a,b){var c=mb(arguments,2);return xb(a,b,c)};var yb=b.apply=j(H("apply"),"apply","fapply"),zb=b.fapply=H("fapply");b.call=j(I,"call","fcall"),b["try"]=J,b.fcall=J,b.bind=j(K,"bind","fbind"),b.fbind=L,b.keys=H("keys"),b.all=M,b.allResolved=N,b["catch"]=b.fail=O,b.progress=P,b["finally"]=b.fin=Q,b.end=j(R,"end","done"),b.done=R,b.timeout=S,b.delay=T,b.nfapply=U,b.nfcall=V,b.nfbind=W,b.napply=j(X,"napply","npost"),b.ncall=j(Y,"ncall","ninvoke"),b.nbind=j(Z,"nbind","nfbind"),b.npost=$,b.ninvoke=_,b.nend=j(ab,"nend","nodeify"),b.nodeify=ab;var Ab=i()})},{__browserify_process:5}],15:[function(a,b){var c=a("__browserify_process"),d=function(a,b,d,e,f,g,h,i){if("production"!==c.env.NODE_ENV&&void 0===b)throw new Error("invariant requires an error message argument");if(!a){var j;if(void 0===b)j=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var k=[d,e,f,g,h,i],l=0;j=new Error("Invariant Violation: "+b.replace(/%s/g,function(){return k[l++]}))}throw j.framesToPop=1,j}};b.exports=d},{__browserify_process:5}],16:[function(a,b){var c=a("__browserify_process"),d=a("./invariant"),e=function(a){var b,e={};"production"!==c.env.NODE_ENV?d(a instanceof Object&&!Array.isArray(a),"keyMirror(...): Argument must be an object."):d(a instanceof Object&&!Array.isArray(a));for(b in a)a.hasOwnProperty(b)&&(e[b]=b);return e};b.exports=e},{"./invariant":15,__browserify_process:5}],17:[function(a,b,c){(function(){var a=this,d=a._,e={},f=Array.prototype,g=Object.prototype,h=Function.prototype,i=f.push,j=f.slice,k=f.concat,l=g.toString,m=g.hasOwnProperty,n=f.forEach,o=f.map,p=f.reduce,q=f.reduceRight,r=f.filter,s=f.every,t=f.some,u=f.indexOf,v=f.lastIndexOf,w=Array.isArray,x=Object.keys,y=h.bind,z=function(a){return a instanceof z?a:this instanceof z?(this._wrapped=a,void 0):new z(a)};"undefined"!=typeof c?("undefined"!=typeof b&&b.exports&&(c=b.exports=z),c._=z):a._=z,z.VERSION="1.4.4";var A=z.each=z.forEach=function(a,b,c){if(null!=a)if(n&&a.forEach===n)a.forEach(b,c);else if(a.length===+a.length){for(var d=0,f=a.length;f>d;d++)if(b.call(c,a[d],d,a)===e)return}else for(var g in a)if(z.has(a,g)&&b.call(c,a[g],g,a)===e)return};z.map=z.collect=function(a,b,c){var d=[];return null==a?d:o&&a.map===o?a.map(b,c):(A(a,function(a,e,f){d[d.length]=b.call(c,a,e,f)}),d)};var B="Reduce of empty array with no initial value";z.reduce=z.foldl=z.inject=function(a,b,c,d){var e=arguments.length>2;if(null==a&&(a=[]),p&&a.reduce===p)return d&&(b=z.bind(b,d)),e?a.reduce(b,c):a.reduce(b);if(A(a,function(a,f,g){e?c=b.call(d,c,a,f,g):(c=a,e=!0)}),!e)throw new TypeError(B);return c},z.reduceRight=z.foldr=function(a,b,c,d){var e=arguments.length>2;if(null==a&&(a=[]),q&&a.reduceRight===q)return d&&(b=z.bind(b,d)),e?a.reduceRight(b,c):a.reduceRight(b);var f=a.length;if(f!==+f){var g=z.keys(a);f=g.length}if(A(a,function(h,i,j){i=g?g[--f]:--f,e?c=b.call(d,c,a[i],i,j):(c=a[i],e=!0)}),!e)throw new TypeError(B);return c},z.find=z.detect=function(a,b,c){var d;return C(a,function(a,e,f){return b.call(c,a,e,f)?(d=a,!0):void 0}),d},z.filter=z.select=function(a,b,c){var d=[];return null==a?d:r&&a.filter===r?a.filter(b,c):(A(a,function(a,e,f){b.call(c,a,e,f)&&(d[d.length]=a)}),d)},z.reject=function(a,b,c){return z.filter(a,function(a,d,e){return!b.call(c,a,d,e)},c)},z.every=z.all=function(a,b,c){b||(b=z.identity);var d=!0;return null==a?d:s&&a.every===s?a.every(b,c):(A(a,function(a,f,g){return(d=d&&b.call(c,a,f,g))?void 0:e}),!!d)};var C=z.some=z.any=function(a,b,c){b||(b=z.identity);var d=!1;return null==a?d:t&&a.some===t?a.some(b,c):(A(a,function(a,f,g){return d||(d=b.call(c,a,f,g))?e:void 0}),!!d)};z.contains=z.include=function(a,b){return null==a?!1:u&&a.indexOf===u?-1!=a.indexOf(b):C(a,function(a){return a===b})},z.invoke=function(a,b){var c=j.call(arguments,2),d=z.isFunction(b);return z.map(a,function(a){return(d?b:a[b]).apply(a,c)})},z.pluck=function(a,b){return z.map(a,function(a){return a[b]})},z.where=function(a,b,c){return z.isEmpty(b)?c?null:[]:z[c?"find":"filter"](a,function(a){for(var c in b)if(b[c]!==a[c])return!1;return!0})},z.findWhere=function(a,b){return z.where(a,b,!0)},z.max=function(a,b,c){if(!b&&z.isArray(a)&&a[0]===+a[0]&&a.length<65535)return Math.max.apply(Math,a);if(!b&&z.isEmpty(a))return-1/0;var d={computed:-1/0,value:-1/0};return A(a,function(a,e,f){var g=b?b.call(c,a,e,f):a;g>=d.computed&&(d={value:a,computed:g})}),d.value},z.min=function(a,b,c){if(!b&&z.isArray(a)&&a[0]===+a[0]&&a.length<65535)return Math.min.apply(Math,a);if(!b&&z.isEmpty(a))return 1/0;var d={computed:1/0,value:1/0};return A(a,function(a,e,f){var g=b?b.call(c,a,e,f):a;g<d.computed&&(d={value:a,computed:g})}),d.value},z.shuffle=function(a){var b,c=0,d=[];return A(a,function(a){b=z.random(c++),d[c-1]=d[b],d[b]=a}),d};var D=function(a){return z.isFunction(a)?a:function(b){return b[a]}};z.sortBy=function(a,b,c){var d=D(b);return z.pluck(z.map(a,function(a,b,e){return{value:a,index:b,criteria:d.call(c,a,b,e)}}).sort(function(a,b){var c=a.criteria,d=b.criteria;if(c!==d){if(c>d||void 0===c)return 1;if(d>c||void 0===d)return-1}return a.index<b.index?-1:1}),"value")};var E=function(a,b,c,d){var e={},f=D(b||z.identity);return A(a,function(b,g){var h=f.call(c,b,g,a);d(e,h,b)}),e};z.groupBy=function(a,b,c){return E(a,b,c,function(a,b,c){(z.has(a,b)?a[b]:a[b]=[]).push(c)})},z.countBy=function(a,b,c){return E(a,b,c,function(a,b){z.has(a,b)||(a[b]=0),a[b]++})},z.sortedIndex=function(a,b,c,d){c=null==c?z.identity:D(c);for(var e=c.call(d,b),f=0,g=a.length;g>f;){var h=f+g>>>1;c.call(d,a[h])<e?f=h+1:g=h}return f},z.toArray=function(a){return a?z.isArray(a)?j.call(a):a.length===+a.length?z.map(a,z.identity):z.values(a):[]},z.size=function(a){return null==a?0:a.length===+a.length?a.length:z.keys(a).length},z.first=z.head=z.take=function(a,b,c){return null==a?void 0:null==b||c?a[0]:j.call(a,0,b)
},z.initial=function(a,b,c){return j.call(a,0,a.length-(null==b||c?1:b))},z.last=function(a,b,c){return null==a?void 0:null==b||c?a[a.length-1]:j.call(a,Math.max(a.length-b,0))},z.rest=z.tail=z.drop=function(a,b,c){return j.call(a,null==b||c?1:b)},z.compact=function(a){return z.filter(a,z.identity)};var F=function(a,b,c){return A(a,function(a){z.isArray(a)?b?i.apply(c,a):F(a,b,c):c.push(a)}),c};z.flatten=function(a,b){return F(a,b,[])},z.without=function(a){return z.difference(a,j.call(arguments,1))},z.uniq=z.unique=function(a,b,c,d){z.isFunction(b)&&(d=c,c=b,b=!1);var e=c?z.map(a,c,d):a,f=[],g=[];return A(e,function(c,d){(b?d&&g[g.length-1]===c:z.contains(g,c))||(g.push(c),f.push(a[d]))}),f},z.union=function(){return z.uniq(k.apply(f,arguments))},z.intersection=function(a){var b=j.call(arguments,1);return z.filter(z.uniq(a),function(a){return z.every(b,function(b){return z.indexOf(b,a)>=0})})},z.difference=function(a){var b=k.apply(f,j.call(arguments,1));return z.filter(a,function(a){return!z.contains(b,a)})},z.zip=function(){for(var a=j.call(arguments),b=z.max(z.pluck(a,"length")),c=new Array(b),d=0;b>d;d++)c[d]=z.pluck(a,""+d);return c},z.object=function(a,b){if(null==a)return{};for(var c={},d=0,e=a.length;e>d;d++)b?c[a[d]]=b[d]:c[a[d][0]]=a[d][1];return c},z.indexOf=function(a,b,c){if(null==a)return-1;var d=0,e=a.length;if(c){if("number"!=typeof c)return d=z.sortedIndex(a,b),a[d]===b?d:-1;d=0>c?Math.max(0,e+c):c}if(u&&a.indexOf===u)return a.indexOf(b,c);for(;e>d;d++)if(a[d]===b)return d;return-1},z.lastIndexOf=function(a,b,c){if(null==a)return-1;var d=null!=c;if(v&&a.lastIndexOf===v)return d?a.lastIndexOf(b,c):a.lastIndexOf(b);for(var e=d?c:a.length;e--;)if(a[e]===b)return e;return-1},z.range=function(a,b,c){arguments.length<=1&&(b=a||0,a=0),c=arguments[2]||1;for(var d=Math.max(Math.ceil((b-a)/c),0),e=0,f=new Array(d);d>e;)f[e++]=a,a+=c;return f},z.bind=function(a,b){if(a.bind===y&&y)return y.apply(a,j.call(arguments,1));var c=j.call(arguments,2);return function(){return a.apply(b,c.concat(j.call(arguments)))}},z.partial=function(a){var b=j.call(arguments,1);return function(){return a.apply(this,b.concat(j.call(arguments)))}},z.bindAll=function(a){var b=j.call(arguments,1);return 0===b.length&&(b=z.functions(a)),A(b,function(b){a[b]=z.bind(a[b],a)}),a},z.memoize=function(a,b){var c={};return b||(b=z.identity),function(){var d=b.apply(this,arguments);return z.has(c,d)?c[d]:c[d]=a.apply(this,arguments)}},z.delay=function(a,b){var c=j.call(arguments,2);return setTimeout(function(){return a.apply(null,c)},b)},z.defer=function(a){return z.delay.apply(z,[a,1].concat(j.call(arguments,1)))},z.throttle=function(a,b){var c,d,e,f,g=0,h=function(){g=new Date,e=null,f=a.apply(c,d)};return function(){var i=new Date,j=b-(i-g);return c=this,d=arguments,0>=j?(clearTimeout(e),e=null,g=i,f=a.apply(c,d)):e||(e=setTimeout(h,j)),f}},z.debounce=function(a,b,c){var d,e;return function(){var f=this,g=arguments,h=function(){d=null,c||(e=a.apply(f,g))},i=c&&!d;return clearTimeout(d),d=setTimeout(h,b),i&&(e=a.apply(f,g)),e}},z.once=function(a){var b,c=!1;return function(){return c?b:(c=!0,b=a.apply(this,arguments),a=null,b)}},z.wrap=function(a,b){return function(){var c=[a];return i.apply(c,arguments),b.apply(this,c)}},z.compose=function(){var a=arguments;return function(){for(var b=arguments,c=a.length-1;c>=0;c--)b=[a[c].apply(this,b)];return b[0]}},z.after=function(a,b){return 0>=a?b():function(){return--a<1?b.apply(this,arguments):void 0}},z.keys=x||function(a){if(a!==Object(a))throw new TypeError("Invalid object");var b=[];for(var c in a)z.has(a,c)&&(b[b.length]=c);return b},z.values=function(a){var b=[];for(var c in a)z.has(a,c)&&b.push(a[c]);return b},z.pairs=function(a){var b=[];for(var c in a)z.has(a,c)&&b.push([c,a[c]]);return b},z.invert=function(a){var b={};for(var c in a)z.has(a,c)&&(b[a[c]]=c);return b},z.functions=z.methods=function(a){var b=[];for(var c in a)z.isFunction(a[c])&&b.push(c);return b.sort()},z.extend=function(a){return A(j.call(arguments,1),function(b){if(b)for(var c in b)a[c]=b[c]}),a},z.pick=function(a){var b={},c=k.apply(f,j.call(arguments,1));return A(c,function(c){c in a&&(b[c]=a[c])}),b},z.omit=function(a){var b={},c=k.apply(f,j.call(arguments,1));for(var d in a)z.contains(c,d)||(b[d]=a[d]);return b},z.defaults=function(a){return A(j.call(arguments,1),function(b){if(b)for(var c in b)null==a[c]&&(a[c]=b[c])}),a},z.clone=function(a){return z.isObject(a)?z.isArray(a)?a.slice():z.extend({},a):a},z.tap=function(a,b){return b(a),a};var G=function(a,b,c,d){if(a===b)return 0!==a||1/a==1/b;if(null==a||null==b)return a===b;a instanceof z&&(a=a._wrapped),b instanceof z&&(b=b._wrapped);var e=l.call(a);if(e!=l.call(b))return!1;switch(e){case"[object String]":return a==String(b);case"[object Number]":return a!=+a?b!=+b:0==a?1/a==1/b:a==+b;case"[object Date]":case"[object Boolean]":return+a==+b;case"[object RegExp]":return a.source==b.source&&a.global==b.global&&a.multiline==b.multiline&&a.ignoreCase==b.ignoreCase}if("object"!=typeof a||"object"!=typeof b)return!1;for(var f=c.length;f--;)if(c[f]==a)return d[f]==b;c.push(a),d.push(b);var g=0,h=!0;if("[object Array]"==e){if(g=a.length,h=g==b.length)for(;g--&&(h=G(a[g],b[g],c,d)););}else{var i=a.constructor,j=b.constructor;if(i!==j&&!(z.isFunction(i)&&i instanceof i&&z.isFunction(j)&&j instanceof j))return!1;for(var k in a)if(z.has(a,k)&&(g++,!(h=z.has(b,k)&&G(a[k],b[k],c,d))))break;if(h){for(k in b)if(z.has(b,k)&&!g--)break;h=!g}}return c.pop(),d.pop(),h};z.isEqual=function(a,b){return G(a,b,[],[])},z.isEmpty=function(a){if(null==a)return!0;if(z.isArray(a)||z.isString(a))return 0===a.length;for(var b in a)if(z.has(a,b))return!1;return!0},z.isElement=function(a){return!(!a||1!==a.nodeType)},z.isArray=w||function(a){return"[object Array]"==l.call(a)},z.isObject=function(a){return a===Object(a)},A(["Arguments","Function","String","Number","Date","RegExp"],function(a){z["is"+a]=function(b){return l.call(b)=="[object "+a+"]"}}),z.isArguments(arguments)||(z.isArguments=function(a){return!(!a||!z.has(a,"callee"))}),"function"!=typeof/./&&(z.isFunction=function(a){return"function"==typeof a}),z.isFinite=function(a){return isFinite(a)&&!isNaN(parseFloat(a))},z.isNaN=function(a){return z.isNumber(a)&&a!=+a},z.isBoolean=function(a){return a===!0||a===!1||"[object Boolean]"==l.call(a)},z.isNull=function(a){return null===a},z.isUndefined=function(a){return void 0===a},z.has=function(a,b){return m.call(a,b)},z.noConflict=function(){return a._=d,this},z.identity=function(a){return a},z.times=function(a,b,c){for(var d=Array(a),e=0;a>e;e++)d[e]=b.call(c,e);return d},z.random=function(a,b){return null==b&&(b=a,a=0),a+Math.floor(Math.random()*(b-a+1))};var H={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"}};H.unescape=z.invert(H.escape);var I={escape:new RegExp("["+z.keys(H.escape).join("")+"]","g"),unescape:new RegExp("("+z.keys(H.unescape).join("|")+")","g")};z.each(["escape","unescape"],function(a){z[a]=function(b){return null==b?"":(""+b).replace(I[a],function(b){return H[a][b]})}}),z.result=function(a,b){if(null==a)return null;var c=a[b];return z.isFunction(c)?c.call(a):c},z.mixin=function(a){A(z.functions(a),function(b){var c=z[b]=a[b];z.prototype[b]=function(){var a=[this._wrapped];return i.apply(a,arguments),N.call(this,c.apply(z,a))}})};var J=0;z.uniqueId=function(a){var b=++J+"";return a?a+b:b},z.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var K=/(.)^/,L={"'":"'","\\":"\\","\r":"r","\n":"n","	":"t","\u2028":"u2028","\u2029":"u2029"},M=/\\|'|\r|\n|\t|\u2028|\u2029/g;z.template=function(a,b,c){var d;c=z.defaults({},c,z.templateSettings);var e=new RegExp([(c.escape||K).source,(c.interpolate||K).source,(c.evaluate||K).source].join("|")+"|$","g"),f=0,g="__p+='";a.replace(e,function(b,c,d,e,h){return g+=a.slice(f,h).replace(M,function(a){return"\\"+L[a]}),c&&(g+="'+\n((__t=("+c+"))==null?'':_.escape(__t))+\n'"),d&&(g+="'+\n((__t=("+d+"))==null?'':__t)+\n'"),e&&(g+="';\n"+e+"\n__p+='"),f=h+b.length,b}),g+="';\n",c.variable||(g="with(obj||{}){\n"+g+"}\n"),g="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+g+"return __p;\n";try{d=new Function(c.variable||"obj","_",g)}catch(h){throw h.source=g,h}if(b)return d(b,z);var i=function(a){return d.call(this,a,z)};return i.source="function("+(c.variable||"obj")+"){\n"+g+"}",i},z.chain=function(a){return z(a).chain()};var N=function(a){return this._chain?z(a).chain():a};z.mixin(z),A(["pop","push","reverse","shift","sort","splice","unshift"],function(a){var b=f[a];z.prototype[a]=function(){var c=this._wrapped;return b.apply(c,arguments),"shift"!=a&&"splice"!=a||0!==c.length||delete c[0],N.call(this,c)}}),A(["concat","join","slice"],function(a){var b=f[a];z.prototype[a]=function(){return N.call(this,b.apply(this._wrapped,arguments))}}),z.extend(z.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}})}).call(this)},{}],18:[function(a,b){"use strict";var c=a("../constants/AppConstants"),d=a("../dispatcher/AppDispatcher"),e=c.ActionTypes,f={changeIsAnimating:function(a){d.handleViewAction({type:e.CHANGE_IS_ANIMATING,isAnimating:a})},changeFlipTreeY:function(a){d.handleViewAction({type:e.CHANGE_FLIP_TREE_Y,flipTreeY:a})}};b.exports=f},{"../constants/AppConstants":23,"../dispatcher/AppDispatcher":28}],19:[function(a,b){"use strict";var c=a("../constants/AppConstants"),d=a("../dispatcher/AppDispatcher"),e=c.ActionTypes,f={setLevelSolved:function(a){d.handleViewAction({type:e.SET_LEVEL_SOLVED,levelID:a})},resetLevelsSolved:function(){d.handleViewAction({type:e.RESET_LEVELS_SOLVED})}};b.exports=f},{"../constants/AppConstants":23,"../dispatcher/AppDispatcher":28}],20:[function(a,b){"use strict";var c=a("../constants/AppConstants"),d=a("../dispatcher/AppDispatcher"),e=c.ActionTypes,f={changeLocale:function(a){d.handleViewAction({type:e.CHANGE_LOCALE,locale:a})},changeLocaleFromURI:function(a){d.handleURIAction({type:e.CHANGE_LOCALE,locale:a})},changeLocaleFromHeader:function(a){d.handleViewAction({type:e.CHANGE_LOCALE_FROM_HEADER,header:a})}};b.exports=f},{"../constants/AppConstants":23,"../dispatcher/AppDispatcher":28}],21:[function(a,b,c){function d(){try{$.ajax({url:"http://ajaxhttpheaders.appspot.com",dataType:"jsonp",success:function(a){e(a["Accept-Language"])}})}catch(a){console.warn("locale detect fail",a)}}function e(a){p.changeLocaleFromHeader(a)}function f(){{var b=a("../views"),c=a("../models/collections"),d=a("../views/commandViews");new b.MainHelperBar,new b.BackgroundView}this.commandCollection=new c.CommandCollection,this.commandBuffer=new c.CommandBuffer({collection:this.commandCollection}),this.commandPromptView=new d.CommandPromptView({el:$("#commandLineBar")}),this.commandLineHistoryView=new d.CommandLineHistoryView({el:$("#commandLineHistory"),collection:this.commandCollection})}var g,h,i,j,k=a("underscore"),l=a("backbone"),m=a("../util"),n=a("../intl"),o=a("../stores/LocaleStore"),p=a("../actions/LocaleActions"),q=k.clone(l.Events),r=function(){var b=a("../sandbox/").Sandbox,c=a("../util/eventBaton").EventBaton,d=a("../views/levelDropdownView").LevelDropdownView;i=new c,g=new f,h=new b,j=new d({wait:!0}),o.subscribe(function(){o.getLocale()!==o.getDefaultLocale()&&t()}),q.on("vcsModeChange",s),u(i),v(h)},s=function(a){if(window.$){var b=a.mode,c=b.slice(0,1).toUpperCase()+b.slice(1),d="Git"===c?"Hg":"Git",e=new RegExp(d,"g");document.title=n.str("learn-git-branching").replace(e,c),$("span.vcs-mode-aware").each(function(a,b){var d=$(b).text().replace(e,c);$(b).text(d)})}},t=function(){window.$&&$("span.intl-aware").each(function(b,c){var d=a("../intl"),e=$(c).attr("data-intl");$(c).text(d.str(e).toUpperCase())})},u=function(a){var b=function(){$("#commandTextField").focus()};b(),$(window).focus(function(b){a.trigger("windowFocus",b)}),$(document).click(function(b){a.trigger("documentClick",b)}),$(document).bind("keydown",function(b){a.trigger("docKeydown",b)}),$(document).bind("keyup",function(b){a.trigger("docKeyup",b)}),$(window).on("resize",function(a){q.trigger("resize",a)}),a.stealBaton("docKeydown",function(){}),a.stealBaton("docKeyup",function(){}),a.stealBaton("windowFocus",b),a.stealBaton("documentClick",b);var c=function(b){return function(){var c=[b];k.each(arguments,function(a){c.push(a)}),a.trigger.apply(a,c)}};$("#commandTextField").on("keydown",c("keydown")),$("#commandTextField").on("keyup",c("keyup")),$(window).trigger("resize")},v=function(a){var b,c=m.parseQueryString(window.location.href);if((/(iPhone|iPod|iPad).*AppleWebKit/i.test(navigator.userAgent)||/android/i.test(navigator.userAgent))&&a.mainVis.customEvents.on("gitEngineReady",function(){i.trigger("commandSubmitted","mobile alert")}),c.hasOwnProperty("demo")?b=["git commit; git checkout -b bugFix C1; git commit; git merge master; git checkout master; git commit; git rebase bugFix;","delay 1000; reset;","level advanced1 --noFinishDialog --noStartCommand --noIntroDialog;","delay 2000; show goal; delay 1000; hide goal;","git checkout bugFix; git rebase master; git checkout side; git rebase bugFix;","git checkout another; git rebase side; git rebase another master;","help; levels"]:c.hasOwnProperty("hgdemo")?(b=['importTreeNow {"branches":{"master":{"target":"C3","id":"master"},"feature":{"target":"C2","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"}},"HEAD":{"target":"feature","id":"HEAD"}}',"delay 1000","git rebase master","delay 1000","undo","hg book","delay 1000","hg rebase -d master"],b=b.join(";#").split("#")):c.hasOwnProperty("hgdemo2")?(b=['importTreeNow {"branches":{"master":{"target":"C3","id":"master"},"feature":{"target":"C2","id":"feature"},"debug":{"target":"C4","id":"debug"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"}},"HEAD":{"target":"debug","id":"HEAD"}}',"delay 1000","git rebase master","delay 1000","undo","hg sum","delay 1000","hg rebase -d master"],b=b.join(";#").split("#")):c.hasOwnProperty("remoteDemo")?(b=["git clone","git commit","git fakeTeamwork","git pull","git push","git commit","git fakeTeamwork","git pull --rebase","git push","levels"],b=b.join(";#").split("#")):c.gist_level_id?$.ajax({url:"https://api.github.com/gists/"+c.gist_level_id,type:"GET",dataType:"jsonp",success:function(a){var b=a.data||{},c=b.files||{};if(!Object.keys(c).length)return console.warn("no files found"),void 0;var d=c[Object.keys(c)[0]];d.content||console.warn("file empty"),i.trigger("commandSubmitted","importLevelNow "+escape(d.content)+"; clear")}}):c.hasOwnProperty("NODEMO")||(b=["git help;","delay 1000;","help;","levels"]),b&&a.mainVis.customEvents.on("gitEngineReady",function(){i.trigger("commandSubmitted",b.join(""))}),void 0!==c.locale&&c.locale.length?p.changeLocaleFromURI(c.locale):d(),c.command){var e=unescape(c.command);a.mainVis.customEvents.on("gitEngineReady",function(){i.trigger("commandSubmitted",e)})}};a("../util").isBrowser()&&$(document).ready(r),c.getEvents=function(){return q},c.getSandbox=function(){return h},c.getEventBaton=function(){return i},c.getCommandUI=function(){return g},c.getLevelDropdown=function(){return j},c.init=r},{"../actions/LocaleActions":20,"../intl":36,"../models/collections":44,"../sandbox/":47,"../stores/LocaleStore":50,"../util":55,"../util/eventBaton":54,"../views":62,"../views/commandViews":60,"../views/levelDropdownView":63,backbone:1,underscore:17}],22:[function(a,b,c){function d(a,b,c){if(this.vcs=a,this.method=b,this.rawOptions=c,this.supportedMap=l.getOptionMap()[a][b],void 0===this.supportedMap)throw new Error("No option map for "+b);this.generalArgs=[]}var e=a("underscore"),f=a("../intl"),g=a("../util/errors"),h=a("../git/commands"),i=a("../mercurial/commands"),j=g.CommandProcessError,k=(g.CommandResult,{git:h.commandConfig,hg:i.commandConfig}),l={execute:function(a,b,c,d){if(!k[a][b])throw new Error("i dont have a command for "+b);var e=k[a][b];return e.delegate?this.delegateExecute(e,c,d):(e.execute.call(this,c,d),void 0)},delegateExecute:function(a,b,c){var d=a.delegate.call(this,b,c);d.multiDelegate?e.each(d.multiDelegate,function(a){c.setOptionsMap(a.options||{}),c.setGeneralArgs(a.args||[]),k[a.vcs][a.name].execute.call(this,b,c)},this):(a=k[d.vcs][d.name],k[d.vcs][d.name].execute.call(this,b,c))},blankMap:function(){return{git:{},hg:{}}},getShortcutMap:function(){var a=this.blankMap();return this.loop(function(b,c,d){b.sc&&(a[d][c]=b.sc)},this),a},getOptionMap:function(){var a=this.blankMap();return this.loop(function(b,c,d){var f=b.displayName||c,g={};e.each(b.options,function(a){g[a]=!1}),a[d][f]=g}),a},getRegexMap:function(){var a=this.blankMap();return this.loop(function(b,c,d){var e=b.displayName||c;a[d][e]=b.regex}),a},getCommandsThatCount:function(){var a=this.blankMap();return this.loop(function(b,c,d){b.dontCountForGolf||(a[d][c]=b.regex)}),a},loop:function(a){e.each(k,function(b,c){e.each(b,function(b,d){a(b,d,c)})})}},m=function(a){var b,c,f;if(e.each(l.getRegexMap(),function(d,g){e.each(d,function(d,e){d.exec(a)&&(b=g,c=e,f=a.split(" ").slice(2).join(" "))})}),!c)return!1;var g=new d(b,c,f),h=g.explodeAndSet();return{toSet:{generalArgs:g.generalArgs,supportedMap:g.supportedMap,error:h,vcs:b,method:c,options:f,eventName:"processGitCommand"}}};d.prototype.explodeAndSet=function(){for(var a=this.rawOptions.match(/('.*?'|".*?"|\S+)/g)||[],b=0;b<a.length;b++){var c=a[b];if("-"==c.slice(0,1)){if(void 0===this.supportedMap[c])return new j({msg:f.str("option-not-supported",{option:c})});var d=a[b+1],e=[];d&&"-"!==d.slice(0,1)&&(b++,e=[d]),this.supportedMap[c]=e}else this.generalArgs.push(c)}},c.commands=l,c.parse=m},{"../git/commands":29,"../intl":36,"../mercurial/commands":43,"../util/errors":53,underscore:17}],23:[function(a,b){"use strict";var c=a("react/lib/keyMirror"),d="change";b.exports={CHANGE_EVENT:d,StoreSubscribePrototype:{subscribe:function(a){this.on(d,a)},unsubscribe:function(a){this.removeListener(d,a)}},ActionTypes:c({SET_LEVEL_SOLVED:null,RESET_LEVELS_SOLVED:null,CHANGE_IS_ANIMATING:null,CHANGE_FLIP_TREE_Y:null,SUBMIT_COMMAND:null,CHANGE_LOCALE:null,CHANGE_LOCALE_FROM_HEADER:null}),PayloadSources:c({VIEW_ACTION:null,URI_ACTION:null})}},{"react/lib/keyMirror":16}],24:[function(a,b,c){c.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Are you sure you want to see the solution?","","I believe in you! You can do it"]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Bist du sicher, dass du die Auflösung sehen willst?","","Ich glaube an dich! Du schaffst das!"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 确定要看答案吗？","","哥相信你！你可以的"]}}],zh_TW:[{type:"ModalAlert",options:{markdowns:["## 確定偷看解答嗎？","","我相信你！你可以的"]}}],es_AR:[{type:"ModalAlert",options:{markdowns:["## ¿Estás seguro de que querés ver la solución?","","¡Creo en vos! ¡Dale que podés!"]}}],pt_BR:[{type:"ModalAlert",options:{markdowns:["## Tem certeza que quer ver a solução?","","Vamos lá, acredito que você consegue!"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Êtes-vous sûr de vouloir voir la solution ?","","Je crois en vous ! Vous pouvez le faire"]}}]}},{}],25:[function(a,b,c){c.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Welcome to the level builder!","","Here are the main steps:","","  * Set up the initial environment with git commands","  * Define the starting tree with ```define start```","  * Enter the series of git commands that compose the (optimal) solution","  * Define the goal tree with ```define goal```. Defining the goal also defines the solution","  * Optionally define a hint with ```define hint```","  * Edit the name with ```define name```","  * Optionally define a nice start dialog with ```edit dialog```","  * Enter the command ```finish``` to output your level JSON!"]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Willkommen zum Level-Editor!","","So funktioniert's:","","  * Stelle mit Git-Befehlen die Ausganssituation her","  * Leg den Startpunkt mit ```define start``` fest","  * Gib eine Abfolge von Git-Befehlen ein, welche die (optimale) Lösung darstellen","  * Leg den Ziel-Baum mit ```define goal``` fest. Damit markierst du den Endpunkt der Lösung","  * Gib einen Hinweis mittels ```define hint``` an, wenn du willst","  * Änder den Namen mittels ```define name```","  * Wenn du magst, erstelle einen schönene Einführungsdialog mit ```edit dialog```","  * Gib das Kommando ```finish``` ein um deinen Level als JSON auszugeben"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 欢迎使用关卡生成器！","","主要步骤如下：","","  * 使用 git 命令布置好初始环境","  * 使用 ```define start``` 命令定义起始树","  * 输入一系列 git 命令，编好答案","  * 使用 ```define goal``` 命令定义目标树。定义目标的同时定义答案","  * 还可以用 ```define hint``` 命令定义一个提示","  * 用 ```define name``` 修改名称","  * 还可以用 ```edit dialog``` 定义一个漂亮的开始对话框","  * 输入 ```finish``` 就可以输出你的关卡数据（JSON）了！"]}}],zh_TW:[{type:"ModalAlert",options:{markdowns:["## 歡迎使用關卡編輯器！","","主要步驟如下：","","  * 使用 git 指令建立初始環境","  * 使用 ```define start``` 指令定義起始樹","  * 輸入一系列 git 命令，編好答案","  * 使用 ```define goal``` 指令定義目標樹。定義目標的同時定義答案","  * 還可以用 ```define hint``` 指令定義一個提示","  * 用 ```define name``` 修改名稱","  * 還可以用 ```edit dialog``` 定義一個漂亮的開始對話視窗","  * 輸入 ```finish``` 即可將您的關卡輸出為 JSON！"]}}],es_AR:[{type:"ModalAlert",options:{markdowns:["## ¡Bienvenido al constructor de niveles!","","Estos son los pasos principales:","","  * Prepará el entorno inicial usando comandos de Git","  * Definí el árbol inicial con ```define start```","  * Ingresá la serie de comandos de git que representan la solución óptima","  * Definí el árbol objetivo con ```define goal```. El objetivo también determina la solución","  * Opcionalmente, definí pistas con ```define hint```","  * Dale un nombre con ```define name```","  * Opcionalmente, definí un mensaje inicial con ```edit dialog```","  * ¡Ingresá el comando ```finish``` para obtener tu nivel en formato JSON!"]}}],pt_BR:[{type:"ModalAlert",options:{markdowns:["## Bem-vindo ao construtor de níveis!","","Estes são os passos principais:","","  * Prepare o ambiente inicial usando comandos do Git","  * Define a árvore inicial com ```define start```","  * Insira a série de comandos do git que representam a solução ótima","  * Defina a árvore objetivo com ```define goal```. O objetivo também determina a solução","  * Opcionalmente, defina dicas com ```define hint```","  * Dê um nome com ```define name```","  * Opcionalmente, defina uma mensagem inicial com ```edit dialog```","  * Digite o comando ```finish``` para obter seu nível em formato JSON!"]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Bienvenue dans l'éditeur niveaux !","","Voici les étapes principales :","","  * Mettez en place l'environnement initial avec des commandes git","  * Définissez l'arbre de départ avec ```define start```","  * Saisissez la série de commandes git qui composent la solution (optimale)","  * Définissez l'arbre cible avec ```define goal```. Cela définit aussi la solution","  * Optionnellement, définissez un indice avec ```define hint```","  * Changez le nom avec ```define name```","  * Optionellement, definissez un joli dialogue de départ avec ```edit dialog```","  * Entrez la commande ```finish``` pour délivrer votre niveau JSON!"]}}]}},{}],26:[function(a,b,c){c.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Great Job!!","","You solved the level in *{numCommands}* command(s); ","our solution uses {best}."]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Super gemacht","","Du hast den Level in *{numCommands}* Befehl(en) gelöst;","meine Lösung besteht aus {best}."]}}],ja:[{type:"ModalAlert",options:{markdowns:["## 完成!","","あなたは*{numCommands}*回のコマンドでこの課題をクリアしました; ","模範解答では{best}回です。"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 碉堡了！","","你用 *{numCommands}* 条命令搞定了这一关；我们的答案要用 {best}。"]}}],zh_TW:[{type:"ModalAlert",options:{markdowns:["## 太棒了！","","您用了 *{numCommands}* 個指令完成這一關，","我們的解答用了 {best} 個。"]}}],es_AR:[{type:"ModalAlert",options:{markdowns:["## ¡Buen trabajo!","","Resolviste el nivel en *{numCommands}* comandos; ","nuestra mejor solución usa {best}."]}}],pt_BR:[{type:"ModalAlert",options:{markdowns:["## Bom trabalho!!","","Você resolveu o nível usando *{numCommands}* comandos; ","nossa melhor solução usa {best}."]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Beau Travail!!","","Vous avez résolu le niveau en *{numCommands}* commande(s); ","notre solution le fait en {best}."]}}]}},{}],27:[function(a,b,c){c.dialog={en_US:[{type:"ModalAlert",options:{markdowns:["## Welcome to LearnGitBranching!","","This application is designed to help beginners grasp ","the powerful concepts behind branching when working ","with git. We hope you enjoy this application and maybe ","even learn something!","","# Demo!","","If you have not seen the demo, please check it out here:","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Annoyed at this dialog? Append `?NODEMO` to the url to get rid of it, linked below for convenience:","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git commands","","You have a large variety of git commands available in sandbox mode. These include",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Sharing is caring!","","Share trees with your friends via `export tree` and `import tree`","","Have a great lesson to share? Try building a level with `build level` or try out a friend's level with `import level`","","To see the full range of commands, try `show commands`. There are some gems like `undo` and `reset`","","For now let's get you started on the `levels`..."]}}],es_AR:[{type:"ModalAlert",options:{markdowns:["## ¡Bienvenid@ a LearnGitBranching!","","Esta aplicación está diseñada para ayudar a los principantes ","a manejar los poderosos conceptos que hay detrás del trabajo ","con ramas (branches) en Git. Esperamos que disfrutes la aplicación ","y tal vez incluso ¡que aprendas algo! ","","# ¡Demo!","","Si no viste la demo, mirala en esta dirección:","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","¿Harto de este mensaje? Agregale `?NODEMO` a la URL para dejar de verlo, como en este link:","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Comandos de Git","","Tenés una gran variedad de comandos de git en este sandbox. Estos incluyen: ",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## ¡Compartí!","","Compartí tus árboles con tus amigos usando `export tree` e `import tree`","","¿Tenés una buena lección que compartir? Probá construyendo un nivel con `build level` o probá el nivel de un amigo con `import level`","","Para ver todos los comandos disponibles, probá `show commands`. Hay algunas joyitas como `undo` y `reset`","","Por ahora, arranquemos con los `levels`..."]}}],pt_BR:[{type:"ModalAlert",options:{markdowns:["## Bem-vindo ao LearnGitBranching!","","Este aplicativo foi desenvolvido para ajudar os iniciantes a ","aprender os poderosos conceitos por trás do branching com ","o git. Esperamos que você goste deste aplicativo e talvez ","até aprenda alguma coisa!","","# Demo!","","Se você ainda não viu o demo, veja aqui:","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Farto desta mensagem? Acrescente `?NODEMO` ao endereço para se livrar dela, como no link abaixo:","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Comandos do git","","Você tem à sua disposição no sandbox uma variedade de comandos do git:",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Compartilhar é se importar!","","Compartilhe árvores com seus amigos usando `export tree` e `import tree`","","Tem uma grande lição para compartilhar? Tente construir um nível com `build level` ou experimente o nível de um amigo com `import level`","","Para ver todos os comandos, use `show commands`. Há algumas jóias como `undo` e `reset`","","Por hora, vamos começar com o `levels`..."]}}],de_DE:[{type:"ModalAlert",options:{markdowns:["## Willkommen bei LearnGitBranching!","","Der Sinn dieser Anwendung ist, die umfangreichen und komplexen Zusammenhänge der Prozesse, die bei der Arbeit mit Git ablaufen, zu verdeutlichen. Ich hoffe du hast Spaß dabei und lernst vielleicht sogar etwas!","","# Demo!","","Falls du die Demonstration noch nicht gesehen hast, schau sie dir hier an:","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Genervt von diesem Fenster? Häng `?NODEMO` an die URL um es los zu werden, so wie hier:","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git-Kommandos","","Dir steht eine große Zahl von Git-Befehlen im Sandkasten-Modus zur Verfügung. Unter anderem",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Teilen macht Spaß!","","Teile diese Git-Bäume mit deinen Freunden mittels `export tree` und `import tree`.","","Hast du Wissenswertes zu Git zu vermitteln? Versuch einen Level mit `build level` zu bauen oder probier den Level eines Freundes mit `import level` aus.","","Um alle Kommandos zu sehen, gib `show commands` ein. Darunter gibt's kleine Schätze wie `undo` und `reset`.","","Für's Erste lass uns mit `levels` anfangen ..."]}}],ja:[{type:"ModalAlert",options:{markdowns:["## LearnGitBranchingへようこそ","","gitのパワフルなブランチ機能のコンセプトが ","学びやすくなるようにこのアプリケーションを作りました。 ","このアプリケーションを楽しんで使って頂いて、 ","何かを学習して頂けたなら嬉しいです。","","# とりあえず触ってみたい方へ：","","簡単なデモを用意してあるので、もしよければこちらもご覧ください：","","[http://remore.github.io/learnGitBranching-ja/?demo](http://remore.github.io/learnGitBranching-ja/?demo)","","このダイアログ自体を省略するには、以下のようにURLの末尾にクエリストリング`?NODEMO`を付加してアクセスしてください。","","[http://remore.github.io/learnGitBranching-ja/?NODEMO](http://remore.github.io/learnGitBranching-ja/?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## ここで学べるGitのオペレーション","","ここでは、下記の種類のgitコマンドを学ぶことができます。",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 学習した内容を共有できます","","画面左のコマンドプロンプトから`export tree`や`import tree`とタイプすることで、gitのツリー構造を友達に送ることができます","","何か教材になるようなケースはご存知ないでしょうか。`build level`で課題を作成したり、`import level`で他の人の課題に挑戦してみてください。","","それでは教材の選択画面に進んでみることにします。"]}}],zh_CN:[{type:"ModalAlert",options:{markdowns:["## 欢迎光临 LearnGitBranching!","","本应用旨在帮助初学者领会 git 分支背后的强大概念。","希望你能喜欢这个应用，并学到知识！","","# 演示!","","如果你还没看过演示，请到此查看：","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","厌烦这个对话框？ 在 URL 后头加上 `?NODEMO` 就看不到它了，也可以直接点下边这个链接：","","[http://pcottle.github.io/learnGitBranching/?NODEMO](http://pcottle.github.io/learnGitBranching/?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git 命令","","在沙盒模式里，你有好多命令可用。 包括：",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 分享即关怀","","使用 `export tree` 和 `import tree` 与朋友分享 Git 树","","有个好课程可以分享？试试用 `build level` 创建一个关卡，或者 `import level` 试试朋友的。","","言归正传，让我们先从 `levels` 开始……"]}}],zh_TW:[{type:"ModalAlert",options:{markdowns:["## 歡迎光臨 LearnGitBranching!","","本應用旨在幫助初學者領會 git 分支背後的強大概念。","希望你能喜歡這個應用，並學到知識！","","# 演示！","","如果你還沒看過演示，請到此查看：","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","厭煩這個對話視窗嗎？在 URL 後頭加上 `?NODEMO` 就看不到它了，也可以直接點下邊這個連結：","","[http://pcottle.github.io/learnGitBranching/?NODEMO](http://pcottle.github.io/learnGitBranching/?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Git 命令","","在沙盒模式中，你有很多指令可用。包括：",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 分享即關懷","","使用 `export tree` 和 `import tree` 與朋友分享 Git 樹","","有個好課程可以分享？試試用 `build level` 創建一個關卡，或者 `import level` 試試朋友的。","","言歸正傳，讓我們先從 `levels` 開始……"]}}],ko:[{type:"ModalAlert",options:{markdowns:["## Git 브랜치 배우기를 시작합니다!","","이 애플리케이션은 git을 쓸 때 필요한 브랜치에 대한 개념을","탄탄히 잡게끔 도와드리기 위해 만들었습니다. 재밌게 사용해주시기를","바라며, 무언가를 배워가신다면 더 기쁘겠습니다!","","이 애플리케이션은 [Peter Cottle](https://github.io/pcottle)님의 [LearnGitBranching](http://pcottle.github.io/learnGitBranching/)를 번역한 것입니다.","아래 데모를 먼저 보셔도 좋습니다.","","<http://pcottle.github.io/learnGitBranching/?demo&locale=ko>"]}},{type:"ModalAlert",options:{markdowns:["## Git 명령어","","연습 모드에서 쓸 수 있는 다양한 git명령어는 다음과 같습니다",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## 공유해주세요!","","`export tree` 와 `import tree`로 여러분의 친구들에게 트리를 공유해주세요","","훌륭한 학습 자료가 있으신가요? `build level`로 레벨을 만들어 보시거나, 친구의 레벨을 `import level`로 가져와서 실험해보세요","","이제 레슨을 시작해봅시다..."]}}],fr_FR:[{type:"ModalAlert",options:{markdowns:["## Bienvenue sur LearnGitBranching!","","Cette application a été conçue pour aider les débutants à saisir ","les puissants concepts derrière les branches en travaillant ","avec git. Nous espérons que vous apprécierez cette application et ","que vous apprendrez peut-être quelque chose d'intéressant !","","# Démo !","","Si vous n'avez pas vu la démo, vous pouvez le faire là :","","[http://pcottle.github.io/learnGitBranching/?demo](http://pcottle.github.io/learnGitBranching/?demo)","","Agacé par ce dialogue ? Ajoutez `?NODEMO` à l'URL pour le supprimer, en lien ci-dessous pour votre commodité :","","[http://pcottle.github.io/learnGitBranching/?NODEMO](?NODEMO)"]}},{type:"ModalAlert",options:{markdowns:["## Commandes Git","","Il existe une large variété de commandes git disponibles dans le mode bac à sable. Sont inclues",""," * commit"," * branch"," * checkout"," * cherry-pick"," * reset"," * revert"," * rebase"," * merge"]}},{type:"ModalAlert",options:{markdowns:["## Partager, c'est se soucier!","","Partagez des arbres avec vous amis via `export tree` et `import tree`","","Vous avez une grande leçon à partager ? Essayez de construire un niveau avec `build level` ou essayez le niveau d'un ami avec `import level`","","Pour voir la gamme complète des commandes, tapez `show commands`. Il y a quelques perles telles que `undo` et `reset`","","Mais tout de suite commencez sur les `levels`…"]}}]}
},{}],28:[function(a,b){"use strict";var c=a("../constants/AppConstants"),d=a("flux").Dispatcher,e=c.PayloadSources,f=new d;f.handleViewAction=function(a){this.dispatch({source:e.VIEW_ACTION,action:a})},f.handleURIAction=function(a){this.dispatch({source:e.URI_ACTION,action:a})},b.exports=f},{"../constants/AppConstants":23,flux:8}],29:[function(a,b,c){function d(a){return-1!==a.indexOf(":")&&2===a.split(":").length}var e=a("underscore"),f=a("../intl"),g=a("../graph"),h=a("../util/errors"),i=(h.CommandProcessError,h.GitError),j=(h.Warning,h.CommandResult),k="o/",l=function(a){return a.replace(/&#x27;/g,"'").replace(/&#x2F;/g,"/")},m=function(a,b){a.resolveID(b)},n=function(a,b){return a.validateBranchName(b)},o=function(a,b){return a.refs[b]?b:n(a,b)},p=function(a,b){if(a.refs[b]&&a.HEAD.get("target")===a.refs[b])throw new i({msg:f.todo("cannot fetch to "+b+" when checked out on "+b)})},q=function(a,b){m(a,b);var c=a.resolveID(b);if(!c||"branch"!==c.get("type"))throw new i({msg:f.todo(b+" is not a branch")})},r=function(a,b){m(a,b);var c=a.resolveID(b);if("branch"!==c.get("type")||!c.getIsRemote())throw new i({msg:f.todo(b+" is not a remote branch")})},s=function(a){if(a.length&&"origin"!==a[0])throw new i({msg:f.todo(a[0]+" is not a remote in your repository! try adding origin that argument")})},t=function(a,b){if(b=l(b),!a.resolveID(b))throw new i({msg:f.todo(b+" is not a branch!")});var c=a.resolveID(b);if("branch"!==c.get("type"))throw new i({msg:f.todo(b+" is not a branch!")});var d=c.getRemoteTrackingBranchID();if(!d)throw new i({msg:f.todo(b+" is not a remote tracking branch! I dont know where to push")});return d},u={commit:{sc:/^(gc|git ci)($|\s)/,regex:/^git +commit($|\s)/,options:["--amend","-a","-am","-m"],execute:function(a,b){var c=b.getOptionsMap();if(b.acceptNoGeneralArgs(),c["-am"]&&(c["-a"]||c["-m"]))throw new i({msg:f.str("git-error-options")});var d=null,e=null;c["-a"]&&b.addWarning(f.str("git-warning-add")),c["-am"]&&(e=c["-am"],b.validateArgBounds(e,1,1,"-am"),d=e[0]),c["-m"]&&(e=c["-m"],b.validateArgBounds(e,1,1,"-m"),d=e[0]);var g=a.commit({isAmend:c["--amend"]});d&&(d=d.replace(/&quot;/g,'"').replace(/^"/g,"").replace(/"$/g,""),g.set("commitMessage",d));var h=a.animationFactory.playCommitBirthPromiseAnimation(g,a.gitVisuals);a.animationQueue.thenFinish(h)}},cherrypick:{displayName:"cherry-pick",regex:/^git +cherry-pick($|\s)/,execute:function(a,b){var c=(b.getOptionsMap(),b.getGeneralArgs());b.validateArgBounds(c,1,Number.MAX_VALUE);var d=g.getUpstreamSet(a,"HEAD"),h=e.map(c,function(b){var c=a.getCommitFromRef(b);if(d[c.get("id")])throw new i({msg:f.str("git-error-already-exists",{commit:c.get("id")})});return c},this);a.setupCherrypickChain(h)}},pull:{regex:/^git +pull($|\s)/,options:["--rebase"],execute:function(a,b){if(!a.hasOrigin())throw new i({msg:f.str("git-error-origin-required")});var c=b.getOptionsMap(),e=b.getGeneralArgs();b.twoArgsForOrigin(e),s(e);var g,h,j=e[1];if(j&&d(j)){var m=j.split(":");g=m[0],h=o(a,l(m[1])),p(a,h)}else if(j)g=j,q(a.origin,g),h=a.origin.refs[g].getPrefixedID();else{if(a.getDetachedHead())throw new i({msg:f.todo("Git pull can not be executed in detached HEAD mode if no remote branch specified!")});var n=a.getOneBeforeCommit("HEAD"),r=n.get("id");t(a,r),h=n.getRemoteTrackingBranchID(),g=h.replace(k,"")}a.pull({source:g,destination:h,isRebase:c["--rebase"]})}},fakeTeamwork:{regex:/^git +fakeTeamwork($|\s)/,execute:function(a,b){var c=b.getGeneralArgs();if(!a.hasOrigin())throw new i({msg:f.str("git-error-origin-required")});b.validateArgBounds(c,0,2);var d=a.origin.refs[c[0]]?c[0]:"master",e=parseInt(c[0],10)||c[1]||1,g=a.origin.resolveID(d);if("branch"!==g.get("type"))throw new i({msg:f.str("git-error-options")});a.fakeTeamwork(e,d)}},clone:{regex:/^git +clone *?$/,execute:function(a,b){b.acceptNoGeneralArgs(),a.makeOrigin(a.printTree())}},remote:{regex:/^git +remote($|\s)/,options:["-v"],execute:function(a,b){if(b.acceptNoGeneralArgs(),!a.hasOrigin())throw new j({msg:""});a.printRemotes({verbose:!!b.getOptionsMap()["-v"]})}},fetch:{regex:/^git +fetch($|\s)/,execute:function(a,b){if(!a.hasOrigin())throw new i({msg:f.str("git-error-origin-required")});var c,e,g=b.getGeneralArgs();b.twoArgsForOrigin(g),s(g);var h=g[1];if(h&&d(h)){var j=h.split(":");c=j[0],e=o(a,l(j[1])),p(a,e)}else h&&(c=h,q(a.origin,c),e=a.origin.refs[c].getPrefixedID());c&&m(a.origin,c),a.fetch({source:c,destination:e})}},branch:{sc:/^(gb|git br)($|\s)/,regex:/^git +branch($|\s)/,options:["-d","-D","-f","-a","-r","-u","--contains"],execute:function(a,b){var c=b.getOptionsMap(),d=b.getGeneralArgs(),f=null;if(c["-d"]||c["-D"]){var g=c["-d"]||c["-D"];return g=g.concat(d),b.validateArgBounds(g,1,Number.MAX_VALUE,"-d"),e.each(g,function(b){a.validateAndDeleteBranch(b)}),void 0}if(c["-u"]){f=c["-u"].concat(d),b.validateArgBounds(f,1,2,"-u");var h=l(f[0]),i=f[1]||a.getOneBeforeCommit("HEAD").get("id");return r(a,h),q(a,i),a.setLocalToTrackRemote(a.refs[i],a.refs[h]),void 0}if(c["--contains"])return f=c["--contains"],b.validateArgBounds(f,1,1,"--contains"),a.printBranchesWithout(f[0]),void 0;if(c["-f"])return f=c["-f"].concat(d),b.twoArgsImpliedHead(f,"-f"),a.forceBranch(f[0],f[1]),void 0;if(0===d.length){var j;return j=c["-a"]?a.getBranches():c["-r"]?a.getRemoteBranches():a.getLocalBranches(),a.printBranches(j),void 0}b.twoArgsImpliedHead(d),a.branch(d[0],d[1])}},add:{dontCountForGolf:!0,sc:/^ga($|\s)/,regex:/^git +add($|\s)/,execute:function(){throw new j({msg:f.str("git-error-staging")})}},reset:{regex:/^git +reset($|\s)/,options:["--hard","--soft"],execute:function(a,b){var c=b.getOptionsMap(),d=b.getGeneralArgs();if(c["--soft"])throw new i({msg:f.str("git-error-staging")});if(c["--hard"]&&(b.addWarning(f.str("git-warning-hard")),d=d.concat(c["--hard"])),b.validateArgBounds(d,1,1),a.getDetachedHead())throw new i({msg:f.str("git-error-reset-detached")});a.reset(d[0])}},revert:{regex:/^git +revert($|\s)/,execute:function(a,b){var c=b.getGeneralArgs();b.validateArgBounds(c,1,Number.MAX_VALUE),a.revert(c)}},merge:{regex:/^git +merge($|\s)/,options:["--no-ff"],execute:function(a,b){var c=b.getOptionsMap(),d=b.getGeneralArgs();b.validateArgBounds(d,1,1);var e=a.merge(d[0],{noFF:!!c["--no-ff"]});return void 0===e?(a.animationFactory.refreshTree(a.animationQueue,a.gitVisuals),void 0):(a.animationFactory.genCommitBirthAnimation(a.animationQueue,e,a.gitVisuals),void 0)}},log:{dontCountForGolf:!0,regex:/^git +log($|\s)/,execute:function(a,b){var c=b.getGeneralArgs();if(2==c.length){if("^"!=c[1][0])throw new i({msg:f.str("git-error-options")});a.logWithout(c[0],c[1])}b.oneArgImpliedHead(c),a.log(c[0])}},show:{dontCountForGolf:!0,regex:/^git +show($|\s)/,execute:function(a,b){var c=b.getGeneralArgs();b.oneArgImpliedHead(c),a.show(c[0])}},rebase:{sc:/^gr($|\s)/,options:["-i","--solution-ordering","--interactive-test","--aboveAll","-p","--preserve-merges"],regex:/^git +rebase($|\s)/,execute:function(a,b){var c=b.getOptionsMap(),d=b.getGeneralArgs();if(c["-i"]){var e=c["-i"].concat(d);return b.twoArgsImpliedHead(e," -i"),c["--interactive-test"]?a.rebaseInteractiveTest(e[0],e[1],{interactiveTest:c["--interactive-test"]}):a.rebaseInteractive(e[0],e[1],{aboveAll:!!c["--aboveAll"],initialCommitOrdering:c["--solution-ordering"]}),void 0}b.twoArgsImpliedHead(d),a.rebase(d[0],d[1],{preserveMerges:c["-p"]||c["--preserve-merges"]})}},status:{dontCountForGolf:!0,sc:/^(gst|gs|git st)($|\s)/,regex:/^git +status($|\s)/,execute:function(a){a.status()}},checkout:{sc:/^(go|git co)($|\s)/,regex:/^git +checkout($|\s)/,options:["-b","-B","-"],execute:function(a,b){var c=b.getOptionsMap(),d=b.getGeneralArgs(),e=null;if(c["-b"]){e=c["-b"].concat(d),b.twoArgsImpliedHead(e,"-b");var g=a.validateBranchName(e[0]);return a.branch(g,e[1]),a.checkout(g),void 0}if(c["-"]){var h=a.HEAD.get("lastLastTarget");if(!h)throw new i({msg:f.str("git-result-nothing")});return a.HEAD.set("target",h),void 0}return c["-B"]?(e=c["-B"].concat(d),b.twoArgsImpliedHead(e,"-B"),a.forceBranch(e[0],e[1]),a.checkout(e[0]),void 0):(b.validateArgBounds(d,1,1),a.checkout(a.crappyUnescape(d[0])),void 0)}},push:{regex:/^git +push($|\s)/,options:["--force"],execute:function(a,b){if(!a.hasOrigin())throw new i({msg:f.str("git-error-origin-required")});var c,e,g,h={},j=b.getOptionsMap(),k=b.getGeneralArgs();b.twoArgsForOrigin(k),s(k);var l=k[1];if(l&&d(l)){var o=l.split(":");if(e=o[0],c=n(a,o[1]),""===e&&!a.origin.refs[c])throw new i({msg:f.todo("cannot delete branch "+h.destination+" which doesnt exist")})}else if(l?(m(a,l),g=a.resolveID(l)):g=a.getOneBeforeCommit("HEAD"),e=g.get("id"),g.getRemoteTrackingBranchID&&g.getRemoteTrackingBranchID()){t(a,e);var p=g.getRemoteTrackingBranchID();c=a.refs[p].getBaseID()}else c=n(a,e);e&&m(a,e),a.push({destination:c,source:e,force:!!j["--force"]})}},describe:{regex:/^git +describe($|\s)/,execute:function(a,b){if(0===a.tagCollection.toArray().length)throw new i({msg:f.todo("fatal: No tags found, cannot describe anything.")});var c=b.getGeneralArgs();b.oneArgImpliedHead(c),m(a,c[0]),a.describe(c[0])}},tag:{regex:/^git +tag($|\s)/,execute:function(a,b){var c=b.getGeneralArgs();if(0===c.length){var d=a.getTags();return a.printTags(d),void 0}b.twoArgsImpliedHead(c),a.tag(c[0],c[1])}}},v=[[/^(git help($|\s)|git$)/,function(){var b=[f.str("git-version"),"<br/>",f.str("git-usage"),e.escape(f.str("git-usage-command")),"<br/>",f.str("git-supported-commands"),"<br/>"],c=a("../commands").commands.getOptionMap().git;e.each(c,function(a,c){b.push("git "+c),e.each(a,function(a,c){b.push("	 "+c)},this)},this);var d=b.join("\n");throw d=d.replace(/\t/g,"&nbsp;&nbsp;&nbsp;"),new j({msg:d})}]];c.commandConfig=u,c.instantCommands=v},{"../commands":22,"../graph":33,"../intl":36,"../util/errors":53,underscore:17}],30:[function(a,b,c){function d(a){a=a||{},this.beforeCB=a.beforeCB||function(){},this.afterCB=a.afterCB||function(){};var b=function(a){a.resolve()};this.beforeDeferHandler=a.beforeDeferHandler||b,this.afterDeferHandler=a.afterDeferHandler||b,this.eventBaton=a.eventBaton||g.getEventBaton()}{var e=a("underscore"),f=a("q"),g=a("../app");a("../views/multiView").MultiView}d.prototype.insertShim=function(){this.eventBaton.stealBaton("processGitCommand",this.processGitCommand,this)},d.prototype.removeShim=function(){this.eventBaton.releaseBaton("processGitCommand",this.processGitCommand,this)},d.prototype.processGitCommand=function(a,b){this.beforeCB(a);var c=f.defer();c.promise.then(e.bind(function(){this.afterGitCommandProcessed(a,b)},this)).done();var d=e.bind(function(){this.eventBaton.passBatonBack("processGitCommand",this.processGitCommand,this,[a,c])},this),g=f.defer();g.promise.then(d).done(),this.beforeDeferHandler(g,a)},d.prototype.afterGitCommandProcessed=function(a,b){this.afterCB(a);var c=f.defer();c.promise.then(function(){b.resolve()}).done(),this.afterDeferHandler(c,a)},c.GitShim=d},{"../app":21,"../views/multiView":64,q:14,underscore:17}],31:[function(a,b,c){function d(){var a={},b=function(){var a=g.defer();return a.resolve(),a.promise};for(var c in i)a[c]=b;return a.playRefreshAnimationAndFinish=function(a,b){b.finish()},a.refreshTree=function(a){a.finish()},a.highlightEachWithPromise=function(a){return a},a}function e(){return{makeOrigin:function(a){var b=(a.localRepo,a.treeString),c=new s;return c.gitEngine.loadTreeFromString(b),{customEvents:{on:function(a,b,c){b.apply(c,[])}},gitEngine:c.gitEngine}}}}var f=a("underscore"),g=(a("backbone"),a("q")),h=a("../git").GitEngine,i=a("../visuals/animation/animationFactory").AnimationFactory,j=a("../visuals").GitVisuals,k=(a("../graph/treeCompare"),a("../util/eventBaton").EventBaton),l=a("../models/collections"),m=l.CommitCollection,n=l.BranchCollection,o=l.TagCollection,p=a("../models/commandModel").Command,q=a("../util/mock").mock,r=a("../util"),s=function(){this.init()};s.prototype.init=function(){this.commitCollection=new m,this.branchCollection=new n,this.tagCollection=new o;var a=d(),b=q(j),c=e();b.getVisualization=function(){return c},this.gitEngine=new h({collection:this.commitCollection,branches:this.branchCollection,tags:this.tagCollection,gitVisuals:b,animationFactory:a,eventBaton:new k}),this.gitEngine.init()};var t=function(a,b){var c=g.defer(),d=new s;d.sendCommand(a,c),c.promise.then(function(){b.resolve(d.gitEngine.exportTree())})};s.prototype.sendCommand=function(a,b){{var c=g.defer(),d=c.promise;(new Date).getTime()}r.splitTextCommand(a,function(a){d=d.then(f.bind(function(){var b=new p({rawStr:a}),c=g.defer();return this.gitEngine.dispatch(b,c),c.promise},this))},this),d.then(function(){(new Date).getTime();b&&b.resolve()}),d.fail(function(a){console.log("!!!!!!!! error !!!!!!!"),console.log(a),console.log(a.stack),console.log("!!!!!!!!!!!!!!!!!!!!!!")}),c.resolve()},c.HeadlessGit=s,c.getTreeQuick=t},{"../git":32,"../graph/treeCompare":34,"../models/collections":44,"../models/commandModel":45,"../util":55,"../util/eventBaton":54,"../util/mock":57,"../visuals":68,"../visuals/animation/animationFactory":66,backbone:1,q:14,underscore:17}],32:[function(a,b,c){function d(a){if(a!==u)throw a}function e(a){this.rootCommit=null,this.refs={},this.HEAD=null,this.origin=null,this.mode="git",this.localRepo=null,this.branchCollection=a.branches,this.tagCollection=a.tags,this.commitCollection=a.collection,this.gitVisuals=a.gitVisuals,this.eventBaton=a.eventBaton,this.eventBaton.stealBaton("processGitCommand",this.dispatch,this),this.animationFactory=a.animationFactory?a.animationFactory:j,this.initUniqueID()}var f=a("underscore"),g=g=a("../util").isBrowser()?window.Backbone:a("backbone"),h=a("q"),i=a("../intl"),j=a("../visuals/animation/animationFactory").AnimationFactory,k=a("../visuals/animation").AnimationQueue,l=a("../graph/treeCompare"),m=a("../graph"),n=a("../util/errors"),o=a("../app"),p=a("../commands"),q=n.GitError,r=n.CommandResult,s=(a("../util/eventBaton").EventBaton,"o/"),t="&nbsp;&nbsp;&nbsp;",u="STAPH";e.prototype.initUniqueID=function(){this.uniqueId=function(){var a=0;return function(b){return b?b+a++:a++}}()},e.prototype.handleModeChange=function(a,b){if(this.mode===a)return b(),void 0;o.getEvents().trigger("vcsModeChange",{mode:a});var c=this.setMode(a);return this.origin&&this.origin.setMode(a,function(){}),c?(c.then(b),void 0):(b(),void 0)},e.prototype.getIsHg=function(){return"hg"===this.mode},e.prototype.setMode=function(a){var b="git"===this.mode&&"hg"===a;if(this.mode=a,b){var c=h.defer();c.resolve();var d=c.promise,e=this.updateAllBranchesForHg();if(e)return d=d.then(f.bind(function(){return this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},this)),d=d.then(f.bind(function(){var a=this.pruneTree();if(a)return this.animationFactory.playRefreshAnimation(this.gitVisuals)},this));var g=this.pruneTree();if(g)return this.animationFactory.playRefreshAnimation(this.gitVisuals)}},e.prototype.assignLocalRepo=function(a){this.localRepo=a},e.prototype.defaultInit=function(){var a=m.getDefaultTree();this.loadTree(a)},e.prototype.init=function(){this.rootCommit=this.makeCommit(null,null,{rootCommit:!0}),this.commitCollection.add(this.rootCommit);var a=this.makeBranch("master",this.rootCommit);this.HEAD=new v({id:"HEAD",target:a}),this.refs[this.HEAD.get("id")]=this.HEAD,this.commit()},e.prototype.hasOrigin=function(){return!!this.origin},e.prototype.isOrigin=function(){return!!this.localRepo},e.prototype.exportTreeForBranch=function(a){var b=this.exportTree(),c=m.getUpstreamSet(this,a),d=b.commits;b.commits={},f.each(d,function(a,d){c[d]&&(b.commits[d]=a)});var e=b.branches;return b.branches={},f.each(e,function(c,d){d===a&&(b.branches[d]=c)}),b.HEAD.target=a,b},e.prototype.exportTree=function(){var a={branches:{},commits:{},tags:{},HEAD:null};f.each(this.branchCollection.toJSON(),function(b){b.target=b.target.get("id"),delete b.visBranch,a.branches[b.id]=b}),f.each(this.commitCollection.toJSON(),function(b){f.each(x.prototype.constants.circularFields,function(a){delete b[a]},this);var c=[];f.each(b.parents,function(a){c.push(a.get("id"))}),b.parents=c,a.commits[b.id]=b},this),f.each(this.tagCollection.toJSON(),function(b){delete b.visTag,b.target=b.target.get("id"),a.tags[b.id]=b},this);var b=this.HEAD.toJSON();return b.lastTarget=b.lastLastTarget=b.visBranch=b.visTag=void 0,b.target=b.target.get("id"),a.HEAD=b,this.hasOrigin()&&(a.originTree=this.origin.exportTree()),a},e.prototype.printTree=function(a){a=a||this.exportTree(),l.reduceTreeFields([a]);var b=JSON.stringify(a);return/'/.test(b)&&(b=escape(b)),b},e.prototype.printAndCopyTree=function(){window.prompt(i.str("Copy the tree string below"),this.printTree())},e.prototype.loadTree=function(a){a=JSON.parse(JSON.stringify(a)),this.removeAll(),this.instantiateFromTree(a),this.reloadGraphics(),this.initUniqueID()},e.prototype.loadTreeFromString=function(a){this.loadTree(JSON.parse(unescape(this.crappyUnescape(a))))},e.prototype.instantiateFromTree=function(a){var b={};f.each(a.commits,function(c){var d=this.getOrMakeRecursive(a,b,c.id,this.gitVisuals);this.commitCollection.add(d)},this),f.each(a.branches,function(c){var d=this.getOrMakeRecursive(a,b,c.id,this.gitVisuals);this.branchCollection.add(d,{silent:!0})},this),f.each(a.tags,function(c){var d=this.getOrMakeRecursive(a,b,c.id,this.gitVisuals);this.tagCollection.add(d,{silent:!0})},this);var c=this.getOrMakeRecursive(a,b,a.HEAD.id,this.gitVisuals);if(this.HEAD=c,this.rootCommit=b.C0,!this.rootCommit)throw new Error("Need root commit of C0 for calculations");if(this.refs=b,this.gitVisuals.gitReady=!1,this.branchCollection.each(function(a){this.gitVisuals.addBranch(a)},this),this.tagCollection.each(function(a){this.gitVisuals.addTag(a)},this),a.originTree){var d=JSON.stringify(a.originTree);this.animationQueue=this.animationQueue||new k({callback:function(){}}),this.makeOrigin(d)}},e.prototype.makeOrigin=function(a){if(this.hasOrigin())throw new q({msg:i.str("git-error-origin-exists")});a=a||this.printTree(this.exportTreeForBranch("master"));var b=this.gitVisuals.getVisualization(),c=b.makeOrigin({localRepo:this,treeString:a});this.animationQueue.set("promiseBased",!0),c.customEvents.on("gitEngineReady",function(){this.origin=c.gitEngine,c.gitEngine.assignLocalRepo(this),this.syncRemoteBranchFills(),this.origin.externalRefresh(),this.animationFactory.playRefreshAnimationAndFinish(this.gitVisuals,this.animationQueue)},this);var d=JSON.parse(unescape(a));f.each(d.branches,function(a,b){if(!this.refs[s+b]){var c=this.findCommonAncestorWithRemote(a.target),d=this.makeBranch(s+b,this.getCommitFromRef(c));this.setLocalToTrackRemote(this.refs[a.id],d)}},this)},e.prototype.makeRemoteBranchIfNeeded=function(a){if(!this.refs[s+a]){var b=this.origin.resolveID(a);if("branch"===b.get("type"))return this.makeRemoteBranchForRemote(a)}},e.prototype.makeBranchIfNeeded=function(a){if(!this.refs[a]){var b=this.findCommonAncestorForRemote(this.getCommitFromRef("HEAD").get("id"));return this.validateAndMakeBranch(a,this.getCommitFromRef(b))}},e.prototype.makeRemoteBranchForRemote=function(a){var b=this.origin.refs[a].get("target"),c=this.findCommonAncestorWithRemote(b.get("id"));return this.makeBranch(s+a,this.getCommitFromRef(c))},e.prototype.findCommonAncestorForRemote=function(a){for(;!this.origin.refs[a];){var b=this.refs[a].get("parents");a=b[0].get("id")}return a},e.prototype.findCommonAncestorWithRemote=function(a){for(;!this.refs[a];){var b=this.origin.refs[a].get("parents");a=b[0].get("id")}return a},e.prototype.makeBranchOnOriginAndTrack=function(a,b){var c=this.makeBranch(s+a,this.getCommitFromRef(b));this.refs[a]&&this.setLocalToTrackRemote(this.refs[a],c);var d=this.findCommonAncestorForRemote(this.getCommitFromRef(b).get("id"));this.origin.makeBranch(a,this.origin.getCommitFromRef(d))},e.prototype.setLocalToTrackRemote=function(a,b){if(a.setRemoteTrackingBranchID(b.get("id")),this.command){var c='local branch "'+a.get("id")+'" set to track remote branch "'+b.get("id")+'"';this.command.addWarning(i.todo(c))}},e.prototype.getOrMakeRecursive=function(a,b,c){if(b[c])return b[c];var d=function(a,b){if(a.commits[b])return"commit";if(a.branches[b])return"branch";if("HEAD"==b)return"HEAD";if(a.tags[b])return"tag";throw new Error("bad type for "+b)},e=d(a,c);if("HEAD"==e){var g=a.HEAD,h=new v(f.extend(a.HEAD,{target:this.getOrMakeRecursive(a,b,g.target)}));return b[c]=h,h}if("branch"==e){var i=a.branches[c],j=new w(f.extend(a.branches[c],{target:this.getOrMakeRecursive(a,b,i.target)}));return b[c]=j,j}if("tag"==e){var k=a.tags[c],l=new y(f.extend(a.tags[c],{target:this.getOrMakeRecursive(a,b,k.target)}));return b[c]=l,l}if("commit"==e){var m=a.commits[c],n=[];f.each(m.parents,function(c){n.push(this.getOrMakeRecursive(a,b,c))},this);var o=new x(f.extend(m,{parents:n,gitVisuals:this.gitVisuals}));return b[c]=o,o}throw new Error("ruh rho!! unsupported type for "+c)},e.prototype.tearDown=function(){this.tornDown||(this.eventBaton.releaseBaton("processGitCommand",this.dispatch,this),this.removeAll(),this.tornDown=!0)},e.prototype.reloadGraphics=function(){this.gitVisuals.rootCommit=this.refs.C0,this.gitVisuals.initHeadBranch(),this.gitVisuals.drawTreeFromReload(),this.gitVisuals.refreshTreeHarsh()},e.prototype.removeAll=function(){this.branchCollection.reset(),this.tagCollection.reset(),this.commitCollection.reset(),this.refs={},this.HEAD=null,this.rootCommit=null,this.origin&&(this.origin.gitVisuals.getVisualization().tearDown(),delete this.origin,this.gitVisuals.getVisualization().clearOrigin()),this.gitVisuals.resetAll()},e.prototype.getDetachedHead=function(){var a=this.HEAD.get("target"),b=a.get("type");return"branch"!==b},e.prototype.validateBranchName=function(a){if(a=a.replace(/\s/g,""),!/^[a-zA-Z0-9]+$/.test(a))throw new q({msg:i.str("bad-branch-name",{branch:a})});if(/^[cC]\d+$/.test(a))throw new q({msg:i.str("bad-branch-name",{branch:a})});if(/[hH][eE][aA][dD]/.test(a))throw new q({msg:i.str("bad-branch-name",{branch:a})});return a.length>9&&(a=a.slice(0,9),this.command.addWarning(i.str("branch-name-short",{branch:a}))),a},e.prototype.validateAndMakeBranch=function(a,b){if(a=this.validateBranchName(a),this.refs[a])throw new q({msg:i.str("bad-branch-name",{branch:a})});return this.makeBranch(a,b)},e.prototype.validateAndMakeTag=function(a,b){if(a=this.validateBranchName(a),this.refs[a])throw new q({msg:i.str("bad-tag-name",{tag:name})});this.makeTag(a,b)},e.prototype.makeBranch=function(a,b){if(this.refs[a])throw new Error("woah already have that");var c=new w({target:b,id:a});return this.branchCollection.add(c),this.refs[c.get("id")]=c,c},e.prototype.makeTag=function(a,b){if(this.refs[a])throw new Error("woah already have that");var c=new y({target:b,id:a});return this.tagCollection.add(c),this.refs[c.get("id")]=c,c},e.prototype.getHead=function(){return f.clone(this.HEAD)},e.prototype.getTags=function(){var a=[];return this.tagCollection.each(function(b){a.push({id:b.get("id"),target:b.get("target"),remote:b.getIsRemote(),obj:b})},this),a},e.prototype.getBranches=function(){var a=[];return this.branchCollection.each(function(b){a.push({id:b.get("id"),selected:this.HEAD.get("target")===b,target:b.get("target"),remote:b.getIsRemote(),obj:b})},this),a},e.prototype.getRemoteBranches=function(){var a=this.getBranches();return f.filter(a,function(a){return a.remote===!0})},e.prototype.getLocalBranches=function(){var a=this.getBranches();return f.filter(a,function(a){return a.remote===!1})},e.prototype.printBranchesWithout=function(a){var b=this.getUpstreamBranchSet(),c=this.getCommitFromRef(a).get("id"),d=[];f.each(b[c],function(a){a.selected=this.HEAD.get("target").get("id")==a.id,d.push(a)},this),this.printBranches(d)},e.prototype.printBranches=function(a){var b="";throw f.each(a,function(a){b+=(a.selected?"* ":"")+a.id+"\n"}),new r({msg:b})},e.prototype.printTags=function(a){var b="";throw f.each(a,function(a){b+=a.id+"\n"}),new r({msg:b})},e.prototype.printRemotes=function(a){var b="";throw a.verbose?(b+="origin (fetch)\n",b+=t+"git@github.com:pcottle/foo.git\n\n",b+="origin (push)\n",b+=t+"git@github.com:pcottle/foo.git"):b+="origin",new r({msg:b})},e.prototype.getUniqueID=function(){for(var a=this.uniqueId("C"),b=f.bind(function(a){return this.refs[a]?!0:this.origin&&this.origin.refs[a]?!0:!1},this);b(a);)a=this.uniqueId("C");return a},e.prototype.makeCommit=function(a,b,c){b||(b=this.getUniqueID());var d=new x(f.extend({parents:a,id:b,gitVisuals:this.gitVisuals},c||{}));return this.refs[d.get("id")]=d,this.commitCollection.add(d),d},e.prototype.revert=function(a){var b=f.map(a,function(a){return this.getCommitFromRef(a)},this),c=h.defer(),d=c.promise,e=this.resolveID("HEAD");d=this.animationFactory.highlightEachWithPromise(d,b,e);var g=this.getCommitFromRef("HEAD"),j=f.bind(function(a){var b=this.rebaseAltID(a.get("id")),c=i.str("git-revert-msg",{oldCommit:this.resolveName(a),oldMsg:a.get("commitMessage")}),d=this.makeCommit([g],b,{commitMessage:c});return g=d,this.animationFactory.playCommitBirthPromiseAnimation(d,this.gitVisuals)},this);f.each(b,function(a){d=d.then(function(){return j(a)})},this),d=d.then(f.bind(function(){return this.setTargetLocation("HEAD",g),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),this.animationQueue.thenFinish(d,c)},e.prototype.reset=function(a){this.setTargetLocation("HEAD",this.getCommitFromRef(a))},e.prototype.setupCherrypickChain=function(a){var b=h.defer(),c=b.promise,d=this.resolveID("HEAD");c=this.animationFactory.highlightEachWithPromise(c,a,d);var e=f.bind(function(a){var b=this.cherrypick(a);return this.animationFactory.playCommitBirthPromiseAnimation(b,this.gitVisuals)},this);f.each(a,function(a){c=c.then(function(){return e(a)})},this),this.animationQueue.thenFinish(c,b)},e.prototype.checkUpstreamOfSource=function(a,b,c,d,e){var f=m.getUpstreamSet(b,d),g=a.getCommitFromRef(c).get("id");if(!f[g])throw new q({msg:e||i.str("git-error-origin-fetch-no-ff")})},e.prototype.getTargetGraphDifference=function(a,b,c,d,e){e=e||{},d=b.resolveID(d);var g=m.getUpstreamSet(a,c),h=b.getCommitFromRef(d),j=b.exportTree(),k=j.commits[h.get("id")];if(g[k.id]){if(e.dontThrowOnNoFetch)return[];throw new q({msg:i.str("git-error-origin-fetch-uptodate")})}k.depth=0;for(var l=[],n=[k],o=function(a){if(!g[a]){var b=j.commits[a];b.depth=p.depth+1,n.push(b)}};n.length;){var p=n.pop();l.push(p),f.each(p.parents,o)}for(var r=m.getUniqueObjects(l),s=[],t=function(a){var b=!0;return a.parents.forEach(function(a){b=b&&g[a]}),b};r.length;)for(var u=0;u<r.length;u++)if(t(r[u])){var v=r[u];s.push(v),r.splice(u,1),g[v.id]=!0}return s},e.prototype.push=function(a){if(a=a||{},""===a.source)return this.pushDeleteRemoteBranch(this.refs[s+a.destination],this.origin.refs[a.destination]),void 0;var b=this.refs[a.source];this.origin.refs[a.destination]||(this.makeBranchOnOriginAndTrack(a.destination,this.getCommitFromRef(b)),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals));var c=this.origin.refs[a.destination],d=this.resolveID(a.source||"HEAD");a.force||this.checkUpstreamOfSource(this,this.origin,c,d,i.str("git-error-origin-push-no-ff"));var e=this.getTargetGraphDifference(this.origin,this,c,d);e=f.filter(e,function(a){return!this.origin.refs[a.id]},this);var g=f.bind(function(a,b){var c=f.map(b,function(a){return this.origin.refs[a]},this);return this.origin.makeCommit(c,a)},this),j=f.bind(function(a,b){var c=g(a,b);return this.animationFactory.playCommitBirthPromiseAnimation(c,this.origin.gitVisuals)},this),k=h.defer(),l=k.promise;f.each(e,function(a){l=l.then(f.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.refs[a.id],c)},this)),l=l.then(function(){return j(a.id,a.parents)})},this),l=l.then(f.bind(function(){var a=this.getCommitFromRef(d).get("id"),b=this.origin.refs[a];return this.origin.setTargetLocation(c,b),this.animationFactory.playRefreshAnimation(this.gitVisuals),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals)},this)),l=l.then(f.bind(function(){var b=this.getCommitFromRef(d);return this.setTargetLocation(this.refs[s+a.destination],b),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),a.dontResolvePromise||this.animationQueue.thenFinish(l,k)},e.prototype.pushDeleteRemoteBranch=function(a,b){if("master"===b.get("id"))throw new q({msg:i.todo("You cannot delete master branch on remote!")});var c=a.get("id");this.origin.deleteBranch(b),this.deleteBranch(a),this.branchCollection.each(function(a){a.getRemoteTrackingBranchID()===c&&a.setRemoteTrackingBranchID(null)},this),this.origin.pruneTree(),this.origin.externalRefresh()},e.prototype.fetch=function(a){a=a||{};var b;if(a.destination&&""===a.source)return this.validateAndMakeBranch(a.destination,this.getCommitFromRef("HEAD")),void 0;if(a.destination&&a.source)return b=b||this.makeRemoteBranchIfNeeded(a.source),b=b||this.makeBranchIfNeeded(a.destination),a.didMakeBranch=b,this.fetchCore([{destination:a.destination,source:a.source}],a);var c=this.origin.branchCollection.toArray(),d=f.map(c,function(a){var c=a.get("id");return b=b||this.makeRemoteBranchIfNeeded(c),{destination:a.getPrefixedID(),source:c}},this);return a.didMakeBranch=b,this.fetchCore(d,a)},e.prototype.fetchCore=function(a,b){f.each(a,function(a){this.checkUpstreamOfSource(this,this.origin,a.destination,a.source)},this);var c=[];if(f.each(a,function(a){c=c.concat(this.getTargetGraphDifference(this,this.origin,a.destination,a.source,f.extend({},b,{dontThrowOnNoFetch:!0})))},this),!c.length&&!b.dontThrowOnNoFetch)throw new q({msg:i.str("git-error-origin-fetch-uptodate")});c=m.getUniqueObjects(c),c=m.descendSortDepth(c),c=f.filter(c,function(a){return!this.refs[a.id]},this);var d=f.bind(function(a,b){var c=f.map(b,function(a){return this.refs[a]},this);return this.makeCommit(c,a)},this),e=f.bind(function(a,b){var c=d(a,b);return this.animationFactory.playCommitBirthPromiseAnimation(c,this.gitVisuals)},this),g=h.defer(),j=g.promise;b.didMakeBranch&&(j=j.then(f.bind(function(){return this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)));var k=this.origin.getUpstreamBranchSet();return f.each(c,function(a){var b=k[a.id][0].obj,c=this.refs[b.getPrefixedID()];j=j.then(f.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.origin.refs[a.id],c)},this)),j=j.then(function(){return e(a.id,a.parents)})},this),j=j.then(f.bind(function(){return f.each(a,function(a){var b=this.refs[a.destination],c=this.origin.getCommitFromRef(a.source).get("id"),d=this.refs[c];this.setTargetLocation(b,d)},this),this.animationFactory.playRefreshAnimation(this.origin.gitVisuals),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),b.dontResolvePromise||this.animationQueue.thenFinish(j,g),{chain:j,deferred:g}},e.prototype.pull=function(a){a=a||{};var b=this.getOneBeforeCommit("HEAD"),c=this.fetch({dontResolvePromise:!0,dontThrowOnNoFetch:!0,source:a.source,destination:a.destination});if(c){var d=this.refs[a.destination];a.isRebase?this.pullFinishWithRebase(c,b,d):this.pullFinishWithMerge(c,b,d)}},e.prototype.pullFinishWithRebase=function(a,b,c){var e=a.chain,g=a.deferred;e=e.then(f.bind(function(){if(this.isUpstreamOf(c,b))throw this.command.set("error",new r({msg:i.str("git-result-uptodate")})),u},this)),e=e.then(f.bind(function(){return this.animationFactory.getDelayedPromise(300)},this)),e=e.then(f.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(c),b)},this)),e=e.then(f.bind(function(){a.dontResolvePromise=!0;try{return this.rebase(c,b,a)}catch(d){if(this.filterError(d),d.getMsg()!==i.str("git-error-rebase-none"))throw d;return this.setTargetLocation(b,this.getCommitFromRef(c)),this.checkout(b),this.animationFactory.playRefreshAnimation(this.gitVisuals)}},this)),e=e.fail(d),this.animationQueue.thenFinish(e,g)},e.prototype.pullFinishWithMerge=function(a,b,c){var e=a.chain,g=a.deferred;e=e.then(f.bind(function(){if(this.mergeCheck(c,b))throw this.command.set("error",new r({msg:i.str("git-result-uptodate")})),u
},this)),e=e.then(f.bind(function(){return this.animationFactory.getDelayedPromise(300)},this)),e=e.then(f.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(c),b)},this)),e=e.then(f.bind(function(){return this.animationFactory.playHighlightPromiseAnimation(this.getCommitFromRef(b),c)},this)),e=e.then(f.bind(function(){return this.animationFactory.getDelayedPromise(700)},this)),e=e.then(f.bind(function(){var a=this.merge(c);return a?this.animationFactory.playCommitBirthPromiseAnimation(a,this.gitVisuals):this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),e=e.fail(d),this.animationQueue.thenFinish(e,g)},e.prototype.fakeTeamwork=function(a,b){var c=f.bind(function(){var a=this.getUniqueID();return this.origin.receiveTeamwork(a,b,this.animationQueue)},this),d=f.bind(function(){var a=c();return this.animationFactory.playCommitBirthPromiseAnimation(a,this.origin.gitVisuals)},this),e=h.defer(),g=e.promise;f.each(f.range(a),function(){g=g.then(function(){return d()})}),this.animationQueue.thenFinish(g,e)},e.prototype.receiveTeamwork=function(a,b){this.checkout(this.resolveID(b));var c=this.makeCommit([this.getCommitFromRef("HEAD")],a);return this.setTargetLocation(this.HEAD,c),c},e.prototype.cherrypick=function(a){var b=this.rebaseAltID(a.get("id")),c=this.makeCommit([this.getCommitFromRef("HEAD")],b);return this.setTargetLocation(this.HEAD,c),c},e.prototype.commit=function(a){a=a||{};var b=this.getCommitFromRef(this.HEAD),c=null;a.isAmend&&(b=this.resolveID("HEAD~1"),c=this.rebaseAltID(this.getCommitFromRef("HEAD").get("id")));var d=this.makeCommit([b],c);return this.getDetachedHead()&&"git"===this.mode&&this.command.addWarning(i.str("git-warning-detached")),this.setTargetLocation(this.HEAD,d),d},e.prototype.resolveName=function(a){var b=this.resolveID(a);return"commit"==b.get("type")?"commit "+b.get("id"):"branch"==b.get("type")?'branch "'+b.get("id")+'"':this.resolveName(b.get("target"))},e.prototype.resolveID=function(a){if(null===a||void 0===a)throw new Error("Dont call this with null / undefined");return"string"!=typeof a?a:this.resolveStringRef(a)},e.prototype.resolveRelativeRef=function(a,b){for(var c,d=/([~\^])(\d*)/g;c=d.exec(b);){var e=a,f=c[2]?parseInt(c[2],10):1;if("^"==c[1])e=a.getParent(f-1);else for(;e&&f--;)e=e.getParent(0);if(!e){var g=i.str("git-error-relative-ref",{commit:a.id,match:c[0]});throw new q({msg:g})}a=e}return a},e.prototype.resolveStringRef=function(a){if(a=this.crappyUnescape(a),this.refs[a])return this.refs[a];var b=null,c=null,d=/^([a-zA-Z0-9]+)(([~\^]\d*)*)/,e=d.exec(a);if(!e)throw new q({msg:i.str("git-error-exist",{ref:a})});if(b=e[1],c=e[2],!this.refs[b])throw new q({msg:i.str("git-error-exist",{ref:a})});var f=this.getCommitFromRef(b);return c&&(f=this.resolveRelativeRef(f,c)),f},e.prototype.getCommitFromRef=function(a){for(var b=this.resolveID(a);"commit"!==b.get("type");)b=b.get("target");return b},e.prototype.getType=function(a){return this.resolveID(a).get("type")},e.prototype.setTargetLocation=function(a,b){"commit"!=this.getType(a)&&(a=this.getOneBeforeCommit(a),a.set("target",b))},e.prototype.updateBranchesFromSet=function(a){if(!a)throw new Error("need commit set here");var b=this.getUpstreamBranchSet(),c={};f.each(a,function(a,d){f.each(b[d],function(a){c[a.id]=!0})},this);var d=f.map(c,function(a,b){return b});return this.updateBranchesForHg(d)},e.prototype.updateAllBranchesForHgAndPlay=function(a){return this.updateBranchesForHg(a)&&this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},e.prototype.updateAllBranchesForHg=function(){var a=this.branchCollection.map(function(a){return a.get("id")});return this.updateBranchesForHg(a)},e.prototype.syncRemoteBranchFills=function(){this.branchCollection.each(function(a){if(a.getIsRemote()){var b=this.origin.refs[a.getBaseID()];if(b.get("visBranch")){var c=b.get("visBranch").get("fill");a.get("visBranch").set("fill",c)}}},this)},e.prototype.updateBranchesForHg=function(a){var b=!1;return f.each(a,function(a){var c=this.getCommitFromRef(a).get("id"),d=this.getBumpedID(c);if(this.refs[d]){b=!0;for(var e;this.refs[d];)e=d,d=this.rebaseAltID(d);this.setTargetLocation(this.refs[a],this.refs[e])}},this),b?!0:!1},e.prototype.updateCommitParentsForHgRebase=function(a){var b=!1;return f.each(a,function(a,c){var d=this.refs[c],e=d.checkForUpdatedParent(this);b=b||e},this),b},e.prototype.pruneTreeAndPlay=function(){return this.pruneTree()&&this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},e.prototype.pruneTree=function(){var a=this.getUpstreamBranchSet(),b=m.getUpstreamSet(this,"HEAD");f.each(b,function(b,c){a[c]=!0});var c=[];return this.commitCollection.each(function(b){a[b.get("id")]||c.push(b)},this),c.length?(this.command&&this.command.addWarning(i.str("hg-prune-tree")),f.each(c,function(a){a.removeFromParents(),this.commitCollection.remove(a);var b=a.get("id");this.refs[b]=void 0,delete this.refs[b];var c=a.get("visNode");c&&c.removeAll()},this),!0):void 0},e.prototype.getUpstreamBranchSet=function(){return this.getUpstreamCollectionSet(this.branchCollection)},e.prototype.getUpstreamTagSet=function(){return this.getUpstreamCollectionSet(this.tagCollection)},e.prototype.getUpstreamCollectionSet=function(a){var b={},c=function(a,b){var c=!1;return f.each(a,function(a){a.id==b&&(c=!0)}),c},d=function(a){for(var b=[],c=[a];c.length;){var d=c.pop();b.push(d.get("id")),d.get("parents")&&d.get("parents").length&&(c=c.concat(d.get("parents")))}return b};return a.each(function(a){var e=d(a.get("target"));f.each(e,function(d){b[d]=b[d]||[],c(b[d],a.get("id"))||b[d].push({obj:a,id:a.get("id")})})}),b},e.prototype.getUpstreamHeadSet=function(){var a=m.getUpstreamSet(this,"HEAD"),b=this.getCommitFromRef("HEAD").get("id");return a[b]=!0,a},e.prototype.getOneBeforeCommit=function(a){var b=this.resolveID(a);return b!==this.HEAD||this.getDetachedHead()||(b=b.get("target")),b},e.prototype.scrapeBaseID=function(a){var b=/^C(\d+)/.exec(a);if(!b)throw new Error("regex failed on "+a);return"C"+b[1]},e.prototype.rebaseAltID=function(a){for(var b=this.getBumpedID(a);this.refs[b];)b=this.getBumpedID(b);return b},e.prototype.getMostRecentBumpedID=function(a){for(var b,c=a;this.refs[c];)b=c,c=this.getBumpedID(c);return b},e.prototype.getBumpedID=function(a){for(var b=[[/^C(\d+)[']{0,2}$/,function(a){return a[0]+"'"}],[/^C(\d+)[']{3}$/,function(a){return a[0].slice(0,-3)+"'^4"}],[/^C(\d+)['][\^](\d+)$/,function(a){return"C"+String(a[1])+"'^"+String(Number(a[2])+1)}]],c=0;c<b.length;c++){var d=b[c][0],e=b[c][1],f=d.exec(a);if(f)return e(f)}throw new Error("could not modify the id "+a)},e.prototype.idSortFunc=function(a,b){var c=1e3,d=[[/^C(\d+)$/,function(a){return c*a[1]}],[/^C(\d+)([']+)$/,function(a){return c*a[1]+a[2].length}],[/^C(\d+)['][\^](\d+)$/,function(a){return c*a[1]+Number(a[2])}]],e=function(a){for(var b=0;b<d.length;b++){var c=d[b][0],e=d[b][1],f=c.exec(a);if(f)return e(f)}throw new Error("Could not parse commit ID "+a)};return e(a.get("id"))-e(b.get("id"))},e.prototype.dateSortFunc=function(a,b){var c=new Date(a.get("createTime")),d=new Date(b.get("createTime"));return c-d===0?e.prototype.idSortFunc(a,b):c-d},e.prototype.hgRebase=function(a,b){var c=h.defer(),d=this.rebase(a,b,{dontResolvePromise:!0,deferred:c});if(d){var e=(this.getCommonAncestor(a,b),this.getCommitFromRef(b)),g=this.getDownstreamSet(b),i=m.getUpstreamSet(this,a),j=this.getUpstreamDiffSetFromSet(i,b),k=[];f.each(j,function(a,b){k.push(this.getDownstreamSet(b))},this);var l={};l[e.get("id")]=!0,f.each([j,g].concat(k),function(a){f.each(a,function(a,b){l[b]=!0})});var n={},o=this.getUpstreamBranchSet();f.each(l,function(a,b){f.each(o[b],function(a){n[a.id]=!0})});var p=f.map(n,function(a,b){return b});d=d.then(f.bind(function(){var a=this.updateCommitParentsForHgRebase(l);if(a)return this.animationFactory.playRefreshAnimationSlow(this.gitVisuals)},this)),d=d.then(f.bind(function(){return this.updateAllBranchesForHgAndPlay(p)},this)),d=d.then(f.bind(function(){return this.pruneTreeAndPlay()},this)),this.animationQueue.thenFinish(d,c)}},e.prototype.rebase=function(a,b,c){if(this.isUpstreamOf(a,b))return this.command.setResult(i.str("git-result-uptodate")),this.checkout(b),void 0;if(this.isUpstreamOf(b,a))return this.setTargetLocation(b,this.getCommitFromRef(a)),this.command.setResult(i.str("git-result-fastforward")),this.checkout(b),void 0;var d=m.getUpstreamSet(this,a),e=this.getUpstreamDiffFromSet(d,b);return this.rebaseFinish(e,d,a,b,c)},e.prototype.getUpstreamDiffSetFromSet=function(a,b){var c={};return f.each(this.getUpstreamDiffFromSet(a,b),function(a){c[a.get("id")]=!0}),c},e.prototype.getUpstreamDiffFromSet=function(a,b){var c=m.bfsFromLocationWithSet(this,b,a);return c.sort(this.dateSortFunc),c},e.prototype.getInteractiveRebaseCommits=function(a,b){for(var c=m.getUpstreamSet(this,a),d=[],e=[this.getCommitFromRef(b)];e.length;){var g=e.pop();c[g.get("id")]||(d.push(g),e=e.concat(g.get("parents")),e.sort(this.dateSortFunc))}var h=[];if(f.each(d,function(a){1==a.get("parents").length&&h.push(a)}),!h.length)throw new q({msg:i.str("git-error-rebase-none")});return h},e.prototype.rebaseInteractiveTest=function(a,b,c){c=c||{};var d=this.getInteractiveRebaseCommits(a,b),e={};f.each(d,function(a){var b=a.get("id");e[b]=a});var g;if(0===c.interactiveTest.length)g=d;else{var h=c.interactiveTest[0].split(","),j=[];if(g=[],f.each(h,function(a){a in e?g.push(e[a]):j.push(a)}),j.length>0)throw new q({msg:i.todo("Hey those commits dont exist in the set!")})}this.rebaseFinish(g,{},a,b)},e.prototype.rebaseInteractive=function(b,c,d){d=d||{};var e=this.getInteractiveRebaseCommits(b,c);this.animationQueue.set("defer",!0);var g=h.defer();g.promise.then(f.bind(function(a){if(!a.length)throw new r({msg:i.str("git-result-nothing")});this.rebaseFinish(a,{},b,c)},this)).fail(f.bind(function(a){this.filterError(a),this.command.set("error",a),this.animationQueue.start()},this)).done();var j;if(d.initialCommitOrdering&&d.initialCommitOrdering.length>0){var k={};f.each(e,function(a){k[a.get("id")]=!0}),j=[],f.each(d.initialCommitOrdering[0].split(","),function(a){if(!k[a])throw new q({msg:i.todo("Hey those commits dont exist in the set!")});j.push(a)})}var l=a("../views/rebaseView").InteractiveRebaseView;new l({deferred:g,toRebase:e,initialCommitOrdering:j,aboveAll:d.aboveAll})},e.prototype.filterRebaseCommits=function(a,b,c){var d={};f.each(b,function(a,b){d[this.scrapeBaseID(b)]=!0},this);var e={};return f.filter(a,function(a){if(1!==a.get("parents").length&&!c.preserveMerges)return!1;var b=this.scrapeBaseID(a.get("id"));return d[b]?!1:e[a.get("id")]?!1:(e[a.get("id")]=!0,!0)},this)},e.prototype.getRebasePreserveMergesParents=function(a){var b=a.get("parents");return f.map(b,function(a){var b=a.get("id"),c=this.getMostRecentBumpedID(b);return this.refs[c]},this)},e.prototype.rebaseFinish=function(a,b,c,d,e){e=e||{};var g=this.resolveID(c),j=e.deferred||h.defer(),k=e.chain||j.promise,l=this.filterRebaseCommits(a,b,e);if(!l.length)throw new q({msg:i.str("git-error-rebase-none")});k=this.animationFactory.highlightEachWithPromise(k,l,g);var m=this.getCommitFromRef(c),n=!1,o=f.bind(function(a){var b,c=this.rebaseAltID(a.get("id"));b=e.preserveMerges&&n?n?this.getRebasePreserveMergesParents(a):[m]:[m];var d=this.makeCommit(b,c);return m=d,n=!0,this.animationFactory.playCommitBirthPromiseAnimation(d,this.gitVisuals)},this);return f.each(l,function(a){k=k.then(function(){return o(a)})},this),k=k.then(f.bind(function(){return"commit"==this.resolveID(d).get("type")?this.checkout(m):(this.setTargetLocation(d,m),this.checkout(d)),this.animationFactory.playRefreshAnimation(this.gitVisuals)},this)),e.dontResolvePromise||this.animationQueue.thenFinish(k,j),k},e.prototype.mergeCheck=function(a,b){var c=this.getCommitFromRef(a)===this.getCommitFromRef(b);return this.isUpstreamOf(a,b)||c},e.prototype.merge=function(a,b){b=b||{};var c="HEAD";if(this.mergeCheck(a,c))throw new r({msg:i.str("git-result-uptodate")});if(this.isUpstreamOf(c,a)&&!b.noFF)return this.setTargetLocation(c,this.getCommitFromRef(a)),this.command.setResult(i.str("git-result-fastforward")),void 0;var d=this.getCommitFromRef(c),e=this.getCommitFromRef(a),f=i.str("git-merge-msg",{target:this.resolveName(a),current:this.resolveName(c)}),g=this.makeCommit([d,e],null,{commitMessage:f});return this.setTargetLocation(c,g),g},e.prototype.checkout=function(a){var b=this.resolveID(a);if("HEAD"!==b.get("id")){var c=b.get("type");if("branch"===c&&b.getIsRemote()&&(b=this.getCommitFromRef(b.get("id"))),"branch"!==c&&"tag"!==c&&"commit"!==c)throw new q({msg:i.str("git-error-options")});"tag"===c&&(b=b.get("target")),this.HEAD.set("target",b)}},e.prototype.forceBranch=function(a,b){a=this.crappyUnescape(a),this.refs[a]||this.branch(a,b);var c=this.resolveID(a);if("branch"!==c.get("type"))throw new q({msg:i.str("git-error-options")});if(c.getIsRemote())throw new q({msg:i.str("git-error-remote-branch")});var d=this.getCommitFromRef(b);this.setTargetLocation(c,d)},e.prototype.branch=function(a,b){var c=this.getCommitFromRef(b),d=this.validateAndMakeBranch(a,c);b=this.resolveID(b),this.isRemoteBranchRef(b)&&this.setLocalToTrackRemote(d,b)},e.prototype.isRemoteBranchRef=function(a){var b=this.resolveID(a);return"branch"!==b.get("type")?!1:b.getIsRemote()},e.prototype.tag=function(a,b){var c=this.getCommitFromRef(b);this.validateAndMakeTag(a,c)},e.prototype.describe=function(a){var b=this.getCommitFromRef(a),c={};f.each(this.tagCollection.toJSON(),function(a){c[a.target.get("id")]=a.id});for(var d,e=[b],g=[];e.length;){var h=e.pop(),j=h.get("id");if(c[j]){d=c[j];break}g.push(h.get("id"));var k=h.get("parents");k&&k.length&&(e=e.concat(k),e.sort(this.dateSortFunc))}if(!d)throw new q({msg:i.todo("Fatal: no tags found upstream")});if(0===g.length)throw new r({msg:d});throw new r({msg:d+"_"+g.length+"_g"+b.get("id")})},e.prototype.validateAndDeleteBranch=function(a){var b=this.resolveID(a);if("branch"!==b.get("type")||"master"==b.get("id")||this.HEAD.get("target")===b)throw new q({msg:i.str("git-error-branch")});var c=b;if(b.getIsRemote())throw new q({msg:i.str("git-error-remote-branch")});this.deleteBranch(c)},e.prototype.deleteBranch=function(a){this.branchCollection.remove(a),this.refs[a.get("id")]=void 0,delete this.refs[a.get("id")],this.HEAD.get("target")===a&&this.HEAD.set("target",this.refs.master),a.get("visBranch")&&a.get("visBranch").remove()},e.prototype.crappyUnescape=function(a){return a.replace(/&#x27;/g,"'").replace(/&#x2F;/g,"/")},e.prototype.filterError=function(a){if(!(a instanceof q||a instanceof r))throw a},e.prototype.externalRefresh=function(){this.animationQueue=new k({callback:function(){}}),this.animationFactory.refreshTree(this.animationQueue,this.gitVisuals),this.animationQueue.start()},e.prototype.dispatch=function(a,b){this.command=a;var c=a.get("vcs"),d=f.bind(function(){this.dispatchProcess(a,b)},this);this.handleModeChange(c,d)},e.prototype.dispatchProcess=function(a,b){var c=f.bind(function(){a.finishWith(b)},this);this.animationQueue=new k({callback:c});var d=a.get("vcs"),e=a.get("method").replace(/-/g,"");try{p.commands.execute(d,e,this,this.command)}catch(g){return this.filterError(g),a.set("error",g),b.resolve(),void 0}var h=this.animationQueue.get("defer")||this.animationQueue.get("promiseBased");this.animationQueue.get("animations").length||h||this.animationFactory.refreshTree(this.animationQueue,this.gitVisuals),h||this.animationQueue.start()},e.prototype.show=function(a){var b=this.getCommitFromRef(a);throw new r({msg:b.getShowEntry()})},e.prototype.status=function(){var a=[];if(this.getDetachedHead())a.push(i.str("git-status-detached"));else{var b=this.HEAD.get("target").get("id");a.push(i.str("git-status-onbranch",{branch:b}))}a.push("Changes to be committed:"),a.push(""),a.push(t+"modified: cal/OskiCostume.stl"),a.push(""),a.push(i.str("git-status-readytocommit"));var c="";throw f.each(a,function(a){c+="# "+a+"\n"}),new r({msg:c})},e.prototype.logWithout=function(a,b){b=b.slice(1),this.log(a,m.getUpstreamSet(this,b))},e.prototype.log=function(a,b){b=b||{};for(var c=this.getCommitFromRef(a),d=[],e=[c],g={};e.length;){var h=e.shift(0);g[h.get("id")]||b[h.get("id")]||(g[h.get("id")]=!0,d.push(h),h.get("parents")&&h.get("parents").length&&(e=e.concat(h.get("parents"))))}var i="";throw f.each(d,function(a){i+=a.getLogEntry()},this),new r({msg:i})},e.prototype.getCommonAncestor=function(a,b){if(this.isUpstreamOf(b,a))throw new Error("Dont use common ancestor if we are upstream!");for(var c=m.getUpstreamSet(this,a),d=[this.getCommitFromRef(b)];d.length;){var e=d.pop();if(c[e.get("id")])return e;d=d.concat(e.get("parents"))}throw new Error("something has gone very wrong... two nodes arent connected!")},e.prototype.isUpstreamOf=function(a,b){a=this.getCommitFromRef(a);var c=m.getUpstreamSet(this,b);return void 0!==c[a.get("id")]},e.prototype.getDownstreamSet=function(a){var b=this.getCommitFromRef(a),c=b.get("id"),d=[b],e={};e[c]=!0;for(var g=function(a){e[a.get("id")]=!0,d.push(a)};d.length;){var h=d.pop(),i=h.get("children");f.each(i,g)}return e};var v=g.Model.extend({initialize:function(){if(!this.get("target"))throw new Error("must be initialized with target");if(!this.get("id"))throw new Error("must be given an id");this.set("type","general ref"),"HEAD"==this.get("id")&&(this.set("lastLastTarget",null),this.set("lastTarget",this.get("target")),this.on("change:target",this.targetChanged,this))},getIsRemote:function(){return!1},getName:function(){return this.get("id")},targetChanged:function(a,b){this.set("lastLastTarget",this.get("lastTarget")),this.set("lastTarget",b)},toString:function(){return"a "+this.get("type")+"pointing to "+String(this.get("target"))}}),w=v.extend({defaults:{visBranch:null,remoteTrackingBranchID:null,remote:!1},initialize:function(){v.prototype.initialize.call(this),this.set("type","branch")},setRemoteTrackingBranchID:function(a){this.set("remoteTrackingBranchID",a)},getRemoteTrackingBranchID:function(){return this.get("remoteTrackingBranchID")},getPrefixedID:function(){if(this.getIsRemote())throw new Error("im already remote");return s+this.get("id")},getBaseID:function(){if(!this.getIsRemote())throw new Error("im not remote so cant get base");return this.get("id").replace(s,"")},getIsRemote:function(){return"string"!=typeof this.get("id"),this.get("id").slice(0,2)===s}}),x=g.Model.extend({defaults:{type:"commit",children:null,parents:null,author:"Peter Cottle",createTime:null,commitMessage:null,visNode:null,gitVisuals:null},constants:{circularFields:["gitVisuals","visNode","children"]},getLogEntry:function(){return["Author: "+this.get("author"),"Date: "+this.get("createTime"),"<br/>",this.get("commitMessage"),"<br/>","Commit: "+this.get("id")].join("\n")+"\n"},getShowEntry:function(){return[this.getLogEntry(),"diff --git a/bigGameResults.html b/bigGameResults.html","--- bigGameResults.html","+++ bigGameResults.html","@@ 13,27 @@ Winner, Score","- Stanfurd, 14-7","+ Cal, 21-14"].join("\n")+"\n"},validateAtInit:function(){if(!this.get("id"))throw new Error("Need ID!!");if(this.get("createTime")||this.set("createTime",(new Date).toString()),this.get("commitMessage")||this.set("commitMessage",i.str("git-dummy-msg")),this.set("children",[]),!(this.get("rootCommit")||this.get("parents")&&this.get("parents").length))throw new Error("needs parents")},addNodeToVisuals:function(){var a=this.get("gitVisuals").addNode(this.get("id"),this);this.set("visNode",a)},addEdgeToVisuals:function(a){this.get("gitVisuals").addEdge(this.get("id"),a.get("id"))},getParent:function(a){return this&&this.attributes&&this.attributes.parents?this.attributes.parents[a]:null},removeFromParents:function(){f.each(this.get("parents"),function(a){a.removeChild(this)},this)},checkForUpdatedParent:function(a){var b=this.get("parents");if(!(b.length>1)){var c=b[0],d=c.get("id"),e=a.getMostRecentBumpedID(d);if(d!==e){var f=a.refs[e];this.removeFromParents(),this.set("parents",[f]),f.get("children").push(this);var g=this.get("visNode");g&&g.removeAllEdges();var h=this.get("gitVisuals");return h&&h.addEdge(this.get("id"),e),!0}}},removeChild:function(a){var b=[];f.each(this.get("children"),function(c){c!==a&&b.push(c)},this),this.set("children",b)},isMainParent:function(a){var b=this.get("parents").indexOf(a);return 0===b},initialize:function(){this.validateAtInit(),this.addNodeToVisuals(),f.each(this.get("parents"),function(a){a.get("children").push(this),this.addEdgeToVisuals(a)},this)}}),y=v.extend({defaults:{visTag:null},initialize:function(){v.prototype.initialize.call(this),this.set("type","tag")}});c.GitEngine=e,c.Commit=x,c.Branch=w,c.Tag=y,c.Ref=v},{"../app":21,"../commands":22,"../graph":33,"../graph/treeCompare":34,"../intl":36,"../util":55,"../util/errors":53,"../util/eventBaton":54,"../views/rebaseView":65,"../visuals/animation":67,"../visuals/animation/animationFactory":66,backbone:1,q:14,underscore:17}],33:[function(a,b){var c=a("underscore"),d={getOrMakeRecursive:function(b,d,e){var f=a("../git"),g=f.Commit,h=f.Ref,i=f.Branch,j=f.Tag;if(d[e])return d[e];var k=function(a,b){if(a.commits[b])return"commit";if(a.branches[b])return"branch";if("HEAD"==b)return"HEAD";if(a.tags[b])return"tag";throw new Error("bad type for "+b)},l=k(b,e);if("HEAD"==l){var m=b.HEAD,n=new h(c.extend(b.HEAD,{target:this.getOrMakeRecursive(b,d,m.target)}));return d[e]=n,n}if("branch"==l){var o=b.branches[e],p=new i(c.extend(b.branches[e],{target:this.getOrMakeRecursive(b,d,o.target)}));return d[e]=p,p}if("tag"==l){var q=b.tags[e],r=new j(c.extend(b.tags[e],{target:this.getOrMakeRecursive(b,d,q.target)}));return d[e]=r,r}if("commit"==l){var s=b.commits[e],t=[];c.each(s.parents,function(a){t.push(this.getOrMakeRecursive(b,d,a))},this);var u=new g(c.extend(s,{parents:t,gitVisuals:this.gitVisuals}));return d[e]=u,u}throw new Error("ruh rho!! unsupported type for "+e)},descendSortDepth:function(a){return a.sort(function(a,b){return b.depth-a.depth})},bfsFromLocationWithSet:function(a,b,c){for(var d=[],e=[a.getCommitFromRef(b)];e.length;){var f=e.pop();c[f.get("id")]||(d.push(f),e=e.concat(f.get("parents")))}return d},getUpstreamSet:function(a,b){var d=a.getCommitFromRef(b),e=d.get("id"),f=[d],g={};g[e]=!0;for(var h=function(a){g[a.get("id")]=!0,f.push(a)};f.length;){var i=f.pop(),j=i.get("parents");c.each(j,h)}return g},getUniqueObjects:function(a){var b={},d=[];return c.forEach(a,function(a){b[a.id]||(b[a.id]=!0,d.push(a))}),d},getDefaultTree:function(){return JSON.parse(unescape("%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%2C%22type%22%3A%22branch%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22type%22%3A%22commit%22%2C%22parents%22%3A%5B%5D%2C%22author%22%3A%22Peter%20Cottle%22%2C%22createTime%22%3A%22Mon%20Nov%2005%202012%2000%3A56%3A47%20GMT-0800%20%28PST%29%22%2C%22commitMessage%22%3A%22Quick%20Commit.%20Go%20Bears%21%22%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22type%22%3A%22commit%22%2C%22parents%22%3A%5B%22C0%22%5D%2C%22author%22%3A%22Peter%20Cottle%22%2C%22createTime%22%3A%22Mon%20Nov%2005%202012%2000%3A56%3A47%20GMT-0800%20%28PST%29%22%2C%22commitMessage%22%3A%22Quick%20Commit.%20Go%20Bears%21%22%2C%22id%22%3A%22C1%22%7D%7D%2C%22HEAD%22%3A%7B%22id%22%3A%22HEAD%22%2C%22target%22%3A%22master%22%2C%22type%22%3A%22general%20ref%22%7D%7D"))}};b.exports=d},{"../git":32,underscore:17}],34:[function(a,b){var c=a("underscore"),d={};d.dispatchFromLevel=function(a,b){var c=a.goalTreeString;return"string"!=typeof b&&console.warn("NEED to pass in string!! gah"),d.dispatch(a,c,b)},d.onlyMasterCompared=function(a){var b=!0;switch(b){case!!a.compareOnlyMaster:case!!a.compareOnlyMasterHashAgnostic:case!!a.compareOnlyMasterHashAgnosticWithAsserts:return!0;default:return!1}},d.dispatch=function(a,b,c){var d=this.convertTreeSafe(b);if(c=this.convertTreeSafe(c),typeof d.originTree!=typeof c.originTree)return!1;var e=this.dispatchShallow(a,d,c);if(!e||!d.originTree)return e;var f=a.originCompare?a.originCompare:a;return e&&this.dispatchShallow(f,d.originTree,c.originTree)},d.dispatchShallow=function(a,b,c){var e=!0;switch(e){case!!a.compareOnlyMaster:return d.compareBranchWithinTrees(c,b,"master");case!!a.compareOnlyBranches:return d.compareAllBranchesWithinTrees(c,b);case!!a.compareAllBranchesHashAgnostic:return d.compareAllBranchesWithinTreesHashAgnostic(c,b);case!!a.compareOnlyMasterHashAgnostic:return d.compareBranchesWithinTreesHashAgnostic(c,b,["master"]);case!!a.compareOnlyMasterHashAgnosticWithAsserts:return d.compareBranchesWithinTreesHashAgnostic(c,b,["master"])&&d.evalAsserts(c,a.goalAsserts);default:return d.compareAllBranchesWithinTreesAndHEAD(c,b)}},d.compareAllBranchesWithinTreesAndHEAD=function(a,b){return a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),a.HEAD.target===b.HEAD.target&&this.compareAllBranchesWithinTrees(a,b)&&this.compareAllTagsWithinTrees(a,b)},d.compareAllBranchesWithinTrees=function(a,b){a=this.convertTreeSafe(a),b=this.convertTreeSafe(b);var d=c.extend({},a.branches,b.branches),e=!0;return c.uniq(d,function(c,d){e=e&&this.compareBranchWithinTrees(a,b,d)},this),e},d.compareAllTagsWithinTrees=function(a,b){return a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),this.reduceTreeFields([a,b]),c.isEqual(a.tags,b.tags)},d.compareBranchesWithinTrees=function(a,b,d){var e=!0;return c.each(d,function(c){e=e&&this.compareBranchWithinTrees(a,b,c)},this),e},d.compareBranchWithinTrees=function(a,b,d){a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),this.reduceTreeFields([a,b]);var e=this.getRecurseCompare(a,b),f=a.branches[d],g=b.branches[d];return c.isEqual(f,g)&&e(a.commits[f.target],b.commits[g.target])},d.compareAllBranchesWithinTreesHashAgnostic=function(a,b){a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),this.reduceTreeFields([a,b]);var d=c.extend({},a.branches,b.branches),e=[];return c.each(d,function(a,b){e.push(b)}),this.compareBranchesWithinTreesHashAgnostic(a,b,e)},d.compareBranchesWithinTreesHashAgnostic=function(a,b,d){a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),this.reduceTreeFields([a,b]);var e=c.bind(function(a,b){return a&&b?(a=c.clone(a),b=c.clone(b),a.target=this.getBaseRef(a.target),b.target=this.getBaseRef(b.target),c.isEqual(a,b)):!1},this),f=this.getRecurseCompareHashAgnostic(a,b),g=!0;return c.each(d,function(c){var d=a.branches[c],h=b.branches[c];g=g&&e(d,h)&&f(a.commits[d.target],b.commits[h.target])},this),g},d.evalAsserts=function(a,b){var d=!0;return c.each(b,function(b,c){d=d&&this.evalAssertsOnBranch(a,c,b)},this),d},d.evalAssertsOnBranch=function(a,b,d){if(a=this.convertTreeSafe(a),!a.branches[b])return!1;for(var e=a.branches[b],f=[e.target],g={};f.length;){var h=f.pop();g[this.getBaseRef(h)]=this.getNumHashes(h),f=f.concat(a.commits[h].parents)}var i=!0;return c.each(d,function(a){try{i=i&&a(g)}catch(b){console.warn("error during assert",b),console.log(b),i=!1}}),i},d.getNumHashes=function(a){for(var b=[[/^C(\d+)([']{0,3})$/,function(a){return a[2]?a[2].length:0}],[/^C(\d+)['][\^](\d+)$/,function(a){return Number(a[2])}]],c=0;c<b.length;c++){var d=b[c][0],e=b[c][1],f=d.exec(a);if(f)return e(f)}throw new Error("coudlnt parse ref "+a)},d.getBaseRef=function(a){var b=/^C(\d+)/,c=b.exec(a);if(!c)throw new Error("no regex matchy for "+a);return"C"+c[1]},d.getRecurseCompareHashAgnostic=function(a,b){var d=c.bind(function(a){return a?c.extend({},a,{id:this.getBaseRef(a.id),parents:null}):{}},this),e=function(a,b){return c.isEqual(d(a),d(b))};return this.getRecurseCompare(a,b,{isEqual:e})},d.getRecurseCompare=function(a,b,d){d=d||{};var e=function(f,g){var h=d.isEqual?d.isEqual(f,g):c.isEqual(f,g);if(!h)return!1;var i=Math.max(f.parents.length,g.parents.length);return c.each(c.range(i),function(c){var d=f.parents[c],i=g.parents[c],j=a.commits[d],k=b.commits[i];h=h&&e(j,k)},this),h};return e},d.lowercaseTree=function(a){a.HEAD&&(a.HEAD.target=a.HEAD.target.toLocaleLowerCase());var b=a.branches;return a.branches={},c.each(b,function(b,c){b.id=b.id.toLocaleLowerCase(),a.branches[c.toLocaleLowerCase()]=b}),a},d.convertTreeSafe=function(a){return"string"!=typeof a?a:(a=JSON.parse(unescape(a)),this.lowercaseTree(a),a.originTree&&(a.originTree=this.lowercaseTree(a.originTree)),a)},d.reduceTreeFields=function(a){var b=["parents","id","rootCommit"],d=["target","id","remoteTrackingBranchID"],e=["target","id"],f=["children","parents"],g={remoteTrackingBranchID:null},h={tags:{}};c.each(a,function(a){c.each(h,function(b,c){void 0===a[c]&&(a[c]=b)})});var i=function(a,b,d,e){var f=a[b];c.each(f,function(f,h){var i={};c.each(d,function(a){void 0!==f[a]?i[a]=f[a]:void 0!==g[a]&&(i[a]=g[a])}),c.each(e,function(a){f[a]&&(f[a].sort(),i[a]=f[a])}),a[b][h]=i})};c.each(a,function(a){i(a,"commits",b,f),i(a,"branches",d),i(a,"tags",e),a.HEAD={target:a.HEAD.target,id:a.HEAD.id},a.originTree&&this.reduceTreeFields([a.originTree])},this)},d.compareTrees=function(a,b){return a=this.convertTreeSafe(a),b=this.convertTreeSafe(b),this.reduceTreeFields([a,b]),c.isEqual(a,b)},b.exports=d},{underscore:17}],35:[function(a){var b=(a("sys"),a("../util")),c=a("underscore"),d=a("child_process"),e=a("../intl/strings").strings,f='grep -C 2 -r "intl.str(" ../../',g=function(a){return'grep -r "'+a+'" ../../'},h=/intl.str\('([a-zA-Z\-]+)'/g,i=/\s+'([a-z\-]+)',/g,j=function(a){d.exec(g(a),function(a,b){console.log(b)})},k=function(a){e[a]||(console.log('NO KEY for: "',a,'"'),j(a))},l=function(a){c.each(a,function(a){var b=h.exec(a);return b&&b[1]?(k(b[1]),void 0):(b=i.exec(a),b&&b[1]&&k(b[1]),void 0)})};b.isBrowser()||d.exec(f,function(a,b){l(b.split("\n"))})},{"../intl/strings":37,"../util":55,child_process:2,sys:7,underscore:17}],36:[function(a,b,c){var d=a("../stores/LocaleStore"),e=a("underscore"),f=a("../intl/strings").strings,g=d.getDefaultLocale,h={zh_TW:"zh_CN"},i=e.clone(e.templateSettings);i.interpolate=/\{(.+?)\}/g;var j=c.template=function(a,b){return e.template(a,b,i)},k=c.str=function(a,b){b=b||{};var c=d.getLocale();return f[a]?(f[a][c]||(c=h[c]||g()),f[a][c]?j(f[a][c],b):"error-untranslated"!==a?k("error-untranslated"):'No translation for the key "'+a+'"'):(console.warn("NO INTL support for key "+a),"NO INTL support for key "+a)},l=c.getIntlKey=function(a,b){if(!a||!a[b])throw new Error("that key "+b+"doesnt exist in this blob"+a);return a[b][g()]||console.warn("WARNING!! This blob does not have intl support:",a,"for this key",b),a[b][d.getLocale()]};c.todo=function(a){return a},c.getDialog=function(a){return l(a,"dialog")||a.dialog[g()]},c.getHint=function(a){return l(a,"hint")||k("error-untranslated")},c.getName=function(a){return l(a,"name")||k("error-untranslated")},c.getStartDialog=function(a){var b=l(a,"startDialog");if(b)return b;var c={type:"ModalAlert",options:{markdown:k("error-untranslated")}},d=e.clone(a.startDialog[g()]||a.startDialog);return d.childViews.unshift(c),d}},{"../intl/strings":37,"../stores/LocaleStore":50,underscore:17}],37:[function(a,b,c){c.strings={"finish-dialog-finished":{__desc__:"One of the lines in the next level dialog",ja:"最後のレベルをクリアしました！すごい！！",en_US:"Wow! You finished the last level, great!",de_DE:"Wow! Du hast den letzten Level gelöst, super!",zh_CN:"我的个天！你完成了最后一关，碉堡了！",zh_TW:"我的天啊！您解開了最後一關，太強了！",es_AR:"¡Ea! Terminaste el último nivel, ¡genial!",pt_BR:"Uia! Você terminou o último nível, massa!",fr_FR:"Félicitations, vous avez réussi le dernier niveau !",ru:"Вау! Вы прошли последний уровень, отлично!"},"finish-dialog-next":{__desc__:"One of the lines in the next level dialog",en_US:'Would you like to move on to *"{nextLevel}"*, the next level?',de_DE:'Möchtest du mit *"{nextLevel}"* weitermachen, dem nächsten Level?',ja:'次の章 *"{nextLevel}"* へ進みますか？',zh_CN:"要不前进到下一关 *“{nextLevel}”*？",zh_TW:"下一關是*「{nextLevel}」*，您要繼續闖關嗎？",es_AR:'¿Querés seguir con *"{nextLevel}"*, el próximo nivel?',pt_BR:'Você gostaria de ir para o próximo nível: *"{nextLevel}"*?',fr_FR:'Voulez-vous passer à *"{nextLevel}"*, le prochain niveau ?',ru:'Хотите перейти на следующий уровень: *"{nextLevel}"*?'},"finish-dialog-win":{__desc__:"One of the lines in the next level dialog",en_US:"Awesome! You matched or exceeded our solution.",pt_BR:"Maravilha! Você fez uma solução tão boa quanto ou melhor que a nossa.",de_DE:"Wahnsinn! Du warst so gut wie unsere Lösung, oder sogar besser.",ja:"素晴らしい！このレベルをクリアしましたね。",zh_CN:"牛鼻啊！你达到或者完爆了我们的答案。",zh_TW:"太強了，您的答案符合我們的預期甚至更好！",es_AR:"¡Fabuloso! Igualaste o superaste nuestra solución.",fr_FR:"Fabuleux ! Votre solution a égalé ou surpassé notre solution.",ru:"Отлично! Ваше решение соответсвует или превосходит наше."},"finish-dialog-lose":{__desc__:"When the user entered more commands than our best, encourage them to do better",en_US:"See if you can whittle it down to {best} :D",de_DE:"Schau mal ob du es in {best} Schritten hinbekommst :D",ja:"模範解答の回数={best}回でクリアする方法も考えてみましょう :D",zh_CN:"试试看你能否在 {best} 之内搞定 :D",zh_TW:"試試看您是否能在 {best} 步内搞定 :D",es_AR:"Fijate si podés bajarlo a usar sólo {best} comandos :D",pt_BR:"Veja se consegue reduzir para somente {best} :D",fr_FR:"Voyons si vous pouvez descendre à {best} :D",ru:"Попробуйте, может вы сможете уложиться в {best} : D"},"hg-prune-tree":{__desc__:"warning when pruning tree",en_US:"Warning! Mercurial does aggressive garbage collection and thus needs to prune your tree",zh_CN:"注意！ Mercurial 会进行主动垃圾回收，会导致需要将你的树縮小。",zh_TW:"注意！ Mercurial 會積極地做垃圾收集，而且會因此把你的 tree 給縮小。",es_AR:"¡Cuidado! Mercurial hace garbage collection agresivamente y necesita eliminar tu árbol",pt_BR:"Cuidado! O Mercurial faz coleção de lixo agressiva e precisa prunar sua árvore",fr_FR:"Attention, Mercurial supprime de façon agressive et nécessite un prune du repository",de_DE:"Achtung! Mercurial macht aggressive Garbage Collection und muss daher deinen Baum reduzieren",ru:"Внимание! Mercurial использует агрессивный сборщик мусора и обрезает ваше дерево"},"hg-a-option":{__desc__:"warning for when using -A option",en_US:"The -A option is not needed for this app, just commit away!",zh_TW:"對於這個 app 來說，-A 選項並不是必須的，只需要 commit 就好！",zh_CN:"对本 app 而言，-A 选项并非必须项，直接 commit 就好！",es_AR:"La opción -A no es necesaria para esta aplicación, simplemente hacé commit",pt_BR:"A opção -A não é necessária para este aplicativo, simplesmente faça commit",de_DE:"Die Option -A wird in dieser Anwendung nicht benötigt, committe einfach!",fr_FR:"L'option -A n'est pas nécessaire pour cette application, simplemer commiter",ru:"Опция -A не требуется для этого приложения, просто сделайте коммит."},"hg-error-no-status":{__desc__:"One of the errors for hg",en_US:"There is no status command for this app, since there is no staging of files. Try hg summary instead",zh_CN:"本 App 没有 status 命令哦，因为根本没有 stage 缓存文件。可以用 hg summary 代替哦",es_AR:"No hay un comando status para esta aplicación, dado que no hay archivos que indexar. Probá hg summary, en cambio",pt_BR:"Não existe um comando status para este aplicativo, já que não há staging de arquivos. Tente hg summary",fr_FR:"Il n'y a pas de commande status pour cette application, car il n'y a pas de fichier stagé. Essayé hg summary à la place.",de_DE:"Es gibt keinen Befehl status in dieser Anwendung, da es kein Staging von Dateien gibt. Probier stattdessen hg summary",ru:"Команда status не поддерживается в этом приложении, так как здесь нет файлов. Попробуйте выполнить hg summary"},"hg-error-need-option":{__desc__:"One of the errors for hg",en_US:"I need the option {option} for that command!",zh_CN:"我需要该命令使用 {option} 选项呢。",es_AR:"¡Necesito la opción {opcion} para ese comando!",pt_BR:"Eu preciso da opção {option} para esse comando!",fr_FR:"J'ai besoin de l'option {option} pour cette commande",de_DE:"Ich benötige die Option {option} für diesen Befehl!",ru:"Для этой команды требуется опция {option}"},"hg-error-log-no-follow":{__desc__:"hg log without -f (--follow)",en_US:"hg log without -f is currently not supported, use -f",zh_CN:"暂不支持没有-f 选项的 hg log 命令，请补充 -f 选项吧",es_AR:"hg log sin el parámetro -f no está soportado, usá -f",pt_BR:"hg log sem -f atualmente não é suportado, use -f",fr_FR:"hg log sans -f n'est pas supporté",de_DE:"hg log ohne -f wird aktuell nicht unterstützt, benutze bitte -f",ru:"hg log без опции -f в настоящий момент не поддерживается, используйте -f"},"git-status-detached":{__desc__:"One of the lines for git status output",en_US:"Detached head!",de_DE:"Detached head!",zh_CN:"脑袋搬家（Detached head）了！",zh_TW:"分離 Head！",es_AR:"¡Detached HEAD!",pt_BR:"Detached HEAD!",fr_FR:"head détaché !",ru:"Отделенный HEAD"},"git-status-onbranch":{__desc__:"One of the lines for git status output",en_US:"On branch {branch}",de_DE:"Auf Branch {branch}",zh_CN:"切换到分支 {branch}",zh_TW:"切換到 branch {branch}",es_AR:"En la rama {branch}",pt_BR:"No ramo {branch}",fr_FR:"Sur la branche {branch}",ru:"В ветке {branch}"},"git-status-readytocommit":{__desc__:"One of the lines for git status output",en_US:"Ready to commit! (as always in this demo)",de_DE:"Fertig zum committen! (Wie immer in dieser Demo)",zh_CN:"可以提交啦！（这演示里一直可以提交）",zh_TW:"準備 commit！（在這個 demo 裡面可以一直 commit）",es_AR:"¡Listo para commitear! (como siempre en esta demo ;-) )",pt_BR:"Pronto para commitar! (como sempre neste demo ;-) )",fr_FR:"Prêt à commit ! (comme toujours dans cette démo)",ru:"Готово к коммиту! (как и всегда в этом демо)"},"git-dummy-msg":{__desc__:"The dummy commit message for all commits. Feel free to put in a shoutout to your school / city / whatever!",en_US:"Quick commit. Go Bears!",de_DE:"Schneller Commit. Eff-Zeh!",zh_CN:"快速提交。上啊月熊！",zh_TW:"快速 commit。上啊熊！",es_AR:"Otro commit más, y van...",pt_BR:"Commitando.. Vai Timão!",fr_FR:"Commit rapide. NoMaN Sux!",ru:"Быстрый коммит. А надо!"},"git-error-origin-fetch-uptodate":{__desc__:"One of the error messages for git",en_US:"Already up to date!",de_DE:"Bereits aktuell!",fr_FR:"Déjà à jour",es_AR:"Estás en la versión más reciente",pt_BR:"Já estamos na versão mais recente!",zh_TW:"已經是最新的了",zh_CN:"已经是最新的了",ru:"Уже обновлено!"},"git-error-origin-fetch-no-ff":{__desc__:"One of the error messages for git",en_US:"Your origin branch is out of sync with the remote branch and fetch cannot be performed",zh_CN:"你的 origin 分支已经失去了与 remote 远端分支的同步，所以无法执行 fetch 命令",de_DE:"Dein origin Branch ist nicht auf dem Stand des Remote Branch und fetch kann nicht ausgeführt werden",es_AR:"Tu rama origin está desincronizada con la rama remota, por lo que no se puede hacer el fetch",pt_BR:"O fetch não pode ser realizado pois o ramo de origem está fora de sincronia com o ramo remoto",fr_FR:"Votre branche origin n'est plus synchronisée avec la branche distante et fetch ne peut pas être appliqué. Essayez avec l'option --force",ru:"Ваша origin ветка не синхронизирована с удаленной веткой, невозможно выполнить fetch"},"git-error-origin-push-no-ff":{__desc__:"One of the error messages for git",en_US:"The remote repository has diverged from your local repository, so uploading your changes is not a simple fast forward (and thus your push was rejected). Please pull down the new changes in the remote repository, incorporate them into this branch, and try again. You can do so with git pull or git pull --rebase",zh_CN:"远端仓库与你的本地仓库产生了分歧，故此上传操作无法通过简单地快进实现（因此你的 push 被拒绝了）。请 pull 下来远端里最新的更改，与本地合并之后再试一次。你可以通过 git pull 或 git pull --rebase 实现。",de_DE:"Das entfernte Repository weicht von deinem lokalen Repository ab, daher können deine Änderungen nicht mit einem einfachen fast forward hochgeladen werden (und daher ist dein push abgelehnt worden). Bitte pull erst die neuen Änderungen in das lokale Repository, integriere sie in den Branch und versuch es nochmal. Das kannst du mit git pull oder git pull --rebase machen",es_AR:"El repositorio remoto divergió de tu repositorio local, por lo que subir tus cambios no es un simple fast forward (y por eso se rechazó tu push). Por favor, hacé pull de los nuevos cambios en el repositorio remoto, incorporalos a esta rama y probá de nuevo. Podés hacerlo con git pull o git pull --rebase",pt_BR:"O repositório remoto divergiu do repositório local, então enviar suas mudanças não é um simples fast forward (e por isso seu push foi rejeitado). Por favor, faça pull das novas mudanças do repositório remoto, incorpore-os a este ramo, e tente novamente. Você pode fazê-lo com git pull ou git pull --rebase",fr_FR:"Le dépôt distant a divergé de votre référentiel local, donc l'envoi de vos modifications n'est pas en simple avance rapide (et donc votre envoi a été rejeté). Veuillez récupérer les nouveaux changements depuis le dépôt distant, les intégrer dans cette branche, et essayez à nouveau. Vous pouvez le faire avec git pull ou git pull --rebase","ru:":"Удаленный репозиторий разошелся с вашим локальным репозиторием, поэтому выгрузка ваших изменений не может быть в режиме fast forward (и следовательно ваш push будет отклонён). Пожалуйста, удалите изменения в удаленном репозитории которые, объедините их в эту ветку и попробуйте еще раз. Вы можете сделать это с помощью git pull или git pull --rebase"},"git-error-remote-branch":{__desc__:"One of the error messages for git",en_US:"You cannot execute that command on a remote branch",zh_CN:"你不能在远端分支上执行这个命令呀。",de_DE:"Du kannst diesen Befehl nicht auf einem Remote Branch ausführen",es_AR:"No podés ejecutar ese comando en una rama remota",pt_BR:"Você não pode executar esse comando em um ramo remoto",fr_FR:"Vous ne pouvez exécuter cette commande sur une branche distante",ru:"Вы не можете выполнить эту команду на удаленной ветке"},"git-error-origin-required":{__desc__:"One of the error messages for git",en_US:"An origin is required for that command",zh_CN:"该命令需要一个 origin",de_DE:"Für diesen Befehl wird origin benötigt",es_AR:"Necesitás un origen para ese comando",pt_BR:"É necessário informar uma origem para esse comando",fr_FR:"Une origine est requise pour cette commande",ru:"Origin требуется для этой команды"},"git-error-origin-exists":{__desc__:"One of the error messages for git",en_US:"An origin already exists! You cannot make a new one",zh_CN:"origin 远端已存在。你不能重复创建",de_DE:"origin existiert bereits! Du kannst es nicht nochmal anlegen",es_AR:"¡Ya existe el origen! No podés crear uno nuevo",pt_BR:"A origem já existe! Você não pode criar uma nova",fr_FR:"Une origine existe déjà ! Vous ne pouvez pas en créer une nouvelle",ru:"Origin уже существует! Невозможно создать еще один"},"git-error-branch":{__desc__:"One of the error messages for git",en_US:"You can't delete the master branch, the branch you are on, or things that aren't branches",de_DE:"Du kannst nicht den Branch master, den Branch auf dem du gerade arbeitest oder Refs, die keine Branches sind, löschen",zh_CN:"你不能删除主分支（master），或者你当前所在的分支，或者其他连分支也不是的东西。",zh_TW:"你不能刪除 master branch，或者你當前所在的 branch，或者其它連 branch 都不是的東西。",es_AR:"No podés borrar la rama master, la rama en la que estás, o cosas que no son ramas",pt_BR:"Você não pode apagar o ramo master, nem o ramo em que você está, nem coisas que não sejam ramos",fr_FR:"Vous ne pouvez supprimer la branche master, la branche sur laquelle vous êtes, ou ce qui n'est pas une branche",ru:"Невозможно удалить ветку master, ветку на которой вы сейчас и то что не является веткой"},"git-merge-msg":{__desc__:"The commit message for a merge commit",en_US:"Merge {target} into {current}",de_DE:"Mergen von {target} in {current}",zh_CN:"合并 {target} 到 {current}",zh_TW:"將 {target} 併入 {current}",es_AR:"Mergear {target} a {current}",pt_BR:"Merge de {target} em {current}",fr_FR:"Merge de {target} dans {current}",ru:"Слияние {target} в {current}"},"git-error-rebase-none":{__desc__:"One of the error messages for git",en_US:"No commits to rebase! Everything is a merge commit or changes already applied",de_DE:"Keine Commits für Rebase gefunden! Alle Commits sind Merge Commits oder beinhalten nur schon vorhandene Änderungen",zh_CN:"没有需要 rebase 的提交！都是个合并提交，或者已经 rebase 过了。",zh_TW:"沒有需要 rebase 的 commit！每個都是一個 merge commit 或者修改已經被寫入了",es_AR:"¡No hay commits para rebasear! Son todos commits de merge o cambios ya aplicados",pt_BR:"Não há commits para o rebase! São todos commits de merge ou mudanças já aplicadas",fr_FR:"Aucune commit à rebaser ! Tout est soit un commit de merge, soit des modifications déjà appliquées",ru:"Нет коммитов для rebase! Все в коммите слияния или изменения уже применены"},"git-result-nothing":{__desc__:"The message that explains the result of a git command",en_US:"Nothing to do...",de_DE:"Nichts zu tun ...",zh_CN:"啥鸟事也木有发生...",zh_TW:"沒什麼事情要做...",es_AR:"Nada para hacer...",pt_BR:"Nada a ser feito...",fr_FR:"Rien à effectuer…",ru:"Нечего выполнять..."},"git-result-fastforward":{__desc__:"The message that explains the result of a git command",en_US:"Fast forwarding...",de_DE:"Fast forward...",zh_CN:"快速前进...",zh_TW:"快速前進...",es_AR:"Fast forwardeando...",pt_BR:"Fast forward...",fr_FR:"En avance rapide…"},"git-result-uptodate":{__desc__:"The message that explains the result of a git command",en_US:"Branch already up-to-date",de_DE:"Branch ist bereits aktuell",zh_CN:"分支已经是最新啦",zh_TW:"branch 已經是最新啦",es_AR:"Rama actualmente actualizada",pt_BR:"Ramo já atualizado",fr_FR:"Branche déjà à jour",ru:"Ветка уже обновлена"},"git-error-exist":{__desc__:"One of the error messages for git",en_US:"The ref {ref} does not exist or is unknown",de_DE:"Die Ref {ref} existiert nicht oder ist unbekannt",zh_CN:"索引 {ref} 不存在，或者找不到。",zh_TW:"索引 {ref} 不存在，或者找不到。",es_AR:"La referencia {ref} no existe o es desconocida",pt_BR:"A referência {ref} não existe ou é desconhecida",fr_FR:"La référence {ref} n'existe pas ou est inconnue",ru:"Ссылка {ref} не существует или неизвестна"},"git-error-relative-ref":{__desc__:"One of the error messages for git",en_US:"Commit {commit} doesnot have a {match}",de_DE:"Commit {commit} hat kein {match}",zh_CN:"{commit} 号提交并没有 {match}",zh_TW:"commit {commit} 並沒有 {match}",es_AR:"El commit {commit} no tiene un {match}",pt_BR:"O commit {commit} não tem um {match}",fr_FR:"Le commit {commit} n'a pas de correspondance {match}",ru:"Коммит {commit} не содержит {match}"},"git-warning-detached":{__desc__:"One of the warning messages for git",en_US:"Warning!! Detached HEAD state",de_DE:"Achtung! Detached HEAD Zustand",zh_CN:"警告！现在是脑袋搬家（Detached HEAD）状态",zh_TW:"注意喔！現在的狀態是分離 Head",es_AR:"¡Cuidado! Modo de detached HEAD",pt_BR:"Cuidado! Modo Detached HEAD",fr_FR:"Attention ! HEAD est détaché"},"git-warning-add":{__desc__:"One of the warning messages for git",en_US:"No need to add files in this demo",de_DE:"In dieser Demo müssen keine Dateien hinzugefügt werden",zh_CN:"此演示中不需要添加文件",zh_TW:"此 demo 中不需要再加入檔案",es_AR:"No es necesario hacer add a los archivos en esta demo",pt_BR:"Não é necessário adicionar arquivos neste demo",fr_FR:"Aucun besoin d'ajouter des fichiers dans cette démo"},"git-error-options":{__desc__:"One of the error messages for git",en_US:"Those options you specified are incompatible or incorrect",de_DE:"Die angegebenen Optionen sind inkompatibel oder falsch",zh_CN:"你所指定的参数不兼容或者不准确",zh_TW:"您指定了不相容或錯誤的選項",es_AR:"Las opciones que especificaste son incompatibles o incorrectas",pt_BR:"As opções que você especificou são incompatíveis ou incorretas",fr_FR:"Les options que vous avez spécifiées sont incompatibles ou incorrectes"},"git-error-already-exists":{__desc__:"One of the error messages for git",en_US:"The commit {commit} already exists in your changes set, aborting!",de_DE:"Der Commit {commit} existiert bereit, Abbruch!",zh_CN:"{commit} 号提交已经存在于你的改动集里，正在中止！",zh_TW:"commit {commit} 已經在你的修改的集合裡，正在停止！",es_AR:"El commit {commit} ya existe en tus cambios, ¡abortando!",pt_BR:"O commit {commit} já existe nas suas mudanças, abortando!",fr_FR:"Le commit {commit} existe déjà dans votre ensemble de modifications, opération avortée !"},"git-error-reset-detached":{__desc__:"One of the error messages for git",en_US:"Can't reset in detached head! Use checkout if you want to move",de_DE:"Kann im Detached Head Zustand kein reset ausführen! Bitte checkout zum Bewegen benutzen",zh_CN:"不能在分离的 HEAD 里重置！用 checkout 吧",zh_TW:"不能在分離 HEAD 的狀態中重來！用 checkout 來移動吧",es_AR:"No podés hacer reset en el modo detached. Usá checkout si querés moverte",pt_BR:"Não se pode fazer reset no modo detached. Use checkout se quiser se mover",fr_FR:"On ne peut pas effectuer un reset quand head est détaché. Utilisez checkout pour déplacer"},"git-warning-hard":{__desc__:"One of the warning messages for git",en_US:"The default behavior is a --hard reset, feel free to omit that option!",de_DE:"Das Standardverhalten in dieser Demo ist --hard, du kannst die Option auch weglassen!",zh_CN:"默认的行为是 --hard 硬重置，尽管省略掉那个选项吧！",zh_TW:"預設的行為是 --hard reset，儘量省略掉那個選項吧！",es_AR:"El comportamiento default es un --hard reset, sentite libre de omitir esa opción!",pt_BR:"O comportamento padrão é um reset --hard, fique livre para omitir essa opção!",fr_FR:"Le comportement par défaut est un --hard reset, soyez libre d'omettre cette option !"},"git-error-staging":{__desc__:"One of the error messages for git",en_US:"There is no concept of adding / staging files, so that option or command is invalid!",de_DE:"In dieser Demo gibt es kein Hinzufügen / Vormerken von Dateien, dieser Befehl ist daher ungültig!",zh_CN:"没有添加、缓存文件的必要，所以改选项或者命令是不合法的。",zh_TW:"沒有加入、或者暫存 (staging) 文件的必要，所以改選項或者命令是不合法的。",es_AR:"No existe el concepto de agregar/indexar cambios, así que esa opción o comando es inválido",pt_BR:"Não existe o conceito de adicionar/indexar mudanças, de forma que essa opção ou comando é inválida",fr_FR:"Il n'y a pas le concept d'ajouter / mettre en staging, donc cette option ou commande est invalide"},"git-revert-msg":{__desc__:"Message for reverting git command",en_US:"Reverting {oldCommit}: {oldMsg}",de_DE:"Reverte {oldCommit}: {oldMsg}",zh_CN:"撤销 {oldCommit}：{oldMsg}",zh_TW:"還原 {oldCommit}：{oldMsg}",es_AR:"Revirtiendo {oldCommit}: {oldMsg}",pt_BR:"Revertendo {oldCommit}: {oldMsg}",fr_FR:"Revert {oldCommit}: {oldMsg}"},"git-error-args-many":{__desc__:"One of the error messages for git",en_US:"I expect at most {upper} argument(s) for {what}",de_DE:"Ich benötige maximal {upper} Argument(e) für {what}",zh_CN:"{what} 期望最多 {upper} 个参数",zh_TW:"{what} 期望最多 {upper} 個參數",es_AR:"Espero como máximo {upper} parámetros para {what}",pt_BR:"Espero no máximo {upper} parâmetros para {what}",fr_FR:"J'attends au plus {upper} argument(s) pour {what}"},"git-error-args-few":{__desc__:"One of the error messages for git",en_US:"I expect at least {lower} argument(s) for {what}",de_DE:"Ich benötige mindestens {lower} Argument(e) für {what}",zh_CN:"{what} 期望最少 {lower} 个参数",zh_TW:"{what} 期望最少 {lower} 個參數",es_AR:"Espero al menos {lower} parámetros para {what}",pt_BR:"Espero pelo menos {lower} parâmetros para {what}",fr_FR:"J'attends au moins {upper} argument(s) pour {what}"},"git-error-no-general-args":{__desc__:"One of the error messages for git",en_US:"That command accepts no general arguments",de_DE:"Dieser Befehl akzeptiert keine allgemeinen Argumente",zh_CN:"该命令不接收参数",zh_TW:"該指令不接受一般參數",es_AR:"Ese comando no acepta parámetros comunes",pt_BR:"Este comando não aceita parâmetros gerais",fr_FR:"Cette commande n'accepte aucun argument général"},"copy-tree-string":{__desc__:"The prompt to copy the tree when sharing",en_US:"Copy the tree string below",de_DE:"Kopiere die folgende Baum-Zeichenkette",zh_CN:"拷贝下面的树字符串",zh_TW:"複製下方的樹狀字串",es_AR:"Copiá el código de acá abajo",pt_BR:"Copie o código abaixo",fr_FR:"Copiez la chaîne d'arbre ci-dessous"},"learn-git-branching":{__desc__:"The title of the app, with spaces",en_US:"Learn Git Branching",de_DE:"Learn Git Branching",ja:"日本語版リポジトリ",ko:"Git 브랜치 배우기",zh_CN:"学习Git分支",zh_TW:"學習 git 分支",es_AR:"Aprendé a Branchear en Git",pt_BR:"Learn Git Branching",fr_FR:"Apprenez Git Branching"},"select-a-level":{__desc__:"The prompt to select a level on the drop down view",en_US:"Select a level",de_DE:"Level auswählen",zh_CN:"选择一关",zh_TW:"選擇其中一關",es_AR:"Seleccioná un nivel",pt_BR:"Selecione um nível",fr_FR:"Choisissez un niveau"},"branch-name-short":{__desc__:"When branch names get too long, we need to truncate them. This is the warning for that",en_US:'Sorry, we need to keep branch names short for the visuals. Your branch name was truncated to 9 characters, resulting in "{branch}"',de_DE:'Tut mir leid, aber aus Gründen der Darstellung müssen wir die Branch-Namen kurz halten. Dein Branch-Name wurde auf 9 Zeichen gekürzt und heißt daher jetzt "{branch}"',zh_CN:'抱歉，为了显示的需要，我们需要一个短些的分支名称。您使用的将被截断到9个字符，即"{branch}"',zh_TW:'抱歉，為了顯示的需要，我們需要一個短一點的 branch 名稱。您使用的將會被截斷到剩下9個字元，即"{branch}"',es_AR:'Perdón, necesitamos mantener los nombres de los branches cortos para visualizarlos. El nombre de tu rama se truncó a 9 caracteres, resultando en "{branch}"',pt_BR:'Desculpe, precisamos manter os nomes dos ramos curtos para visualizá-los. O nome do seu ramo foi truncado para 9 caracteres, resultando em "{branch}"',fr_FR:'Désolé, nous devons garder les noms de branches courts pour la visualisation. Votre nom de branche a été tronqué à 9 caractères, devenant "{branch}"'},"bad-branch-name":{__desc__:"When the user enters a branch name thats not ok",en_US:'That branch name "{branch}" is not allowed!',de_DE:'Der Branch-Name "{branch}" ist nicht erlaubt!',zh_CN:'不能给分支起这个名字 "{branch}"',zh_TW:'不能给 branch 起這個名字 "{branch}"',es_AR:'El nombre "{branch}" no está permitido para los branches',pt_BR:'Um ramo não pode ser chamado de "{branch}"!',fr_FR:'Ce nom de branche "{branch}" n\'est pas autorisé'},"bad-tag-name":{__desc__:"When the user enters a tag name thats not ok",en_US:'That tag name "{tag}" is not allowed!',zh_CN:"该标签名 “{tag}” 不被接受。233",es_AR:'El nombre "{tag}" no está permitido para los tags',pt_BR:'Uma tag não pode ser chamada de "{tag}"!',de_DE:'Der Tag-Name "{tag}" ist nicht erlaubt!',fr_FR:'Le nom de tag "{tag}" n\'est pas autorisé!'},"option-not-supported":{__desc__:"When the user specifies an option that is not supported by our demo",en_US:'The option "{option}" is not supported!',de_DE:'Die  Option "{option}" wird nicht unterstützt!',zh_CN:'不支持选项 "{option}"',zh_TW:'不支援的選項 "{option}"',es_AR:"La opción {option} no está soportada",pt_BR:"A opção {option} não é suportada",fr_FR:"L'option \"{option}\" n'est pas supportée"},"git-usage-command":{__desc__:"The line that shows how to format a git command",en_US:"git <command> [<args>]",de_DE:"git <Befehl> [<Argumente>]",zh_CN:"git <命令> [<参数>]",zh_TW:"git <指令> [<參數>]",es_AR:"git <comando> [<parametros>]",pt_BR:"git <comando} [<parâmetros>]",fr_FR:"git <commande> [<arguments>]"},"git-supported-commands":{__desc__:"In the git help command, the header above the supported commands",en_US:"Supported commands:",de_DE:"Unterstützte Befehle:",zh_CN:"支持的命令有:",zh_TW:"支援的指令有：",es_AR:"Comandos soportados:",pt_BR:"Comandos suportados:",fr_FR:"Commandes supportées"},"git-usage":{__desc__:"In the dummy git output, the header before showing all the commands",en_US:"Usage:",de_DE:"Benutzung:",zh_CN:"使用:",zh_TW:"用法：",es_AR:"Uso:",pt_BR:"Uso:",fr_FR:"Utilisation :"},"git-version":{__desc__:"The git version dummy output, kind of silly. PCOTTLE is my unix name but feel free to put yours instead",en_US:"Git Version PCOTTLE.1.0",de_DE:"Git Version PCOTTLE.1.0.jbr",zh_CN:"Git 版本 PCOTTLE.1.0",zh_TW:"Git 版本 PCOTTLE.1.0",es_AR:"Git Versión PCOTTLE.1.0",pt_BR:"Git versão PCOTTLE.1.0",fr_FR:"Git version PCOTTLE.1.0"},"flip-tree-command":{__desc__:"when the tree is being flipped",en_US:"Flipping tree...",zh_CN:"翻转树中...",es_AR:"Invirtiendo el árbol...",pt_BR:"Invertendo a árvore...",fr_FR:"Inversion de l'arbre..."},"refresh-tree-command":{__desc__:"when the tree is visually refreshed",en_US:"Refreshing tree...",de_DE:"Aktualisiere Baum ...",zh_CN:"正在刷新树结构...",zh_TW:"正在更新樹狀結構...",es_AR:"Refrezcando el árbol...",pt_BR:"Atualizando a árvore...",fr_FR:"Actualisation de l'arbre…"},"locale-command":{__desc__:"when the locale is set to something",en_US:"Locale set to {locale}",de_DE:"Locale auf {locale} gesetzt",zh_CN:"语言更改为 {locale}",zh_TW:"語系設為 {locale}",es_AR:"Localización actualizada a {locale}",pt_BR:"Língua trocada para {locale}",fr_FR:"Langue changée à {locale}"},"locale-reset-command":{__desc__:"when the locale is reset",en_US:"Locale reset to default, which is {locale}",de_DE:"Locale auf Standard zurückgesetzt, also {locale}",zh_CN:"语言重置为默认的 {locale}",zh_TW:"還原為預設語系 {locale}",es_AR:"Localización vuelta al default, que es {locale}",pt_BR:"Língua retornada para a padrão, que é {locale}",fr_FR:"Langue remise par défaut, qui est {locale}"},"show-command":{__desc__:'command output title from "show"',en_US:"Please use one of the following commands for more info:",zh_TW:"請使用下列其中一個指令取得更多資訊：",zh_CN:"请使用以下命令以了解更多",de_DE:"Bitte benutze einen der folgenden Befehle um mehr Informationen zu bekommen:",es_AR:"Usá alguno de estos comandos para tener más información:",pt_BR:"Use algum destes comandos para ter mais informações:",fr_FR:"Merci d'utiliser une des commandes suivantes pour obtenir plus d'info"},"show-all-commands":{__desc__:'command output title from "show commands"',en_US:"Here is a list of all the commmands available:",zh_TW:"這份清單列出所有可用指令：",zh_CN:"该列表列出了所有可用的指令：",de_DE:"Hier ist eine Liste aller verfügbarer Befehle:",es_AR:"Esta es una lista de los comandos disponibles:",pt_BR:"Esta é uma lista dos comandos disponíveis:",fr_FR:"Ci-dessous est la liste de toutes les commandes disponibles :"},"cd-command":{__desc__:"dummy command output for the command in the key",en_US:'Directory changed to "/directories/dont/matter/in/this/demo"',de_DE:'Verzeichnis gewechselt zu "/verzeichnisse/sind/in/dieser/demo/latte"',zh_CN:'目录切换到 "/directories/dont/matter/in/this/demo"',zh_TW:'目錄切換到 "/directories/dont/matter/in/this/demo"',es_AR:'Directorio cambiado a "/los/directorios/no/importan/en/esta/demo"',pt_BR:'Diretório mudado para "/diretorios/nao/importam/neste/demo"',fr_FR:'Répertoire changé à "/directories/dont/matter/in/this/demo" (les répertoires ne servent à rien dans cette démo)'},"ls-command":{__desc__:"Dummy command output for the command in the key",en_US:"DontWorryAboutFilesInThisDemo.txt",de_DE:"VergissDateienInDieserDemo.txt",zh_CN:"DontWorryAboutFilesInThisDemo.txt (译: 在试验里不用担心文件.txt)",zh_TW:"DontWorryAboutFilesInThisDemo.txt （譯註：在 demo 裡不用擔心檔案）",es_AR:"NoTePreocupesPorLosArchivosEnEstaDemo.txt",pt_BR:"NaoSePreocupeComNomesDeArquivoNesteDemo.txt",fr_FR:"DontWorryAboutFilesInThisDemo.txt (ne vous préoccupez pas des noms de fichier dans cette démo)"},"mobile-alert":{__desc__:"When someone comes to the site on a mobile device, they can not input commands so this is a nasty alert to tell them",en_US:"LGB can't receive input on mobile, visit on desktop! it's worth it :D",de_DE:"LGB ist nicht mit mobilen Endgeräten kompatibel, nutz es vom Desktop! Es lohnt sich :D",zh_CN:"无法在移动设备/平板上调出键盘 :( 请试试桌面版 :D",zh_TW:"無法在行動裝置上叫出鍵盤，請改用桌面版！",es_AR:"LGB no puede recibir comandos en dispositivos móviles. Visitanos desde una desktop, ¡lo vale! :D",pt_BR:"Provavelmente você não vai conseguir digitar comandos no celular, neste caso tente acessar de um computador",fr_FR:"Impossible de faire apparaître le clavier sur mobile / tablette :( Essayez de passer sur un ordinateur de bureau :D"},"share-tree":{__desc__:"When you export a tree, we want you to share the tree with friends",en_US:'Share this tree with friends! They can load it with "import tree"',de_DE:'Teile diesen git-Baum mit Freunden! Sie können ihn mit "import tree" laden',zh_CN:'与你的好友分享提交树！他们可以用 "import tree" 加载它',zh_TW:'與你的好友分享這棵樹！他們可以用 "import tree" 來載入它',es_AR:'¡Compartí este árbol con amigos! Pueden cargarlo con "import tree"',pt_BR:'Compartilhe esta árvore com seus amigos! Eles podem carregá-la com "import tree"',fr_FR:'Partagez cet arbre avec vos amis ! Ils peuvent le charger avec "import tree"'},"paste-json":{__desc__:"When you are importing a level or tree",en_US:"Paste a JSON blob below!",de_DE:"Füg einen JSON-Blob unten ein!",zh_CN:"在下边粘贴一个 JSON 串",zh_TW:"在下方貼上一串 JSON",es_AR:"¡Pegá un blob JSON abajo!",pt_BR:"Cole o JSON abaixo!",fr_FR:"Collez un blob JSON ci-dessous !"},"solved-map-reset":{__desc__:"When you reset the solved map to clear your solved history, in case someone else wants to use your browser",en_US:"Solved map was reset, you are starting from a clean slate!",de_DE:"Gelöste Karte wurde zurückgesetzt, du fängst mit einem leeren Blatt an!",zh_CN:"解决列表已重置，您现在从零开始了",zh_TW:"過關地圖已經重新設置，您現在從零開始了",es_AR:"El mapa resuelto fue eliminado, estás arrancando desde un estado limpio",pt_BR:"Mapa de resolvidos descartado, você está começando com ficha limpa!",fr_FR:"La carte des niveaux résolus a été effacée, vous repartez de zéro !"},"level-cant-exit":{__desc__:"When the user tries to exit a level when they are not in one",en_US:'You are not in a level! You are in a sandbox, start a level with "levels"',de_DE:'Du bist nicht in einem Level! Du bist im Sandkasten-Modus, starte einen Level mit "levels"',zh_CN:'您没在关卡中！您在沙盒中，要开始关卡请输入 "levels"',zh_TW:'您沒在關卡中！您在沙盒中，要開始關卡請輸入 "levels"',es_AR:'¡No estás en un nivel! Estás en el sandbox, comenzá un nivel usando "levels"',pt_BR:'Você não está em um nível! Você está no sandbox, comece um nível com "levels"',fr_FR:'Vous n\'êtes pas dans un niveau ! Vous êtes dans le mode bac à sable, commencez un niveau avec "levels"'},"level-no-id":{__desc__:"When you say an id but that level doesnt exist",en_US:'A level for that id "{id}" was not found! Opening up a level selection view',de_DE:'Konnte keinen Level mit der ID "{id}" finden! Öffne einen Level-Auswahldialog',zh_CN:'没找到id为 "{id}" 的关卡！打开关卡选择框',zh_TW:'找不到 id 為 "{id}" 的關卡！開啟關卡選擇視窗',es_AR:"No se encontró ningún nivel {id}. Abriendo la vista de selección de niveles...",pt_BR:'O nível "{id}" não existe! Abrindo uma caixa de seleção de nível',fr_FR:"Le niveau dont l'identifiant est {id} n'a pas été trouvé ! Ouverture de la vue de sélection des niveaux"},"undo-stack-empty":{__desc__:"The undo command can only undo back until the last time the level was reset or the beginning of the level",en_US:"The undo stack is empty!",de_DE:"Die Undo-Liste ist leer!",zh_CN:"还没有什么可以撤销",zh_TW:"還沒有什麼可以取消",es_AR:"No hay comandos que deshacer",pt_BR:"Você já desfez tudo!",fr_FR:"La pile d'annulation est vide !"},"already-solved":{__desc__:"When you play in a level that is already solved",en_US:'You have already solved this level, try other levels with "levels" or go back to sandbox with "sandbox"',de_DE:'Du hast diesen Level bereits gelöst, probier einen anderen Level mit "levels" aus oder geh in den Sandkasten-Modus mit "sandbox"',zh_CN:'你已经解决了本关，输入 "levels" 尝试其他关卡，或者输入 "sandbox" 回到沙盒中',zh_TW:'你已經解决了本關，輸入 "levels" 嘗試其他關卡，或者輸入 "sandbox" 回到沙盒中',es_AR:'Ya resolviste este nivel, probá otros usando "levels" o volvé al sandbox usando "sandbox"',pt_BR:'Você já resolveu este nível, tente outros com "levels" ou volte ao sandbox com "sandbox"',fr_FR:'Vous avez déjà résolu ce niveau, essayez d\'autres niveaux avec "levels" ou revenez au bac à sable avec "sandbox"'},"command-disabled":{__desc__:"When you try a command that is disabled",en_US:"That git command is disabled for this level!",de_DE:"Dieser git-Befehl ist für diesen Level deaktiviert!",zh_CN:"该命令在本关不允许使用！",zh_TW:"本關禁止使用該 git 指令！",es_AR:"¡Ese comando de git está deshabilitado para este nivel!",pt_BR:"Achou que seria fácil assim? Desabilitamos esse comando durante este nível, só para dificultar ;-)",fr_FR:"Cette commande git est désactivée pour ce niveau !"},"share-json":{__desc__:"when you have made the level, prompt to share this",en_US:"Here is the JSON for this level! Share it with somenoe or send it to me on Github",de_DE:"Hier ist das JSON für diesen Level! Teil es mit jemandem or schick es mir über Github",zh_CN:"这是一个关卡定义 JSON ！您可以分享它或者发到我的 Github 上",zh_TW:"這是本關的 JSON！您可以分享給別人，或是送到 Github 上給我",es_AR:"Este es el JSON de este nivel. Compartilo con quien quieras o mandámelo por Github",pt_BR:"Aqui está o JSON para este nível! Compartilhe com alguém ou me envie pelo Github",fr_FR:"Voici le JSON pour ce niveau ! Partagez-le avec quelqu'un ou envoyez-le moi sur Github"},"want-start-dialog":{__desc__:"prompt to add a start dialog",en_US:"You have not specified a start dialog, would you like to add one?",de_DE:"Du hast noch keinen Einführungs-Dialog geschrieben, willst du einen hinzufügen?",zh_CN:"您还没有定义一开始的介绍，是否添加一个？",zh_TW:"尚未指定開始對話視窗，是否立即新增？",es_AR:"No especificaste un mensaje de inicio, ¿querés agregar uno?",pt_BR:"Você não especificou uma mensagem de início, quer colocar uma?",fr_FR:"Vous n'avez pas spécifié de dialogue de départ, voulez-vous en ajouter un ?"},"want-hint":{__desc__:"prompt to add a hint",en_US:"You have not specified a hint, would you like to add one?",de_DE:"Du hast noch keinen Hinweis geschrieben, magst du einen hinzufügen?",zh_CN:"您还没有定义提示，是否添加一个？",zh_TW:"尚未指定提示，是否立即新增？",es_AR:"No especificaste ninguna pista, ¿querés agregar alguna?",pt_BR:"Você não especificou uma dica, quer colocar uma?",fr_FR:"Vous n'avez pas spécifié d'indice, voulez-vous en ajouter un ?"},"prompt-hint":{__desc__:"prompt for hint",en_US:"Enter the hint for this level, or leave this blank if you do not want to include one",de_DE:"Gib den Hinweis für diesen Level an, oder lass es leer wenn du keinen hinzufügen willst",zh_CN:"请输入关卡提示，或者故意留空",zh_TW:"請輸入關卡提示，或者故意留空",es_AR:"Ingresá una pista para este nivel, o dejalo en blanco si no querés incluir ninguna",pt_BR:"Colocque uma dica para este nível, ou deixe em branco se não quiser incluir",fr_FR:"Entrez l'indice pour ce niveau, ou laissez-le vide pour ne pas l'inclure"},"prompt-name":{__desc__:"prompt for level name",en_US:"Enter the name for the level",de_DE:"Gib den Namen für diesen Level an",zh_CN:"输入关卡名",zh_TW:"請輸入關卡名稱",es_AR:"Ingresá el nombre del nivel",pt_BR:"Coloque o nome do nível",fr_FR:"Entrez le nom pour ce niveau"},"solution-empty":{__desc__:"If you define a solution without any commands, aka a level that is solved without doing anything",en_US:"Your solution is empty!! Something is amiss",de_DE:"Deine Auflösung ist leer! Hier fehlt etwas",zh_CN:"你的解法是空的!! 这应该是出错了",zh_TW:"您的解法是空的！這一定是哪裡出錯了",es_AR:"¡Tu solución está vacía! Algo hay que hacer",pt_BR:"Sua solução está vazia! O aprendiz deveria ter que fazer alguma coisa",fr_FR:"Votre solution est vide !! Quelque chose ne tourne pas rond"},"define-start-warning":{__desc__:"When you define the start point again, it overwrites the solution and goal so we add a warning",en_US:"Defining start point... solution and goal will be overwritten if they were defined earlier",de_DE:"Lege Start fest ... Auflösung und Ziel werden gelößcht, falls sie schon festgelegt worden waren",zh_CN:"定义开始点... 解决方法和目标会被新的替代",zh_TW:"正在定義起始點...先前定義的解法和目標會被覆蓋掉",es_AR:"Estableciendo el punto de inicio... La solución y el objetivo serán sobreescritos si ya habían sido definidos",pt_BR:"Esbelecendo o ponto de início... a solução e o objetivo serão sobrescritos caso já existirem",fr_FR:"Redéfinition du point de départ… la solution et la cible seront écrasés s'ils ont déjà été définis"},"help-vague-level":{__desc__:"When you are in a level and you say help, its vague and you need to specify",en_US:'You are in a level, so multiple forms of help are available. Please select either "help level" to learn more about this lesson, "help general" for using Learn GitBranching, or "objective" to learn about how to solve the level.',de_DE:'Du befindest dich in einem Level, daher gibt es verschiedene Hilfen. Gib "help level" ein um mehr úber diesen Level zu erfahren, "help general" um zu sehen wie Learn Git Branching bedient wird, oder "objective" um das Ziel dieses Levels zu erfahren.',zh_CN:'您正在关卡中，这里有多种形式的帮助，请选择 "help level" (关卡帮助)或 "help general" (一般帮助)',zh_TW:'您正在進行關卡中，這裡有多種不同型式的幫助，請選擇 "help level" 來了解這個關卡，或者是選擇 "help general" 來學習如何使用 Learn GitBranching，或者是選擇 "objective" 來學習如何解決這個關卡',es_AR:'Estás en un nivel, por lo que hay varios tipos de ayuda. Por favor elegí entre "help level" para aprender algo más sobre esta lección, "help general" para ayuda sobre el uso de Learn GitBranching, o "objective" para aprender a resolver este nivel.',pt_BR:'Você está em um nível, então há vários tipos de ajuda. Selecione "help level" para aprender mais sobre esta lição, "help general" para aprender a usar o Learn GitBranching, ou "objective" ver como resolver o nível.',fr_FR:'Vous êtes dans un niveau, donc plusieurs formes d\'aide sont disponibles. Merci de sélectionner soit "help level" pour en apprendre plus sur cette leçon, "help general" pour l\'utilisation de Learn GitBranching, ou "objective" pour apprendre comment résoudre le niveau'},"help-vague-builder":{__desc__:"When you are in a level builder, the help command is vague so you need to specify what you mean",en_US:'You are in a level builder, so multiple forms of help are available. Please select either "help general" or "help builder"',de_DE:'Du befindest dich im Level-Editor, daher gibt es verschiedene Hilfen. Gib bitte "help general" oder "help builder" ein',zh_CN:'您正在进行关卡构建中，这里有多种形式的帮助，请选择 "help general" (一般帮助)或 "help builder" (关卡构建帮助)',zh_TW:'您正在進行關卡構建中，這裡有多種不同型式的幫助，請選擇 "help general" （一般幫助）或 "help builder" （製造關卡的幫助）',es_AR:'Estás en el constructor de niveles, por lo que hay varios tipos de ayuda. Elegí entre "help general" para ayuda sobre Learn GitBranching y "help builder" para ayuda sobre el constructor de niveles',pt_BR:'Você está no construtor de nívels, então há vários tipos de ajuda. Selecione "help general" ou "help builder"',fr_FR:'Vous êtes dans l\'éditeur de niveaux, donc plusieurs formes d\'aide sont disponibles. Merci de sélectionner soit "help general" soit "help builder"'},"show-goal-button":{__desc__:"button label to show goal",en_US:"Show Goal",zh_TW:"顯示目標",zh_CN:"显示目标",fr_FR:"Afficher les cibles",pt_BR:"Mostrar objetivo",es_AR:"Mostrar objetivo"},"hide-goal-button":{__desc__:"button label to hide goal",en_US:"Hide Goal",fr_FR:"Cacher les cibles",zh_TW:"隱藏目標",zh_CN:"隐藏目标",pt_BR:"Ocultar objetivo",es_AR:"Ocultar obetivo"},"goal-to-reach":{__desc__:"title of window that shoes the goal tree to reach",en_US:"Goal To Reach",de_DE:"Ziel",zh_CN:"目标",zh_TW:"目標",es_AR:"Objetivo a cumplir",pt_BR:"Objetivo a cumprir",fr_FR:"Cible à atteindre"},"goal-only-master":{__desc__:"the helper message for the window that shows the goal tree when the goal will only be compared using the master branch",en_US:'<span class="fwber">Note:</span> Only the master branch will be checked in this level. The other branches are simply for reference (shown as dashed labels below). As always, you can hide this dialog with "hide goal"',fr_FR:'<span class="fwber">Note:</span> Seulement la branche master peut être check id à ce niveau. Les autres branches sont simplement une référence (Montré avec un tiret). Comme toujours, vous pouvez cacher cette fenêtre avec "Cacher les objectifs"',de_DE:'<span class="fwber">Hinweis:</span> In diesem Level wird nur der Branch master geprüft. Die anderen Branches dienen nur als Vergleichsbasis (als gestrichelte Bezeichner dargestellt). Wie immer kannst du diese Meldung mit "hide goal" ausblenden',es_AR:'<span class="fwber">Nota:</span> Sólo la rama master va a ser chequeada en este nivel. Las otras ramas sólo son para referencia. Como siempre, podés ocultar este mensaje con "hide goal"',pt_BR:'<span class="fwber">Nota:</span> Apenas o ramo master será verificado neste nível. Os outros ramos (dentro das caixas clareadas) são somente para referência. Como sempre, você pode ocultar esta janela com "hide goal"',zh_CN:'<span class="fwber">注意:</span>本关卡中，只检查 master 分支，其他分支只是用作 reference 存在（以虚线标签表示）。照常，你可以用 “hide goal” 来隐藏此窗口。',zh_TW:'在這個關卡中，只有 master branch 會被檢查，別的 branch 只是用來做為 reference （下面用虛線符號表示）。一如往常，你可以利用 "hide goal" 來隱藏這個對話視窗'},"hide-goal":{__desc__:"the helper message for the window that shows the goal tree",en_US:'You can hide this window with "hide goal"',de_DE:'Du kannst diese Meldung mit "hide goal" ausblenden',zh_CN:'你可以通过命令 "hide goal" 关闭这个窗口',zh_TW:'你可以透過 "hide goal" 關閉這個視窗',es_AR:'Podés ocultar esta ventana con "hide goal"',pt_BR:'Você pode ocultar esta janela com "hide goal"',fr_FR:'Vous pouvez masquer cette fenêtre avec "hide goal"'},"hide-start":{__desc__:"The helper message for the window that shows the start tree for a level",en_US:'You can hide this window with "hide start"',de_DE:'Du kannst diese Meldung mit "hide start" ausblenden',zh_CN:'你可以通过命令 "hide start" 关闭这个窗口',zh_TW:'你可以透過 "hide start" 關閉這個視窗',es_AR:'Podés ocultar esta ventana con "hide start"',pt_BR:'Você pode ocultar esta janela com "hide start"',fr_FR:'Vous pouvez masquer cette fenêtre avec "hide start"'},"level-builder":{__desc__:"The name for the environment where you build levels",en_US:"Level Builder",de_DE:"Level-Editor",zh_CN:"关卡生成器",zh_TW:"關卡產生器",es_AR:"Constructor de niveles",pt_BR:"Construtor de níveis",fr_FR:"Éditeur de niveaux"},"no-start-dialog":{__desc__:"when the user tries to open a start dialog for a level that does not have one",en_US:"There is no start dialog to show for this level!",de_DE:"Es gibt keinen Einführungs-Dialog für diesen Level!",zh_CN:"介绍? 这关真没有!",zh_TW:"這關沒有介紹!",es_AR:"¡No hay mensaje de inicio para este nivel!",pt_BR:"Não há mensagem de início para este nível!",fr_FR:"Il n'y a aucun dialogue de départ à afficher pour ce niveau !"},"no-hint":{__desc__:"when no hint is available for a level",en_US:"Hmm, there doesn't seem to be a hint for this level :-/",de_DE:"Hm, es gibt anscheinend keinen Hinweis für diesen Level :-/",zh_CN:"提示？嗯，这关真没有哎~ :-/",zh_TW:"嗯‧‧‧這關沒有提示 :-/",es_AR:"Mmm... Pareciera no haber pistas para este nivel :-/",pt_BR:"Hmm, não existe nenhuma pista para este nível :-/",fr_FR:"Hum, il ne semble pas y avoir d'indice pour ce niveau :-/"},"error-untranslated-key":{__desc__:"This error happens when we are trying to translate a specific key and the locale version is mission",en_US:"The translation for {key} does not exist yet :( Please hop on github and offer up a translation!",de_DE:"Die Übersetzung für {key} existiert noch nicht :( Falls du eine hast, bitte teil sie mit auf Github mit!",zh_CN:"还没翻译 {key} :( 请在 Github 上贡献您的翻译!",zh_TW:"還沒翻譯 {key} :( 請在 Github 上貢獻您的翻譯!",es_AR:"Aún no hay traducción para {key} :( ¡Metete en Github y sugerí una! :)",pt_BR:"Não existe tradução para {key} :( Pule no Github e sugira uma! :)",fr_FR:"La traduction pour {key} n'existe pas encore :( Venez sur Github pour en offrir une !"},"error-untranslated":{__desc__:"The general error when we encounter a dialog that is not translated",en_US:"This dialog or text is not yet translated in your locale :( Hop on github to aid in translation!",de_DE:"Dieser Dialog oder Text ist noch nicht in deine Sprache übersetzt. :( Schau auf Github vorbei um bei der Übersetzung zu helfen!",zh_CN:"这段对话还没有被翻译成您的语言 :( 欢迎在 Github 上贡献你的翻译!",zh_TW:"這段對話尚未翻成您的語言 :( 歡迎到 Github 貢獻翻譯！",es_AR:"Este mensaje o texto aún no fue traducido a tu idioma :( ¡Metete en Github y ayudanos a traducirlo!",pt_BR:"Esta mensagem ou texto não foi traduzida para Português :( Ajude-nos a traduzir no Github!",fr_FR:"Ce message n'a pas encore été traduit dans votre langue :( Venez sur Github aider à la traduction !"}}
},{}],38:[function(a,b,c){var d=a("underscore"),e=(a("backbone"),a("q")),f=a("../util"),g=a("../app"),h=a("../intl"),i=a("../util/errors"),j=a("../visuals/visualization").Visualization,k=(a("../level/parseWaterfall").ParseWaterfall,a("../level").Level),l=a("../stores/LocaleStore"),m=a("../stores/LevelStore"),n=(a("../models/commandModel").Command,a("../git/gitShim").GitShim,a("../views/multiView").MultiView,a("../views").CanvasTerminalHolder),o=a("../views").ConfirmCancelTerminal,p=(a("../views").NextLevelConfirm,a("../views").LevelToolbar),q=a("../views/builderViews").MarkdownPresenter,r=a("../views/builderViews").MultiViewBuilder,s=(a("../views/builderViews").MarkdownGrabber,{"define goal":/^define goal$/,"define name":/^define name$/,"help builder":/^help builder$/,"define start":/^define start$/,"edit dialog":/^edit dialog$/,"show start":/^show start$/,"hide start":/^hide start$/,"define hint":/^define hint$/,finish:/^finish$/}),t=f.genParseCommand(s,"processLevelBuilderCommand"),u=k.extend({initialize:function(b){b=b||{},b.level={};var c=l.getLocale();b.level.startDialog={},b.level.startDialog[c]={childViews:h.getDialog(a("../dialogs/levelBuilder"))};var d;b.editLevel&&(m.getLevel(b.editLevel),b.level=d),u.__super__.initialize.apply(this,[b]),b.editLevel?(this.startDialogObj=d.startDialog[c],this.definedGoal=!0):(this.startDialogObj=void 0,this.definedGoal=!1),delete this.treeCompare,delete this.solved},initName:function(){this.levelToolbar=new p({name:h.str("level-builder"),parent:this})},initGoalData:function(){this.options.editLevel||(this.level.goalTreeString='{"branches":{"master":{"target":"C1","id":"master"},"makeLevel":{"target":"C2","id":"makeLevel"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"makeLevel","id":"HEAD"}}',this.level.solutionCommand="git checkout -b makeLevel; git commit"),u.__super__.initGoalData.apply(this,arguments)},minimizeGoal:function(a,b){this.doBothVis("hide"),this.goalWindowPos=a,this.goalWindowSize=b,this.levelToolbar.$goalButton.text(h.str("show-goal-button")),$("#goalPlaceholder").is(":visible")&&($("#goalPlaceholder").hide(),this.mainVis.myResize())},doBothVis:function(a){this.startVis&&this.startVis[a].call(this.startVis),this.goalVis&&this.goalVis[a].call(this.goalVis)},resizeGoal:function(){this.doBothVis("myResize")},initStartVisualization:function(){return this.startCanvasHolder=new n({parent:this,additionalClass:"startTree",text:h.str("hide-start")}),this.startVis=new j({el:this.startCanvasHolder.getCanvasLocation(),containerElement:this.startCanvasHolder.getCanvasLocation(),treeString:this.level.startTree,noKeyboardInput:!0,smallCanvas:!0,noClick:!0}),this.startCanvasHolder},startOffCommand:function(){g.getEventBaton().trigger("commandSubmitted","echo :D")},objectiveDialog:function(a,b){var c=[a,b,void 0===this.startDialogObj?null:{startDialog:{en_US:this.startDialogObj}}];u.__super__.objectiveDialog.apply(this,c)},initParseWaterfall:function(a){u.__super__.initParseWaterfall.apply(this,[a]),this.parseWaterfall.addFirst("parseWaterfall",t),this.parseWaterfall.addFirst("instantWaterfall",this.getInstantCommands())},buildLevel:function(a,b){this.exitLevel(),setTimeout(function(){g.getSandbox().buildLevel(a,b)},1.5*this.getAnimationTime())},getInstantCommands:function(){return[[/^help$|^\?$/,function(){throw new i.CommandResult({msg:h.str("help-vague-builder")})}]]},takeControl:function(){g.getEventBaton().stealBaton("processLevelBuilderCommand",this.processLevelBuilderCommand,this),u.__super__.takeControl.apply(this)},releaseControl:function(){g.getEventBaton().releaseBaton("processLevelBuilderCommand",this.processLevelBuilderCommand,this),u.__super__.releaseControl.apply(this)},showGoal:function(){this.hideStart(),u.__super__.showGoal.apply(this,arguments)},showStart:function(a,b){this.hideGoal(),this.showSideVis(a,b,this.startCanvasHolder,this.initStartVisualization)},resetSolution:function(){this.gitCommandsIssued=[],this.level.solutionCommand=void 0},hideStart:function(a,b){this.hideSideVis(a,b,this.startCanvasHolder)},defineStart:function(a,b){this.hideStart(),a.addWarning(h.str("define-start-warning")),this.resetSolution(),this.level.startTree=this.mainVis.gitEngine.printTree(),this.mainVis.resetFromThisTreeNow(this.level.startTree),this.showStart(a,b)},defineGoal:function(a,b){return this.hideGoal(),this.gitCommandsIssued.length?(this.definedGoal=!0,this.level.solutionCommand=this.gitCommandsIssued.join(";"),this.level.goalTreeString=this.mainVis.gitEngine.printTree(),this.initGoalVisualization(),this.showGoal(a,b),void 0):(a.set("error",new i.GitError({msg:h.str("solution-empty")})),b.resolve(),void 0)},defineName:function(a,b){this.level.name={en_US:prompt(h.str("prompt-name"))},a&&a.finishWith(b)},defineHint:function(a,b){this.level.hint={en_US:prompt(h.str("prompt-hint"))},a&&a.finishWith(b)},editDialog:function(a,b){var c=e.defer();this.currentBuilder=new r({multiViewJSON:this.startDialogObj,deferred:c}),c.promise.then(d.bind(function(a){this.startDialogObj=a},this)).fail(function(){}).done(function(){a?a.finishWith(b):b.resolve()})},finish:function(a,b){if(!(this.options.editLevel||this.gitCommandsIssued.length&&this.definedGoal))return a.set("error",new i.GitError({msg:h.str("solution-empty")})),b.resolve(),void 0;for(;!this.level.name;)this.defineName();var c=e.defer(),f=c.promise;if(void 0===this.level.hint){var g=e.defer();f=f.then(function(){return g.promise});var j=new o({markdowns:[h.str("want-hint")]});j.getPromise().then(d.bind(this.defineHint,this)).fail(d.bind(function(){this.level.hint={en_US:""}},this)).done(function(){g.resolve()})}if(void 0===this.startDialogObj){var k=e.defer();f=f.then(function(){return k.promise});var l=new o({markdowns:[h.str("want-start-dialog")]});l.getPromise().then(d.bind(function(){var a=e.defer();return this.editDialog(void 0,a),a.promise},this)).fail(function(){}).done(function(){k.resolve()})}f=f.done(d.bind(function(){new q({fillerText:JSON.stringify(this.getExportObj(),null,2),previewText:h.str("share-json")}),a.finishWith(b)},this)),c.resolve()},getExportObj:function(){var a=d.extend({},this.level);return delete a.startDialog,this.startDialogObj&&(a.startDialog={en_US:this.startDialogObj}),a},processLevelBuilderCommand:function(a){var b={"define goal":this.defineGoal,"define start":this.defineStart,"show start":this.showStart,"hide start":this.hideStart,finish:this.finish,"define hint":this.defineHint,"define name":this.defineName,"edit dialog":this.editDialog,"help builder":u.__super__.startDialog};if(!b[a.get("method")])throw new Error("woah we dont support that method yet");b[a.get("method")].apply(this,arguments)},afterCommandDefer:function(a){a.resolve()},die:function(){this.hideStart(),u.__super__.die.apply(this,arguments),delete this.startVis,delete this.startCanvasHolder}});c.LevelBuilder=u,c.regexMap=s},{"../app":21,"../dialogs/levelBuilder":25,"../git/gitShim":30,"../intl":36,"../level":40,"../level/parseWaterfall":41,"../models/commandModel":45,"../stores/LevelStore":49,"../stores/LocaleStore":50,"../util":55,"../util/errors":53,"../views":62,"../views/builderViews":59,"../views/multiView":64,"../visuals/visualization":75,backbone:1,q:14,underscore:17}],39:[function(a,b,c){function d(a){a=a||{},this.disabledMap=a.disabledMap||{"git cherry-pick":!0,"git rebase":!0}}var e=a("underscore"),f=a("../intl"),g=a("../commands"),h=a("../util/errors"),i=h.GitError;d.prototype.getInstantCommands=function(){var a=[],b=function(){throw new i({msg:f.str("command-disabled")})};return e.each(this.disabledMap,function(c,d){var e="git";d=d.slice(e.length+1);var f=g.commands.getRegexMap()[e][d];if(!f)throw new Error("wuttttt this disbaled command"+d+" has no regex matching");a.push([f,b])}),a},c.DisabledMap=d},{"../commands":22,"../intl":36,"../util/errors":53,underscore:17}],40:[function(a,b,c){var d=a("underscore"),e=a("q"),f=a("../util"),g=a("../app"),h=a("../intl"),i=a("../log"),j=a("../util/errors"),k=a("../sandbox/").Sandbox,l=a("../actions/GlobalStateActions"),m=a("../actions/LevelActions"),n=a("../stores/LevelStore"),o=a("../visuals/visualization").Visualization,p=a("../level/disabledMap").DisabledMap,q=a("../git/gitShim").GitShim,r=a("../commands"),s=a("../views/multiView").MultiView,t=a("../views").CanvasTerminalHolder,u=a("../views").ConfirmCancelTerminal,v=a("../views").NextLevelConfirm,w=a("../views").LevelToolbar,x=a("../graph/treeCompare"),y={"help level":/^help level$/,"start dialog":/^start dialog$/,"show goal":/^(show goal|goal|help goal)$/,"hide goal":/^hide goal$/,"show solution":/^show solution($|\s)/,objective:/^(objective|assignment)$/},z=f.genParseCommand(y,"processLevelCommand"),A=k.extend({initialize:function(a){a=a||{},a.level=a.level||{},this.level=a.level,this.gitCommandsIssued=[],this.solved=!1,this.wasResetAfterSolved=!1,this.initGoalData(a),this.initName(a),this.on("toggleGoal",this.toggleGoal),this.on("minimizeCanvas",this.minimizeGoal),this.on("resizeCanvas",this.resizeGoal),this.on("toggleObjective",this.toggleObjective),A.__super__.initialize.apply(this,[a]),this.startOffCommand(),this.handleOpen(a.deferred)},handleOpen:function(a){return a=a||e.defer(),this.level.startDialog&&!this.testOption("noIntroDialog")?(new s(d.extend({},h.getStartDialog(this.level),{deferred:a})),void 0):(setTimeout(function(){a.resolve()},1.2*this.getAnimationTime()),void 0)},objectiveDialog:function(a,b,c){if(c=void 0===c?this.level:c,!c||!c.startDialog)return a.set("error",new j.GitError({msg:h.str("no-start-dialog")})),b.resolve(),void 0;var e=$.extend({},h.getStartDialog(c));e.childViews=e.childViews.slice(-1),new s(d.extend(e,{deferred:b})),b.promise.then(function(){a.set("status","finished")})},startDialog:function(a,b){return this.level.startDialog?(this.handleOpen(b),b.promise.then(function(){a.set("status","finished")}),void 0):(a.set("error",new j.GitError({msg:h.str("no-start-dialog")})),b.resolve(),void 0)},getEnglishName:function(){return this.level.name.en_US},initName:function(){var a=h.getName(this.level);this.levelToolbar=new w({name:a,parent:this})},initGoalData:function(){if(!this.level.goalTreeString||!this.level.solutionCommand)throw new Error("need goal tree and solution")},takeControl:function(){g.getEventBaton().stealBaton("processLevelCommand",this.processLevelCommand,this),A.__super__.takeControl.apply(this)},releaseControl:function(){g.getEventBaton().releaseBaton("processLevelCommand",this.processLevelCommand,this),A.__super__.releaseControl.apply(this)},startOffCommand:function(){var a=this.options.command.get("method");this.testOption("noStartCommand")||"importLevelNow"===a||g.getEventBaton().trigger("commandSubmitted","hint; delay 2000; show goal")},initVisualization:function(a){this.mainVis=new o({el:a.el||this.getDefaultVisEl(),treeString:a.level.startTree})},initGoalVisualization:function(){var a=x.onlyMasterCompared(this.level);return this.goalCanvasHolder=new t({text:a?h.str("goal-only-master"):void 0,parent:this}),this.goalVis=new o({el:this.goalCanvasHolder.getCanvasLocation(),containerElement:this.goalCanvasHolder.getCanvasLocation(),treeString:this.level.goalTreeString,noKeyboardInput:!0,smallCanvas:!0,isGoalVis:!0,levelBlob:this.level,noClick:!0}),this.goalVis.customEvents.on("drag",d.bind(function(a,b){b.position.left>.5*$(window).width()?$("#goalPlaceholder").is(":visible")||($("#goalPlaceholder").show(),this.mainVis.myResize()):$("#goalPlaceholder").is(":visible")&&($("#goalPlaceholder").hide(),this.mainVis.myResize())},this)),this.goalCanvasHolder},minimizeGoal:function(a,b){this.goalVis.hide(),this.goalWindowPos=a,this.goalWindowSize=b,this.levelToolbar.$goalButton.text(h.str("show-goal-button")),$("#goalPlaceholder").is(":visible")&&($("#goalPlaceholder").hide(),this.mainVis.myResize())},resizeGoal:function(){this.goalVis.myResize()},showSolution:function(b,c){var f=this.level.solutionCommand,j=d.bind(function(){this.isShowingSolution=!0,g.getEventBaton().trigger("commandSubmitted",f),i.showLevelSolution(this.getEnglishName())},this),k=b.get("rawStr");if(this.testOptionOnString(k,"noReset")||(f="reset --forSolution; "+f),this.testOptionOnString(k,"force"))return j(),b.finishWith(c),void 0;var l=e.defer(),m=h.getDialog(a("../dialogs/confirmShowSolution"))[0],n=new u({markdowns:m.options.markdowns,deferred:l});l.promise.then(j).fail(function(){b.setResult("")}).done(function(){setTimeout(function(){b.finishWith(c)},n.getAnimationTime())})},toggleObjective:function(){g.getEventBaton().trigger("commandSubmitted","objective")},toggleGoal:function(){this.goalCanvasHolder&&this.goalCanvasHolder.inDom?this.hideGoal():this.showGoal()},showGoal:function(a,b){this.showSideVis(a,b,this.goalCanvasHolder,this.initGoalVisualization),this.levelToolbar.$goalButton.text(h.str("hide-goal-button")),$(this.goalVis.el).offset().left>.5*$(window).width()&&($("#goalPlaceholder").show(),this.mainVis.myResize())},showSideVis:function(a,b,c,d){var e=function(){a&&a.finishWith(b)};c&&c.inDom||(c=d.apply(this)),c.restore(this.goalWindowPos,this.goalWindowSize),setTimeout(e,c.getAnimationTime())},hideGoal:function(a,b){this.hideSideVis(a,b,this.goalCanvasHolder),this.levelToolbar.$goalButton.text(h.str("show-goal-button"))},hideSideVis:function(a,b,c){var d=function(){a&&a.finishWith(b)};c&&c.inDom?(c.die(),setTimeout(d,c.getAnimationTime())):d()},initParseWaterfall:function(a){A.__super__.initParseWaterfall.apply(this,[a]),this.parseWaterfall.addFirst("parseWaterfall",z),this.parseWaterfall.addFirst("instantWaterfall",this.getInstantCommands()),a.level.disabledMap&&this.parseWaterfall.addFirst("instantWaterfall",new p({disabledMap:a.level.disabledMap}).getInstantCommands())},initGitShim:function(){this.gitShim=new q({beforeCB:d.bind(this.beforeCommandCB,this),afterCB:d.bind(this.afterCommandCB,this),afterDeferHandler:d.bind(this.afterCommandDefer,this)})},undo:function(){this.gitCommandsIssued.pop(),A.__super__.undo.apply(this,arguments)},afterCommandCB:function(a){if(!a.get("error")){var b=!1;d.each(r.commands.getCommandsThatCount(),function(c){d.each(c,function(c){b=b||c.test(a.get("rawStr"))})}),b&&this.gitCommandsIssued.push(a.get("rawStr"))}},afterCommandDefer:function(a,b){if(this.solved)return b.addWarning(h.str("already-solved")),a.resolve(),void 0;var c=this.mainVis.gitEngine.printTree(),d=x.dispatchFromLevel(this.level,c);return d?(this.levelSolved(a),void 0):(a.resolve(),void 0)},getNumSolutionCommands:function(){var a=this.level.solutionCommand.replace(/^;|;$/g,"");return a.split(";").length},testOption:function(a){return this.options.command&&new RegExp("--"+a).test(this.options.command.get("rawStr"))},testOptionOnString:function(a,b){return a&&new RegExp("--"+b).test(a)},levelSolved:function(a){this.solved=!0,this.isShowingSolution||(m.setLevelSolved(this.level.id),i.levelSolved(this.getEnglishName())),this.hideGoal();var b=n.getNextLevel(this.level.id),c=this.gitCommandsIssued.length,d=this.getNumSolutionCommands(),f=this.testOption("noFinishDialog")||this.wasResetAfterSolved,h=this.wasResetAfterSolved,j=null;if(h){var k=e.defer();k.resolve(),j=k.promise,g.getEventBaton().trigger("commandSubmitted",'echo "level solved!"')}else l.changeIsAnimating(!0),j=this.mainVis.gitVisuals.finishAnimation(),this.mainVis.originVis&&(j=j.then(this.mainVis.originVis.gitVisuals.finishAnimation()));f||(j=j.then(function(){var a=new v({nextLevel:b,numCommands:c,best:d});return a.getPromise()})),j.then(function(){!f&&b&&(i.choseNextLevel(b.id),g.getEventBaton().trigger("commandSubmitted","level "+b.id))}).fail(function(){}).done(function(){l.changeIsAnimating(!1),a.resolve()})},die:function(){this.levelToolbar.die(),this.hideGoal(),this.mainVis.die(),this.releaseControl(),this.clear(),delete this.commandCollection,delete this.mainVis,delete this.goalVis,delete this.goalCanvasHolder},getInstantCommands:function(){var a=d.bind(function(){var a=h.getHint(this.level);return a&&a.length?a:h.str("no-hint")},this);return[[/^help$|^\?$/,function(){throw new j.CommandResult({msg:h.str("help-vague-level")})}],[/^hint$/,function(){throw new j.CommandResult({msg:a()})}]]},reset:function(a){this.gitCommandsIssued=[];var b=a?a.get("rawStr"):"";this.testOptionOnString(b,"forSolution")||(this.isShowingSolution=!1),this.solved&&(this.wasResetAfterSolved=!0),this.solved=!1,A.__super__.reset.apply(this,arguments)},buildLevel:function(a,b){this.exitLevel(),setTimeout(function(){g.getSandbox().buildLevel(a,b)},1.5*this.getAnimationTime())},importLevel:function(a,b){this.exitLevel(),setTimeout(function(){g.getSandbox().importLevel(a,b)},1.5*this.getAnimationTime())},startLevel:function(a,b){this.exitLevel(),setTimeout(function(){g.getSandbox().startLevel(a,b)},1.5*this.getAnimationTime())},exitLevel:function(a,b){this.die(),a&&b&&(setTimeout(function(){a.finishWith(b)},this.getAnimationTime()),g.getEventBaton().trigger("levelExited"))},processLevelCommand:function(a,b){var c={"show goal":this.showGoal,"hide goal":this.hideGoal,"show solution":this.showSolution,"start dialog":this.startDialog,"help level":this.startDialog,objective:this.objectiveDialog},d=c[a.get("method")];if(!d)throw new Error("woah we dont support that method yet",d);d.apply(this,[a,b])}});c.Level=A,c.regexMap=y},{"../actions/GlobalStateActions":18,"../actions/LevelActions":19,"../app":21,"../commands":22,"../dialogs/confirmShowSolution":24,"../git/gitShim":30,"../graph/treeCompare":34,"../intl":36,"../level/disabledMap":39,"../log":42,"../sandbox/":47,"../stores/LevelStore":49,"../util":55,"../util/errors":53,"../views":62,"../views/multiView":64,"../visuals/visualization":75,q:14,underscore:17}],41:[function(a,b,c){var d=a("underscore"),e=a("../git/commands"),f=a("../commands"),g=a("../sandbox/commands"),h=function(a){a=a||{},this.options=a,this.shortcutWaterfall=a.shortcutWaterfall||[f.commands.getShortcutMap()],this.instantWaterfall=a.instantWaterfall||[e.instantCommands,g.instantCommands]};h.prototype.initParseWaterfall=function(){return a("../util").isBrowser()?(this.parseWaterfall=this.options.parseWaterfall||[f.parse,g.parse,g.getOptimisticLevelParse(),g.getOptimisticLevelBuilderParse()],void 0):(this.parseWaterfall=[f.parse],void 0)},h.prototype.clone=function(){return new h({shortcutWaterfall:this.shortcutWaterfall.slice(),instantWaterfall:this.instantWaterfall.slice(),parseWaterfall:this.parseWaterfall.slice()})},h.prototype.getWaterfallMap=function(){return this.parseWaterfall||this.initParseWaterfall(),{shortcutWaterfall:this.shortcutWaterfall,instantWaterfall:this.instantWaterfall,parseWaterfall:this.parseWaterfall}},h.prototype.addFirst=function(a,b){if(!a||!b)throw new Error("need to know which!!!");this.getWaterfallMap()[a].unshift(b)},h.prototype.addLast=function(a,b){this.getWaterfallMap()[a].push(b)},h.prototype.expandAllShortcuts=function(a){return d.each(this.shortcutWaterfall,function(b){a=this.expandShortcut(a,b)},this),a},h.prototype.expandShortcut=function(a,b){return d.each(b,function(b,c){d.each(b,function(b,d){var e=b.exec(a);e&&(a=c+" "+d+" "+a.slice(e[0].length))})}),a},h.prototype.processAllInstants=function(a){d.each(this.instantWaterfall,function(b){this.processInstant(a,b)},this)},h.prototype.processInstant=function(a,b){d.each(b,function(b){var c=b[0],d=c.exec(a);d&&b[1](d)})},h.prototype.parseAll=function(a){this.parseWaterfall||this.initParseWaterfall();var b=!1;return d.each(this.parseWaterfall,function(c){var d=c(a);d&&(b=d)},this),b},c.ParseWaterfall=h},{"../commands":22,"../git/commands":29,"../sandbox/commands":46,"../util":55,underscore:17}],42:[function(a,b,c){var d=function(a,b,c){window._gaq=window._gaq||[],window._gaq.push(["_trackEvent",a,b,c])};c.viewInteracted=function(a){d("views","interacted",a)},c.showLevelSolution=function(a){d("levels","showedLevelSolution",a)},c.choseNextLevel=function(a){d("levels","nextLevelChosen",a)},c.levelSelected=function(a){d("levels","levelSelected",a)},c.levelSolved=function(a){d("levels","levelSolved",a)},c.commandEntered=function(a){d("commands","commandEntered",a)}},{}],43:[function(a,b,c){var d=(a("underscore"),a("../intl")),e=(a("../git/commands"),a("../util/errors")),f=(e.CommandProcessError,e.GitError),g=(e.Warning,e.CommandResult,{commit:{regex:/^hg +(commit|ci)($|\s)/,options:["--amend","-A","-m"],delegate:function(a,b){var c=b.getOptionsMap();return c["-A"]&&b.addWarning(d.str("hg-a-option")),{vcs:"git",name:"commit"}}},status:{regex:/^hg +(status|st) *$/,dontCountForGolf:!0,execute:function(){throw new f({msg:d.str("hg-error-no-status")})}},"export":{regex:/^hg +export($|\s)/,dontCountForGolf:!0,delegate:function(a,b){return b.mapDotToHead(),{vcs:"git",name:"show"}}},graft:{regex:/^hg +graft($|\s)/,options:["-r"],delegate:function(a,b){return b.acceptNoGeneralArgs(),b.prependOptionR(),{vcs:"git",name:"cherrypick"}}},log:{regex:/^hg +log($|\s)/,options:["-f"],dontCountForGolf:!0,delegate:function(a,b){var c=b.getOptionsMap();if(b.acceptNoGeneralArgs(),!c["-f"])throw new f({msg:d.str("hg-error-log-no-follow")});return b.mapDotToHead(),{vcs:"git",name:"log"}}},bookmark:{regex:/^hg (bookmarks|bookmark|book)($|\s)/,options:["-r","-f","-d"],delegate:function(a,b){var c,e,g=b.getOptionsMap(),h=b.getGeneralArgs(),i={vcs:"git"};if(g["-m"]&&g["-d"])throw new f({msg:d.todo("-m and -d are incompatible")});if(g["-d"]&&g["-r"])throw new f({msg:d.todo("-r is incompatible with -d")});if(g["-m"]&&g["-r"])throw new f({msg:d.todo("-r is incompatible with -m")});return h.length+(g["-r"]?g["-r"].length:0)+(g["-d"]?g["-d"].length:0)===0?(i.name="branch",i):(g["-d"]?(g["-D"]=g["-d"],delete g["-d"],i.name="branch"):g["-r"]?(h=b.getGeneralArgs(),c=h[0],e=g["-r"][0],i.name="branch",b.setGeneralArgs([c,e])):h.length>0?(b.setOptionsMap({"-b":[h[0]]}),i.name="checkout",b.setGeneralArgs([])):i.name="branch",i)}},rebase:{regex:/^hg +rebase($|\s+)/,options:["-d","-s","-b"],execute:function(a,b){var c=function(){throw new f({msg:d.str("git-error-options")})},e=b.getOptionsMap();if(e["-d"]&&e["-s"]||!e["-d"]&&!e["-s"],e["-b"]||(e["-b"]=["."]),b.setOptionsMap(e),b.mapDotToHead(),e=b.getOptionsMap(),e["-d"]){var g=e["-d"][0]||c(),h=e["-b"][0];a.hgRebase(g,h)}else c()}},update:{regex:/^hg +(update|up)($|\s+)/,options:["-r"],delegate:function(a,b){return b.appendOptionR(),{vcs:"git",name:"checkout"}}},backout:{regex:/^hg +backout($|\s+)/,options:["-r"],delegate:function(a,b){return b.prependOptionR(),{vcs:"git",name:"revert"}}},histedit:{regex:/^hg +histedit($|\s+)/,delegate:function(a,b){var c=b.getGeneralArgs();return b.validateArgBounds(c,1,1),b.setOptionsMap({"-i":c}),b.setGeneralArgs([]),{vcs:"git",name:"rebase"}}},pull:{regex:/^hg +pull($|\s+)/,delegate:function(){return{vcs:"git",name:"pull"}}},summary:{regex:/^hg +(summary|sum) *$/,delegate:function(){return{vcs:"git",name:"branch"}}}});c.commandConfig=g},{"../git/commands":29,"../intl":36,"../util/errors":53,underscore:17}],44:[function(a,b,c){var d=a("underscore"),e=a("q"),f=f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=a("../git").Commit,h=a("../git").Branch,i=a("../git").Tag,j=a("../models/commandModel").Command,k=a("../models/commandModel").CommandEntry,l=a("../util/constants").TIME,m=f.Collection.extend({model:g}),n=f.Collection.extend({model:j}),o=f.Collection.extend({model:h}),p=f.Collection.extend({model:i}),q=f.Collection.extend({model:k,localStorage:f.LocalStorage?new f.LocalStorage("CommandEntries"):null}),r=f.Model.extend({defaults:{collection:null},initialize:function(a){a.collection.bind("add",this.addCommand,this),this.buffer=[],this.timeout=null},addCommand:function(a){this.buffer.push(a),this.touchBuffer()},touchBuffer:function(){this.timeout||this.setTimeout()},setTimeout:function(){this.timeout=setTimeout(d.bind(function(){this.sipFromBuffer()},this),l.betweenCommandsDelay)},popAndProcess:function(){for(var a=this.buffer.shift(0);a.get("error")&&this.buffer.length;)a=this.buffer.shift(0);a.get("error")?this.clear():this.processCommand(a)},processCommand:function(b){b.set("status","processing");var c=e.defer();c.promise.then(d.bind(function(){this.setTimeout()},this));var f=b.get("eventName");if(!f)throw new Error("I need an event to trigger when this guy is parsed and ready");var g=a("../app"),h=g.getEventBaton(),i=h.getNumListeners(f);if(!i){var j=a("../util/errors");return b.set("error",new j.GitError({msg:"That command is valid, but not supported in this current environment! Try entering a level or level builder to use that command"})),c.resolve(),void 0}g.getEventBaton().trigger(f,b,c)},clear:function(){clearTimeout(this.timeout),this.timeout=null},sipFromBuffer:function(){return this.buffer.length?(this.popAndProcess(),void 0):(this.clear(),void 0)}});c.CommitCollection=m,c.CommandCollection=n,c.BranchCollection=o,c.TagCollection=p,c.CommandEntryCollection=q,c.CommandBuffer=r},{"../app":21,"../git":32,"../models/commandModel":45,"../util":55,"../util/constants":51,"../util/errors":53,backbone:1,q:14,underscore:17}],45:[function(a,b,c){var d=a("underscore"),e=e=a("../util").isBrowser()?window.Backbone:a("backbone"),f=a("../util/errors"),g=a("../level/parseWaterfall").ParseWaterfall,h=a("../intl"),i=f.CommandProcessError,j=f.GitError,k=f.Warning,l=f.CommandResult,m=e.Model.extend({defaults:{status:"inqueue",rawStr:null,result:"",createTime:null,error:null,warnings:null,parseWaterfall:new g,generalArgs:null,supportedMap:null,options:null,method:null},initialize:function(){this.initDefaults(),this.validateAtInit(),this.on("change:error",this.errorChanged,this),this.get("error")&&this.errorChanged(),this.parseOrCatch()},initDefaults:function(){this.set("generalArgs",[]),this.set("supportedMap",{}),this.set("warnings",[])},replaceDotWithHead:function(a){return a.replace(/\./g,"HEAD")},appendOptionR:function(){var a=this.getOptionsMap()["-r"]||[];this.setGeneralArgs(this.getGeneralArgs().concat(a))},prependOptionR:function(){var a=this.getOptionsMap()["-r"]||[];this.setGeneralArgs(a.concat(this.getGeneralArgs()))},mapDotToHead:function(){var a=this.getGeneralArgs(),b=this.getOptionsMap();a=d.map(a,function(a){return this.replaceDotWithHead(a)},this);var c={};d.each(b,function(a,b){c[b]=d.map(a,function(a){return this.replaceDotWithHead(a)},this)},this),this.setGeneralArgs(a),this.setOptionsMap(c)},deleteOptions:function(a){var b=this.getOptionsMap();d.each(a,function(a){delete b[a]},this),this.setOptionsMap(b)},getGeneralArgs:function(){return this.get("generalArgs")},setGeneralArgs:function(a){this.set("generalArgs",a)},setOptionsMap:function(a){this.set("supportedMap",a)},getOptionsMap:function(){return this.get("supportedMap")},acceptNoGeneralArgs:function(){if(this.getGeneralArgs().length)throw new j({msg:h.str("git-error-no-general-args")})},oneArgImpliedHead:function(a,b){this.validateArgBounds(a,0,1,b),0===a.length&&a.push("HEAD")},twoArgsImpliedHead:function(a,b){this.validateArgBounds(a,1,2,b),1==a.length&&a.push("HEAD")},oneArgImpliedOrigin:function(a){this.validateArgBounds(a,0,1),a.length||a.unshift("origin")},twoArgsForOrigin:function(a){this.validateArgBounds(a,0,2)},validateArgBounds:function(a,b,c,d){var e=void 0===d?"git "+this.get("method"):this.get("method")+" "+d+" ";if(e="with "+e,a.length<b)throw new j({msg:h.str("git-error-args-few",{lower:String(b),what:e})});if(a.length>c)throw new j({msg:h.str("git-error-args-many",{upper:String(c),what:e})})},validateAtInit:function(){if(null===this.get("rawStr"))throw new Error("Give me a string!");this.get("createTime")||this.set("createTime",(new Date).toString())},setResult:function(a){this.set("result",a)},finishWith:function(a){this.set("status","finished"),a.resolve()},addWarning:function(a){this.get("warnings").push(a),this.set("numWarnings",this.get("numWarnings")?this.get("numWarnings")+1:1)},getFormattedWarnings:function(){if(!this.get("warnings").length)return"";var a='<i class="icon-exclamation-sign"></i>';return"<p>"+a+this.get("warnings").join("</p><p>"+a)+"</p>"},parseOrCatch:function(){this.expandShortcuts(this.get("rawStr"));try{this.processInstants()}catch(a){return f.filterError(a),this.set("error",a),void 0}this.parseAll()||this.set("error",new i({msg:'The command "'+this.get("rawStr")+"\" isn't supported, sorry!"}))},errorChanged:function(){var a=this.get("error");a&&(a instanceof i||a instanceof j?this.set("status","error"):a instanceof l?this.set("status","finished"):a instanceof k&&this.set("status","warning"),this.formatError())},formatError:function(){this.set("result",this.get("error").toResult())},expandShortcuts:function(a){a=this.get("parseWaterfall").expandAllShortcuts(a),this.set("rawStr",a)},processInstants:function(){var a=this.get("rawStr");if(!a.length)throw new l({msg:""});this.get("parseWaterfall").processAllInstants(a)},parseAll:function(){var a=this.get("rawStr"),b=this.get("parseWaterfall").parseAll(a);return b?(d.each(b.toSet,function(a,b){this.set(b,a)},this),!0):!1}}),n=e.Model.extend({defaults:{text:""}});c.CommandEntry=n,c.Command=m},{"../intl":36,"../level/parseWaterfall":41,"../util":55,"../util/errors":53,backbone:1,underscore:17}],46:[function(a,b,c){var d=a("underscore"),e=a("../util"),f=(a("../util/constants"),a("../intl")),g=a("../commands"),h=a("../util/errors"),i=(h.CommandProcessError,a("../stores/LocaleStore")),j=a("../actions/LocaleActions"),k=a("../stores/GlobalStateStore"),l=a("../actions/GlobalStateActions"),m=(h.GitError,h.Warning,h.CommandResult),n=[[/^ls/,function(){throw new m({msg:f.str("ls-command")})}],[/^cd/,function(){throw new m({msg:f.str("cd-command")})}],[/^(locale|locale reset)$/,function(){throw j.changeLocale(i.getDefaultLocale()),new m({msg:f.str("locale-reset-command",{locale:i.getDefaultLocale()})})}],[/^show$/,function(){var a=[f.str("show-command"),"<br/>","show commands","show solution","show goal"];throw new m({msg:a.join("\n")})}],[/^locale (\w+)$/,function(a){throw j.changeLocale(a[1]),new m({msg:f.str("locale-command",{locale:a[1]})})}],[/^flip$/,function(){throw l.changeFlipTreeY(!k.getFlipTreeY()),a("../app").getEvents().trigger("refreshTree"),new m({msg:f.str("flip-tree-command")})}],[/^refresh$/,function(){var b=a("../app").getEvents();throw b.trigger("refreshTree"),new m({msg:f.str("refresh-tree-command")})}],[/^rollup (\d+)$/,function(b){var c=a("../app").getEvents();throw c.trigger("rollupCommands",b[1]),new m({msg:"Commands combined!"})}],[/^echo "(.*?)"$|^echo (.*?)$/,function(a){var b=a[1]||a[2];throw new m({msg:b})}],[/^show +commands$/,function(){var a=p(),b=[f.str("show-all-commands"),"<br/>"];throw d.each(a,function(a,c){b.push(c)}),new m({msg:b.join("\n")})}]],o={"reset solved":/^reset solved($|\s)/,help:/^help( +general)?$|^\?$/,reset:/^reset( +--forSolution)?$/,delay:/^delay (\d+)$/,clear:/^clear($|\s)/,"exit level":/^exit level($|\s)/,sandbox:/^sandbox($|\s)/,level:/^level\s?([a-zA-Z0-9]*)/,levels:/^levels($|\s)/,mobileAlert:/^mobile alert($|\s)/,"build level":/^build +level\s?([a-zA-Z0-9]*)$/,"export tree":/^export +tree$/,importTreeNow:/^importTreeNow($|\s)/,importLevelNow:/^importLevelNow($|\s)/,"import tree":/^import +tree$/,"import level":/^import +level$/,undo:/^undo($|\s)/},p=function(){var b=["mobileAlert"],c=d.extend({},a("../level").regexMap,o);return d.each(g.commands.getRegexMap(),function(a,b){d.each(a,function(a,d){c[b+" "+d]=a})}),d.each(b,function(a){delete c[a]}),c};c.instantCommands=n,c.parse=e.genParseCommand(o,"processSandboxCommand"),c.getOptimisticLevelParse=function(){return e.genParseCommand(a("../level").regexMap,"processLevelCommand")},c.getOptimisticLevelBuilderParse=function(){return e.genParseCommand(a("../level/builder").regexMap,"processLevelBuilderCommand")}},{"../actions/GlobalStateActions":18,"../actions/LocaleActions":20,"../app":21,"../commands":22,"../intl":36,"../level":40,"../level/builder":38,"../stores/GlobalStateStore":48,"../stores/LocaleStore":50,"../util":55,"../util/constants":51,"../util/errors":53,underscore:17}],47:[function(a,b,c){var d=a("underscore"),e=a("q"),f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=a("../util"),h=a("../intl"),i=a("../app"),j=a("../util/errors"),k=a("../visuals/visualization").Visualization,l=a("../level/parseWaterfall").ParseWaterfall,m=(a("../level/disabledMap").DisabledMap,a("../models/commandModel").Command),n=a("../git/gitShim").GitShim,o=a("../actions/LevelActions"),p=a("../stores/LevelStore"),q=a("../views"),r=(q.ModalTerminal,q.ModalAlert,a("../views/builderViews")),s=a("../views/multiView").MultiView,t=f.View.extend({tagName:"div",initialize:function(a){a=a||{},this.options=a,this.initVisualization(a),this.initCommandCollection(a),this.initParseWaterfall(a),this.initGitShim(a),this.initUndoStack(a),a.wait||this.takeControl()
},getDefaultVisEl:function(){return $("#mainVisSpace")[0]},getAnimationTime:function(){return 1050},initVisualization:function(a){this.mainVis=new k({el:a.el||this.getDefaultVisEl()})},initUndoStack:function(){this.undoStack=[]},initCommandCollection:function(){this.commandCollection=i.getCommandUI().commandCollection},initParseWaterfall:function(){this.parseWaterfall=new l},initGitShim:function(){this.gitShim=new n({beforeCB:d.bind(this.beforeCommandCB,this)})},takeControl:function(){i.getEventBaton().stealBaton("commandSubmitted",this.commandSubmitted,this),i.getEventBaton().stealBaton("processSandboxCommand",this.processSandboxCommand,this),i.getEventBaton().stealBaton("levelExited",this.levelExited,this),this.insertGitShim()},releaseControl:function(){i.getEventBaton().releaseBaton("commandSubmitted",this.commandSubmitted,this),i.getEventBaton().releaseBaton("processSandboxCommand",this.processSandboxCommand,this),i.getEventBaton().releaseBaton("levelExited",this.levelExited,this),this.releaseGitShim()},releaseGitShim:function(){this.gitShim&&this.gitShim.removeShim()},insertGitShim:function(){this.gitShim&&this.mainVis.customEvents.on("gitEngineReady",function(){this.gitShim.insertShim()},this)},beforeCommandCB:function(){this.pushUndo()},pushUndo:function(){this.undoStack.push(this.mainVis.gitEngine.printTree())},undo:function(a,b){var c=this.undoStack.pop();return c?(this.mainVis.reset(c),setTimeout(function(){a.finishWith(b)},this.mainVis.getAnimationTime()),void 0):(a.set("error",new j.GitError({msg:h.str("undo-stack-empty")})),b.resolve(),void 0)},commandSubmitted:function(a){i.getEvents().trigger("commandSubmittedPassive",a),g.splitTextCommand(a,function(a){this.commandCollection.add(new m({rawStr:a,parseWaterfall:this.parseWaterfall}))},this)},startLevel:function(b,c){var d=b.get("regexResults")||[],f=d[1]||"",g=p.getLevel(f);if(!g)return b.addWarning(h.str("level-no-id",{id:f})),i.getEventBaton().trigger("commandSubmitted","levels"),b.set("status","error"),c.resolve(),void 0;this.hide(),this.clear();var j=e.defer(),k=a("../level").Level;this.currentLevel=new k({level:g,deferred:j,command:b}),j.promise.then(function(){b.finishWith(c)})},buildLevel:function(b,c){this.hide(),this.clear();var d=e.defer(),f=a("../level/builder").LevelBuilder,g=b.get("regexResults")||[],h=g[1]||!1;this.levelBuilder=new f({deferred:d,editLevel:h}),d.promise.then(function(){b.finishWith(c)})},exitLevel:function(a,b){a.addWarning(h.str("level-cant-exit")),a.set("status","error"),b.resolve()},showLevels:function(a,b){var c=e.defer();i.getLevelDropdown().show(c,a),c.promise.done(function(){a.finishWith(b)})},resetSolved:function(a,b){o.resetLevelsSolved(),a.addWarning(h.str("solved-map-reset")),a.finishWith(b)},processSandboxCommand:function(a,b){var c={"reset solved":this.resetSolved,undo:this.undo,"help general":this.helpDialog,help:this.helpDialog,reset:this.reset,delay:this.delay,clear:this.clear,"exit level":this.exitLevel,level:this.startLevel,sandbox:this.exitLevel,levels:this.showLevels,mobileAlert:this.mobileAlert,"build level":this.buildLevel,"export tree":this.exportTree,"import tree":this.importTree,importTreeNow:this.importTreeNow,"import level":this.importLevel,importLevelNow:this.importLevelNow},d=c[a.get("method")];if(!d)throw new Error("no method for that wut");d.apply(this,[a,b])},hide:function(){this.mainVis.hide()},levelExited:function(){this.show()},show:function(){this.mainVis.show()},importLevelNow:function(b,c){var d=b.get("regexResults")||[];if(d.length<2)return b.set("error",new j.GitError({msg:h.str("git-error-options")})),b.finishWith(c),void 0;var f=d.input.replace(/importLevelNow\s+/g,""),g=a("../level").Level;try{var i=JSON.parse(unescape(f)),k=e.defer();this.currentLevel=new g({level:i,deferred:k,command:b}),this.hide(),k.promise.then(function(){b.finishWith(c)})}catch(l){b.set("error",new j.GitError({msg:"Something went wrong "+String(l)}))}b.finishWith(c)},importTreeNow:function(a,b){var c=a.get("regexResults")||[];c.length<2&&(a.set("error",new j.GitError({msg:h.str("git-error-options")})),a.finishWith(b));var d=c.input.replace(/importTreeNow\s+/g,"");try{this.mainVis.gitEngine.loadTreeFromString(d)}catch(e){a.set("error",new j.GitError({msg:String(e)}))}a.finishWith(b)},importTree:function(a,b){var c=new r.MarkdownPresenter({previewText:h.str("paste-json"),fillerText:" "});c.deferred.promise.then(d.bind(function(a){try{this.mainVis.gitEngine.loadTree(JSON.parse(a))}catch(b){this.mainVis.reset(),new s({childViews:[{type:"ModalAlert",options:{markdowns:["## Error!","","Something is wrong with that JSON! Here is the error:","",String(b)]}}]})}},this)).fail(function(){}).done(function(){a.finishWith(b)})},importLevel:function(b,c){var f=new r.MarkdownPresenter({previewText:h.str("paste-json"),fillerText:" "});f.deferred.promise.then(d.bind(function(d){var f=a("../level").Level;try{var g=JSON.parse(d),h=e.defer();this.currentLevel=new f({level:g,deferred:h,command:b}),this.hide(),h.promise.then(function(){b.finishWith(c)})}catch(i){new s({childViews:[{type:"ModalAlert",options:{markdowns:["## Error!","","Something is wrong with that level JSON, this happened:","",String(i)]}}]}),b.finishWith(c)}},this)).fail(function(){b.finishWith(c)}).done()},exportTree:function(a,b){var c=JSON.stringify(this.mainVis.gitEngine.exportTree(),null,2),d=new s({childViews:[{type:"MarkdownPresenter",options:{previewText:h.str("share-tree"),fillerText:c,noConfirmCancel:!0}}]});d.getPromise().then(function(){a.finishWith(b)}).done()},clear:function(a,b){i.getEvents().trigger("clearOldCommands"),a&&b&&a.finishWith(b)},mobileAlert:function(a,b){alert(h.str("mobile-alert")),a.finishWith(b)},delay:function(a,b){var c=parseInt(a.get("regexResults")[1],10);setTimeout(function(){a.finishWith(b)},c)},reset:function(a,b){this.mainVis.reset(),this.initUndoStack(),setTimeout(function(){a.finishWith(b)},this.mainVis.getAnimationTime())},helpDialog:function(b,c){var e=new s({childViews:h.getDialog(a("../dialogs/sandbox"))});e.getPromise().then(d.bind(function(){b.finishWith(c)},this)).done()}});c.Sandbox=t},{"../actions/LevelActions":19,"../app":21,"../dialogs/sandbox":27,"../git/gitShim":30,"../intl":36,"../level":40,"../level/builder":38,"../level/disabledMap":39,"../level/parseWaterfall":41,"../models/commandModel":45,"../stores/LevelStore":49,"../util":55,"../util/errors":53,"../views":62,"../views/builderViews":59,"../views/multiView":64,"../visuals/visualization":75,backbone:1,q:14,underscore:17}],48:[function(a,b){"use strict";var c=a("../constants/AppConstants"),d=a("../dispatcher/AppDispatcher"),e=a("events").EventEmitter,f=a("object-assign"),g=c.ActionTypes,h=!1,i=!1,j=f({},e.prototype,c.StoreSubscribePrototype,{getIsAnimating:function(){return h},getFlipTreeY:function(){return i},dispatchToken:d.register(function(a){var b=a.action,d=!1;switch(b.type){case g.CHANGE_IS_ANIMATING:h=b.isAnimating,d=!0;break;case g.CHANGE_FLIP_TREE_Y:i=b.flipTreeY,d=!0}d&&j.emit(c.CHANGE_EVENT)})});b.exports=j},{"../constants/AppConstants":23,"../dispatcher/AppDispatcher":28,events:3,"object-assign":13}],49:[function(a,b){"use strict";function c(){try{localStorage.setItem(l,JSON.stringify(n))}catch(a){console.warn("local storage failed on set",a)}}var d=a("../constants/AppConstants"),e=a("../dispatcher/AppDispatcher"),f=a("events").EventEmitter,g=a("underscore"),h=a("object-assign"),i=a("../../levels").levelSequences,j=a("../../levels").sequenceInfo,k=d.ActionTypes,l="solvedMap",m={},n={},o=[];try{n=JSON.parse(localStorage.getItem(l)||"{}")||{}}catch(p){console.warn("local storage failed",p)}var q=function(a){a=a||{};var b=["name","goalTreeString","solutionCommand"];g.each(b,function(b){if(void 0===a[b])throw console.log(a),new Error("I need this field for a level: "+b)})};g.each(i,function(a,b){if(o.push(b),!a||!a.length)throw new Error("no empty sequences allowed");g.each(a,function(a,c){q(a);var d=b+String(c+1),e=h({},a,{index:c,id:d,sequenceName:b});m[d]=e,i[b][c]=e})});var r=h({},f.prototype,d.StoreSubscribePrototype,{getSequenceToLevels:function(){return i},getSequences:function(){return g.keys(i)},getLevelsInSequence:function(a){if(!i[a])throw new Error("that sequecne name "+a+"does not exist");return i[a]},getSequenceInfo:function(a){return j[a]},getLevel:function(a){return m[a]},getNextLevel:function(a){if(!m[a])return console.warn("that level doesnt exist!!!"),null;var b=m[a],c=b.sequenceName,d=i[c],e=b.index+1;if(e<d.length)return d[e];var f=o.indexOf(c)+1;if(f<o.length){var g=o[f];return i[g][0]}return null},isLevelSolved:function(a){if(!m[a])throw new Error("that level doesnt exist!");return!!n[a]},dispatchToken:e.register(function(a){var b=a.action,e=!1;switch(b.type){case k.RESET_LEVELS_SOLVED:n={},c(),e=!0;break;case k.SET_LEVEL_SOLVED:n[b.levelID]=!0,c(),e=!0}e&&r.emit(d.CHANGE_EVENT)})});b.exports=r},{"../../levels":77,"../constants/AppConstants":23,"../dispatcher/AppDispatcher":28,events:3,"object-assign":13,underscore:17}],50:[function(a,b){"use strict";function c(a){for(var b,c=a.split(","),d=0;d<c.length;d++){var e=c[d].split(";")[0];if(k[e]){b=k[e];break}var f=e.slice(0,2);if(j[f]){b=j[f];break}}return b}var d=a("../constants/AppConstants"),e=a("../dispatcher/AppDispatcher"),f=a("events").EventEmitter,g=a("object-assign"),h=d.ActionTypes,i="en_US",j={en:"en_US",zh:"zh_CN",ja:"ja",ko:"ko",es:"es_AR",fr:"fr_FR",de:"de_DE",pt:"pt_BR"},k={"zh-CN":"zh_CN","zh-TW":"zh_TW","pt-BR":"pt_BR"},l=i,m=g({},f.prototype,d.StoreSubscribePrototype,{getDefaultLocale:function(){return i},getLangLocaleMap:function(){return g({},j)},getHeaderLocaleMap:function(){return g({},k)},getLocale:function(){return l},dispatchToken:e.register(function(a){var b=a.action,e=!1;switch(b.type){case h.CHANGE_LOCALE:l=b.locale,e=!0;break;case h.CHANGE_LOCALE_FROM_HEADER:var f=c(b.header);f&&(l=f,e=!0)}e&&m.emit(d.CHANGE_EVENT)})});b.exports=m},{"../constants/AppConstants":23,"../dispatcher/AppDispatcher":28,events:3,"object-assign":13}],51:[function(a,b,c){var d={betweenCommandsDelay:400},e={minZoom:.55,maxZoom:1.25,minWidth:600,minHeight:600},f={arrowHeadSize:8,nodeRadius:17,curveControlPointOffset:50,defaultEasing:"easeInOut",defaultAnimationTime:400,rectFill:"hsb(0.8816909813322127,0.6,1)",headRectFill:"#2831FF",rectStroke:"#FFF",rectStrokeWidth:"3",originDash:"- ",multiBranchY:20,multiTagY:15,upstreamHeadOpacity:.5,upstreamNoneOpacity:.2,edgeUpstreamHeadOpacity:.4,edgeUpstreamNoneOpacity:.15,visBranchStrokeWidth:2,visBranchStrokeColorNone:"#333",defaultNodeFill:"hsba(0.5,0.6,0.7,1)",defaultNodeStrokeWidth:2,defaultNodeStroke:"#FFF",tagFill:"hsb(0,0,0.9)",tagStroke:"#FFF",tagStrokeWidth:"2",orphanNodeFill:"hsb(0.5,0.8,0.7)"};c.TIME=d,c.GRAPHICS=f,c.VIEWPORT=e},{}],52:[function(a){var b=a("underscore"),c={App:a("../app/index.js"),Tree:a("../visuals/tree"),Visuals:a("../visuals"),Git:a("../git"),CommandModel:a("../models/commandModel"),LevelActions:a("../actions/LevelActions"),LevelStore:a("../stores/LevelStore"),LocaleActions:a("../actions/LocaleActions"),LocaleStore:a("../stores/LocaleStore"),Levels:a("../graph/treeCompare"),Constants:a("../util/constants"),Commands:a("../commands"),Collections:a("../models/collections"),Async:a("../visuals/animation"),AnimationFactory:a("../visuals/animation/animationFactory"),Main:a("../app"),HeadLess:a("../git/headless"),Q:{Q:a("q")},RebaseView:a("../views/rebaseView"),Views:a("../views"),MultiView:a("../views/multiView"),ZoomLevel:a("../util/zoomLevel"),VisBranch:a("../visuals/visBranch"),TreeCompare:a("../graph/treeCompare"),Level:a("../level"),Sandbox:a("../sandbox/"),GitDemonstrationView:a("../views/gitDemonstrationView"),Markdown:a("markdown"),LevelDropdownView:a("../views/levelDropdownView"),BuilderViews:a("../views/builderViews"),Util:a("../util/index"),Intl:a("../intl")};b.each(c,function(a,b){for(var c in a){var d=a[c];d instanceof Function&&(d=d.bind(a)),window["debug_"+b+"_"+c]=d}}),$(document).ready(function(){window.debug_events=c.Main.getEvents(),window.debug_eventBaton=c.Main.getEventBaton(),window.debug_sandbox=c.Main.getSandbox(),window.debug_modules=c,window.debug_levelDropdown=c.Main.getLevelDropdown(),window.debug_under=b,window.debug_copyTree=function(){return c.Main.getSandbox().mainVis.gitEngine.printAndCopyTree()}})},{"../actions/LevelActions":19,"../actions/LocaleActions":20,"../app":21,"../app/index.js":21,"../commands":22,"../git":32,"../git/headless":31,"../graph/treeCompare":34,"../intl":36,"../level":40,"../models/collections":44,"../models/commandModel":45,"../sandbox/":47,"../stores/LevelStore":49,"../stores/LocaleStore":50,"../util/constants":51,"../util/index":55,"../util/zoomLevel":58,"../views":62,"../views/builderViews":59,"../views/gitDemonstrationView":61,"../views/levelDropdownView":63,"../views/multiView":64,"../views/rebaseView":65,"../visuals":68,"../visuals/animation":67,"../visuals/animation/animationFactory":66,"../visuals/tree":69,"../visuals/visBranch":71,markdown:11,q:14,underscore:17}],53:[function(a,b,c){var d=(a("underscore"),a("backbone")),e=d.Model.extend({defaults:{type:"MyError",msg:"Unknown Error"},toString:function(){return this.get("type")+": "+this.get("msg")},getMsg:function(){return this.get("msg")||"Unknown Error"},toResult:function(){return this.get("msg").length?"<p>"+this.get("msg").replace(/\n/g,"</p><p>")+"</p>":""}}),f=c.CommandProcessError=e.extend({defaults:{type:"Command Process Error"}}),g=c.CommandResult=e.extend({defaults:{type:"Command Result"}}),h=c.Warning=e.extend({defaults:{type:"Warning"}}),i=c.GitError=e.extend({defaults:{type:"Git Error"}}),j=function(a){if(!(a instanceof f||a instanceof i||a instanceof g||a instanceof h))throw a};c.filterError=j},{backbone:1,underscore:17}],54:[function(a,b,c){function d(a){this.eventMap={},this.options=a||{}}var e=a("underscore");d.prototype.stealBaton=function(a,b,c){if(!a)throw new Error("need name");if(!b)throw new Error("need func!");var d=this.eventMap[a]||[];d.push({func:b,context:c}),this.eventMap[a]=d},d.prototype.sliceOffArgs=function(a,b){for(var c=[],d=a;d<b.length;d++)c.push(b[d]);return c},d.prototype.trigger=function(a){var b=this.sliceOffArgs(1,arguments),c=this.eventMap[a];if(!c||!c.length)return console.warn("no listeners for",a),void 0;var d=c.slice(-1)[0];d.func.apply(d.context,b)},d.prototype.getNumListeners=function(a){var b=this.eventMap[a]||[];return b.length},d.prototype.getListenersThrow=function(a){var b=this.eventMap[a];if(!b||!b.length)throw new Error("no one has that baton!"+a);return b},d.prototype.passBatonBackSoft=function(a,b,c,d){try{return this.passBatonBack(a,b,c,d)}catch(e){}},d.prototype.passBatonBack=function(a,b,c,d){var f,g=this.getListenersThrow(a);if(e.each(g,function(a,d){0!==d&&a.func===b&&a.context===c&&(f=d-1)},this),void 0===f)throw new Error("you are the last baton holder! or i didnt find you");var h=g[f];h.func.apply(h.context,d)},d.prototype.releaseBaton=function(a,b,c){var d=this.getListenersThrow(a),f=[],g=!1;if(e.each(d,function(a){a.func===b&&a.context===c?(g&&(console.warn("woah duplicates!!!"),console.log(d)),g=!0):f.push(a)},this),!g)throw console.log("did not find that function",b,c,a,arguments),console.log(this.eventMap),new Error("cant releasebaton if yu dont have it");this.eventMap[a]=f},c.EventBaton=d},{underscore:17}],55:[function(a,b,c){{var d=a("underscore");a("../util/constants")}c.parseQueryString=function(a){var b={};return a.replace(new RegExp("([^?=&]+)(=([^&]*))?","g"),function(a,c,d,e){b[c]=e}),b},c.isBrowser=function(){var a="undefined"!==String(typeof window);return a},c.splitTextCommand=function(a,b,c){b=d.bind(b,c),d.each(a.split(";"),function(a,c){a=d.escape(a),a=a.replace(/^(\s+)/,"").replace(/(\s+)$/,"").replace(/&quot;/g,'"').replace(/&#x27;/g,"'"),c>0&&!a.length||b(a)})},c.genParseCommand=function(a,b){return function(c){var e,f;return d.each(a,function(a,b){var d=a.exec(c);d&&(e=b,f=d)}),e?{toSet:{eventName:b,method:e,regexResults:f}}:!1}}},{"../util/constants":51,underscore:17}],56:[function(a,b,c){function d(a){this.events=a.events||e.clone(f.Events),this.aliasMap=a.aliasMap||{},a.wait||this.listen()}var e=a("underscore"),f=a("backbone"),g=a("../app"),h=function(a){var b={37:"left",38:"up",39:"right",40:"down",27:"esc",13:"enter"};return b[a]};d.prototype.listen=function(){this.listening||(this.listening=!0,g.getEventBaton().stealBaton("docKeydown",this.keydown,this))},d.prototype.mute=function(){this.listening=!1,g.getEventBaton().releaseBaton("docKeydown",this.keydown,this)},d.prototype.keydown=function(a){var b=a.which||a.keyCode,c=h(b);void 0!==c&&this.fireEvent(c,a)},d.prototype.fireEvent=function(a,b){a=this.aliasMap[a]||a,this.events.trigger(a,b)},d.prototype.passEventBack=function(a){g.getEventBaton().passBatonBackSoft("docKeydown",this.keydown,this,[a])},c.KeyboardListener=d,c.mapKeycodeToKey=h},{"../app":21,backbone:1,underscore:17}],57:[function(a,b,c){c.mock=function(a){var b={},c=function(){};for(var d in a.prototype)b[d]=c;return b}},{}],58:[function(a,b,c){function d(){return window.outerWidth&&window.innerWidth?window.outerWidth/window.innerWidth:(e&&(console.warn("Can't detect zoom level correctly :-/"),e=!1),1)}var e=(a("underscore"),!0),f=!0,g=function(a,b){var c=0;setInterval(function(){var e=d();if(e!==c){if(f)return f=!1,void 0;c=e,a.apply(b,[e])}else f=!0},500)};c.setupZoomPoll=g,c.detectZoom=d},{underscore:17}],59:[function(a,b,c){var d=a("underscore"),e=a("q"),f=(a("../util").isBrowser()?window.Backbone:a("backbone"),a("../util"),a("../intl"),a("../util/keyboard").KeyboardListener,a("../views")),g=f.ModalTerminal,h=f.ContainedBase,i=h.extend({tagName:"div",className:"textGrabber box vertical",template:d.template($("#text-grabber").html()),initialize:function(a){a=a||{},this.JSON={helperText:a.helperText||"Enter some text"},this.container=a.container||new g({title:"Enter some text"}),this.render(),a.initialText&&this.setText(a.initialText),a.wait||this.show()},getText:function(){return this.$("textarea").val()},setText:function(a){this.$("textarea").val(a)}}),j=h.extend({tagName:"div",className:"markdownGrabber box horizontal",template:d.template($("#markdown-grabber-view").html()),events:{"keyup textarea":"keyup"},initialize:function(a){if(a=a||{},this.deferred=a.deferred||e.defer(),a.fromObj&&(a.fillerText=a.fromObj.options.markdowns.join("\n")),this.JSON={previewText:a.previewText||"Preview",fillerText:a.fillerText||"## Enter some markdown!\n\n\n"},this.container=a.container||new g({title:a.title||"Enter some markdown"}),this.render(),!a.withoutButton){var b=e.defer();b.promise.then(d.bind(this.confirmed,this)).fail(d.bind(this.cancelled,this)).done();{new f.ConfirmCancelView({deferred:b,destination:this.getDestination()})}}this.updatePreview(),a.wait||this.show()},confirmed:function(){this.die(),this.deferred.resolve(this.getRawText())},cancelled:function(){this.die(),this.deferred.resolve()},keyup:function(){this.throttledPreview||(this.throttledPreview=d.throttle(d.bind(this.updatePreview,this),500)),this.throttledPreview()},getRawText:function(){return this.$("textarea").val()},exportToArray:function(){return this.getRawText().split("\n")},getExportObj:function(){return{markdowns:this.exportToArray()}},updatePreview:function(){var b=this.getRawText(),c=a("markdown").markdown.toHTML(b);this.$("div.insidePreview").html(c)}}),k=h.extend({tagName:"div",className:"markdownPresenter box vertical",template:d.template($("#markdown-presenter").html()),initialize:function(a){if(a=a||{},this.deferred=a.deferred||e.defer(),this.JSON={previewText:a.previewText||"Here is something for you",fillerText:a.fillerText||"# Yay"},this.container=new g({title:"Check this out..."}),this.render(),!a.noConfirmCancel){var b=new f.ConfirmCancelView({destination:this.getDestination()});b.deferred.promise.then(d.bind(function(){this.deferred.resolve(this.grabText())},this)).fail(d.bind(function(){this.deferred.reject()},this)).done(d.bind(this.die,this))}this.show()},grabText:function(){return this.$("textarea").val()}}),l=h.extend({tagName:"div",className:"demonstrationBuilder box vertical",template:d.template($("#demonstration-builder").html()),events:{"click div.testButton":"testView"},initialize:function(a){if(a=a||{},this.deferred=a.deferred||e.defer(),a.fromObj){var b=a.fromObj.options;a=d.extend({},a,b,{beforeMarkdown:b.beforeMarkdowns.join("\n"),afterMarkdown:b.afterMarkdowns.join("\n")})}this.JSON={},this.container=new g({title:"Demonstration Builder"}),this.render(),this.beforeMarkdownView=new j({container:this,withoutButton:!0,fillerText:a.beforeMarkdown,previewText:"Before demonstration Markdown"}),this.beforeCommandView=new i({container:this,helperText:"The git command(s) to set up the demonstration view (before it is displayed)",initialText:a.beforeCommand||"git checkout -b bugFix"}),this.commandView=new i({container:this,helperText:"The git command(s) to demonstrate to the reader",initialText:a.command||"git commit"}),this.afterMarkdownView=new j({container:this,withoutButton:!0,fillerText:a.afterMarkdown,previewText:"After demonstration Markdown"});{var c=e.defer();new f.ConfirmCancelView({deferred:c,destination:this.getDestination()})}c.promise.then(d.bind(this.confirmed,this)).fail(d.bind(this.cancelled,this)).done()},testView:function(){var b=a("../views/multiView").MultiView;new b({childViews:[{type:"GitDemonstrationView",options:this.getExportObj()}]})},getExportObj:function(){return{beforeMarkdowns:this.beforeMarkdownView.exportToArray(),afterMarkdowns:this.afterMarkdownView.exportToArray(),command:this.commandView.getText(),beforeCommand:this.beforeCommandView.getText()}},confirmed:function(){this.die(),this.deferred.resolve(this.getExportObj())},cancelled:function(){this.die(),this.deferred.resolve()},getInsideElement:function(){return this.$(".insideBuilder")[0]}}),m=h.extend({tagName:"div",className:"multiViewBuilder box vertical",template:d.template($("#multi-view-builder").html()),typeToConstructor:{ModalAlert:j,GitDemonstrationView:l},events:{"click div.deleteButton":"deleteOneView","click div.testButton":"testOneView","click div.editButton":"editOneView","click div.testEntireView":"testEntireView","click div.addView":"addView","click div.saveView":"saveView","click div.cancelView":"cancel"},initialize:function(a){a=a||{},this.deferred=a.deferred||e.defer(),this.multiViewJSON=a.multiViewJSON||{},this.JSON={views:this.getChildViews(),supportedViews:d.keys(this.typeToConstructor)},this.container=new g({title:"Build a MultiView!"}),this.render(),this.show()},saveView:function(){this.hide(),this.deferred.resolve(this.multiViewJSON)},cancel:function(){this.hide(),this.deferred.resolve()},addView:function(a){var b=a.target,c=$(b).attr("data-type"),f=e.defer(),g=this.typeToConstructor[c],h=new g({deferred:f});f.promise.then(d.bind(function(){var a={type:c,options:h.getExportObj()};this.addChildViewObj(a)},this)).fail(function(){}).done()},testOneView:function(b){var c=b.target,d=$(c).attr("data-index"),e=this.getChildViews()[d],f=a("../views/multiView").MultiView;new f({childViews:[e]})},testEntireView:function(){var b=a("../views/multiView").MultiView;new b({childViews:this.getChildViews()})},editOneView:function(a){var b=a.target,c=$(b).attr("data-index"),f=$(b).attr("data-type"),g=e.defer(),h=new this.typeToConstructor[f]({deferred:g,fromObj:this.getChildViews()[c]});g.promise.then(d.bind(function(){var a={type:f,options:h.getExportObj()},b=this.getChildViews();b[c]=a,this.setChildViews(b)},this)).fail(function(){}).done()},deleteOneView:function(a){var b=a.target,c=$(b).attr("data-index"),d=this.getChildViews(),e=d.slice(0,c).concat(d.slice(c+1));this.setChildViews(e),this.update()},addChildViewObj:function(a){var b=this.getChildViews();b.push(a),this.setChildViews(b),this.update()},setChildViews:function(a){this.multiViewJSON.childViews=a},getChildViews:function(){return this.multiViewJSON.childViews||[]},update:function(){this.JSON.views=this.getChildViews(),this.renderAgain()}});c.MarkdownGrabber=j,c.DemonstrationBuilder=l,c.TextGrabber=i,c.MultiViewBuilder=m,c.MarkdownPresenter=k},{"../intl":36,"../util":55,"../util/keyboard":56,"../views":62,"../views/multiView":64,backbone:1,markdown:11,q:14,underscore:17}],60:[function(a,b,c){var d=a("underscore"),e=e=a("../util").isBrowser()?window.Backbone:a("backbone"),f=a("../models/collections").CommandEntryCollection,g=a("../app"),h=a("../models/commandModel").Command,i=a("../models/commandModel").CommandEntry,j=a("../util/errors"),k=j.Warning,l=(a("../util"),a("../log")),m=a("../util/keyboard"),n=e.View.extend({initialize:function(){g.getEvents().on("commandSubmittedPassive",this.addToCommandHistory,this),this.commands=new f,this.commands.fetch({success:d.bind(function(){var a=[];this.commands.each(function(b){a.push(b)}),a.reverse(),this.commands.reset(),d.each(a,function(a){this.commands.add(a)},this)},this)}),this.index=-1,this.commandParagraph=this.$("#prompt p.command")[0],this.commandCursor=this.$("#prompt span.cursor")[0],this.focus(),g.getEvents().on("rollupCommands",this.rollupCommands,this),g.getEventBaton().stealBaton("keydown",this.onKeyDown,this),g.getEventBaton().stealBaton("keyup",this.onKeyUp,this)},events:{"blur #commandTextField":"hideCursor","focus #commandTextField":"showCursor"},blur:function(){this.hideCursor()},focus:function(){this.$("#commandTextField").focus(),this.showCursor()},hideCursor:function(){this.toggleCursor(!1)},showCursor:function(){this.toggleCursor(!0)},toggleCursor:function(a){$(this.commandCursor).toggleClass("shown",a)},onKeyDown:function(a){var b=a.target;this.updatePrompt(b)},onKeyUp:function(a){this.onKeyDown(a);var b={enter:d.bind(function(){this.submit()},this),up:d.bind(function(){this.commandSelectChange(1)},this),down:d.bind(function(){this.commandSelectChange(-1)},this)},c=m.mapKeycodeToKey(a.which||a.keyCode);void 0!==b[c]&&(a.preventDefault(),b[c](),this.onKeyDown(a))},badHtmlEncode:function(a){return a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/</g,"&lt;").replace(/ /g,"&nbsp;").replace(/\n/g,"")},updatePrompt:function(a){a=a||{};var b=$("#commandTextField").val(),c=this.badHtmlEncode(b);this.commandParagraph.innerHTML=c,this.cursorUpdate(b.length,a.selectionStart,a.selectionEnd),g.getEvents().trigger("commandScrollDown")},cursorUpdate:function(b,c,d){(void 0===c||void 0===d)&&(c=Math.max(b-1,0),d=b);var e=a("../util/zoomLevel").detectZoom(),f=10*e,g=22*e,h=$(this.commandParagraph).width(),i=h/f,j=Math.min(Math.max(1,d-c),i),k=String(j*f)+"px",l=String(f*(c%i))+"px",m=String(Math.floor(c/i)*g)+"px";$(this.commandCursor).css({width:k,left:l,top:m})},commandSelectChange:function(a){if(this.index+=a,this.index>=this.commands.length||this.index<0)return this.clear(),this.index=-1,void 0;var b=this.commands.toArray()[this.index].get("text");this.setTextField(b)},clearLocalStorage:function(){this.commands.each(function(a){e.sync("delete",a,function(){})},this)},setTextField:function(a){this.$("#commandTextField").val(a)},clear:function(){this.setTextField("")},submit:function(){var a=this.$("#commandTextField").val().replace("\n","");this.clear(),this.submitCommand(a),this.index=-1},rollupCommands:function(a){var b=this.commands.toArray().slice(1,Number(a)+1);b.reverse();var c="";d.each(b,function(a){c+=a.get("text")+";"},this);var f=new i({text:c});this.commands.unshift(f),e.sync("create",f,function(){})},addToCommandHistory:function(a){var b=a.length&&-1===this.index||a.length&&-1!==this.index&&this.commands.toArray()[this.index].get("text")!==a;if(b){var c=new i({text:a});this.commands.unshift(c),e.sync("create",c,function(){}),this.commands.length>100&&this.clearLocalStorage(),l.commandEntered(a)}},submitCommand:function(a){g.getEventBaton().trigger("commandSubmitted",a)}}),o=e.View.extend({tagName:"div",model:h,template:d.template($("#command-template").html()),events:{click:"clicked"},clicked:function(){},initialize:function(){this.model.bind("change",this.wasChanged,this),this.model.bind("destroy",this.remove,this)},wasChanged:function(a,b){var c=b.changes,e=d.keys(c);0===d.difference(e,["status"]).length?this.updateStatus():this.render()},updateStatus:function(){var a=["inqueue","processing","finished"],b={};d.each(a,function(a){b[a]=!1}),b[this.model.get("status")]=!0;var c=this.$("p.commandLine");d.each(b,function(a,b){c.toggleClass(b,a)})},render:function(){var a=d.extend({resultType:"",result:"",formattedWarnings:this.model.getFormattedWarnings()},this.model.toJSON());return this.$el.html(this.template(a)),this},remove:function(){$(this.el).hide()}}),p=e.View.extend({initialize:function(a){this.collection=a.collection,this.collection.on("add",this.addOne,this),this.collection.on("reset",this.addAll,this),this.collection.on("all",this.render,this),this.collection.on("change",this.scrollDown,this),g.getEvents().on("commandScrollDown",this.scrollDown,this),g.getEvents().on("clearOldCommands",this.clearOldCommands,this)},addWarning:function(a){var b=new k({msg:a}),c=new h({error:b,rawStr:"Warning:"});this.collection.add(c)},clearOldCommands:function(){var a=[];this.collection.each(function(b){"inqueue"!==b.get("status")&&"processing"!==b.get("status")&&a.push(b)},this),d.each(a,function(a){a.destroy()},this),this.scrollDown()},scrollDown:function(){var a=$("#commandDisplay")[0],b=$("#terminal")[0],c=a.clientHeight>b.clientHeight||$(window).height()<a.clientHeight;$(b).toggleClass("scrolling",c),c&&(b.scrollTop=b.scrollHeight)},addOne:function(a){var b=new o({model:a});this.$("#commandDisplay").append(b.render().el),this.scrollDown()},addAll:function(){this.collection.each(this.addOne)}});c.CommandPromptView=n,c.CommandLineHistoryView=p},{"../app":21,"../log":42,"../models/collections":44,"../models/commandModel":45,"../util":55,"../util/errors":53,"../util/keyboard":56,"../util/zoomLevel":58,backbone:1,underscore:17}],61:[function(a,b,c){var d=a("underscore"),e=a("q"),f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=a("../util"),h=a("../util/keyboard").KeyboardListener,i=a("../models/commandModel").Command,j=a("../views").ModalTerminal,k=a("../views").ContainedBase,l=a("../visuals/visualization").Visualization,m=a("../git/headless"),n=k.extend({tagName:"div",className:"gitDemonstrationView box horizontal",template:d.template($("#git-demonstration-view").html()),events:{"click div.command > p.uiButton":"positive"},initialize:function(b){b=b||{},this.options=b,this.JSON=d.extend({beforeMarkdowns:["## Git Commits","","Awesome!"],command:"git commit",afterMarkdowns:["Now you have seen it in action","","Go ahead and try the level!"]},b);var c=function(b){return a("markdown").markdown.toHTML(b.join("\n"))};this.JSON.beforeHTML=c(this.JSON.beforeMarkdowns),this.JSON.afterHTML=c(this.JSON.afterMarkdowns),this.container=new j({title:b.title||"Git Demonstration"}),this.render(),this.checkScroll(),this.navEvents=d.clone(f.Events),this.navEvents.on("positive",this.positive,this),this.navEvents.on("negative",this.negative,this),this.keyboardListener=new h({events:this.navEvents,aliasMap:{enter:"positive",right:"positive",left:"negative"},wait:!0}),this.visFinished=!1,this.initVis(),b.wait||this.show()},receiveMetaNav:function(a,b){a.navEvents.on("positive",this.positive,this),this.metaContainerView=b},checkScroll:function(){var a=this.$("div.demonstrationText").children(),b=d.map(a,function(a){return a.clientHeight}),c=d.reduce(b,function(a,b){return a+b});c<this.$("div.demonstrationText").height()&&this.$("div.demonstrationText").addClass("noLongText")},dispatchBeforeCommand:function(){if(this.options.beforeCommand){var a=e.defer();m.getTreeQuick(this.options.beforeCommand,a),a.promise.then(d.bind(function(a){this.mainVis.gitEngine.loadTree(a),this.mainVis.gitVisuals.refreshTreeHarsh()},this))}},takeControl:function(){this.hasControl=!0,this.keyboardListener.listen(),this.metaContainerView&&this.metaContainerView.lock()},releaseControl:function(){this.hasControl&&(this.hasControl=!1,this.keyboardListener.mute(),this.metaContainerView&&this.metaContainerView.unlock())
},reset:function(){this.mainVis.reset(),this.dispatchBeforeCommand(),this.demonstrated=!1,this.$el.toggleClass("demonstrated",!1),this.$el.toggleClass("demonstrating",!1)},positive:function(){!this.demonstrated&&this.hasControl&&(this.demonstrated=!0,this.demonstrate())},demonstrate:function(){this.$el.toggleClass("demonstrating",!0);var a=e.defer();this.dispatchCommand(this.JSON.command,a),a.promise.then(d.bind(function(){this.$el.toggleClass("demonstrating",!1),this.$el.toggleClass("demonstrated",!0),this.releaseControl()},this))},negative:function(a){this.$el.hasClass("demonstrating")||this.keyboardListener.passEventBack(a)},dispatchCommand:function(a,b){var c=[];g.splitTextCommand(a,function(a){c.push(new i({rawStr:a}))},this);var f=e.defer(),h=f.promise;d.each(c,function(a){h=h.then(d.bind(function(){var b=e.defer();return this.mainVis.gitEngine.dispatch(a,b),b.promise},this)),h=h.then(function(){return e.delay(300)})},this),h=h.then(function(){b.resolve()}),f.resolve()},tearDown:function(){this.mainVis.tearDown(),n.__super__.tearDown.apply(this)},hide:function(){this.releaseControl(),this.reset(),this.visFinished&&(this.mainVis.setTreeIndex(-1),this.mainVis.setTreeOpacity(0)),this.shown=!1,n.__super__.hide.apply(this)},show:function(){this.takeControl(),this.visFinished&&setTimeout(d.bind(function(){this.shown&&(this.mainVis.setTreeIndex(300),this.mainVis.showHarsh())},this),1.5*this.getAnimationTime()),this.shown=!0,n.__super__.show.apply(this)},die:function(){this.visFinished&&n.__super__.die.apply(this)},initVis:function(){this.mainVis=new l({el:this.$("div.visHolder div.visHolderInside")[0],noKeyboardInput:!0,noClick:!0,smallCanvas:!0,zIndex:-1}),this.mainVis.customEvents.on("paperReady",d.bind(function(){this.visFinished=!0,this.dispatchBeforeCommand(),this.shown&&this.show()},this))}});c.GitDemonstrationView=n},{"../git/headless":31,"../models/commandModel":45,"../util":55,"../util/keyboard":56,"../views":62,"../visuals/visualization":75,backbone:1,markdown:11,q:14,underscore:17}],62:[function(a,b,c){var d=a("__browserify_process"),e=a("underscore"),f=a("q"),g=a("../util").isBrowser()?window.Backbone:a("backbone"),h=a("../app"),i=a("../intl"),j=a("../log"),k=a("../util/constants"),l=a("../util/keyboard").KeyboardListener,m=(a("../util/errors").GitError,g.View.extend({getDestination:function(){return this.destination||this.container.getInsideElement()},tearDown:function(){this.$el.remove(),this.container&&this.container.tearDown()},renderAgain:function(a){a=a||this.template(this.JSON),this.$el.html(a)},render:function(a){this.renderAgain(a);var b=this.getDestination();$(b).append(this.el)}})),n=m.extend({resolve:function(){this.deferred.resolve()},reject:function(){this.deferred.reject()}}),o=m.extend({positive:function(){this.navEvents.trigger("positive")},exit:function(){this.navEvents.trigger("exit")},negative:function(){this.navEvents.trigger("negative")}}),p=m.extend({getAnimationTime:function(){return 700},show:function(){this.container.show()},hide:function(){this.container.hide()},die:function(){this.hide(),setTimeout(e.bind(function(){this.tearDown()},this),1.1*this.getAnimationTime())}}),q=p.extend({tagName:"a",className:"generalButton uiButton",template:e.template($("#general-button").html()),events:{click:"click"},initialize:function(a){a=a||{},this.navEvents=a.navEvents||e.clone(g.Events),this.destination=a.destination,this.destination||(this.container=new u),this.JSON={buttonText:a.buttonText||"General Button",wantsWrapper:void 0!==a.wantsWrapper?a.wantsWrapper:!0},this.render(),this.container&&!a.wait&&this.show()},click:function(){this.clickFunc||(this.clickFunc=e.throttle(e.bind(this.sendClick,this),500)),this.clickFunc()},sendClick:function(){this.navEvents.trigger("click")}}),r=n.extend({tagName:"div",className:"confirmCancelView box horizontal justify",template:e.template($("#confirm-cancel-template").html()),events:{"click .confirmButton":"resolve","click .cancelButton":"reject"},initialize:function(a){if(!a.destination)throw new Error("needmore");this.destination=a.destination,this.deferred=a.deferred||f.defer(),this.JSON={confirm:a.confirm||"Confirm",cancel:a.cancel||"Cancel"},this.render()}}),s=o.extend({tagName:"div",className:"leftRightView box horizontal center",template:e.template($("#left-right-template").html()),events:{"click .left":"negative","click .exit":"exit","click .right":"positive"},exit:function(){this.pipeEvents.trigger("exit"),s.__super__.exit.apply(this)},positive:function(){this.pipeEvents.trigger("positive"),s.__super__.positive.apply(this)},negative:function(){this.pipeEvents.trigger("negative"),s.__super__.negative.apply(this)},initialize:function(a){if(!a.destination||!a.events)throw new Error("needmore");this.destination=a.destination,this.pipeEvents=a.events,this.navEvents=e.clone(g.Events),this.JSON={showLeft:void 0===a.showLeft?!0:a.showLeft,lastNav:void 0===a.lastNav?!1:a.lastNav},this.render()}}),t=g.View.extend({tagName:"div",className:"modalView box horizontal center transitionOpacityLinear",template:e.template($("#modal-view-template").html()),getAnimationTime:function(){return 700},initialize:function(){this.shown=!1,this.render()},render:function(){this.$el.html(this.template({})),$("body").append(this.el)},stealKeyboard:function(){h.getEventBaton().stealBaton("keydown",this.onKeyDown,this),h.getEventBaton().stealBaton("keyup",this.onKeyUp,this),h.getEventBaton().stealBaton("windowFocus",this.onWindowFocus,this),h.getEventBaton().stealBaton("documentClick",this.onDocumentClick,this),$("#commandTextField").blur()},releaseKeyboard:function(){h.getEventBaton().releaseBaton("keydown",this.onKeyDown,this),h.getEventBaton().releaseBaton("keyup",this.onKeyUp,this),h.getEventBaton().releaseBaton("windowFocus",this.onWindowFocus,this),h.getEventBaton().releaseBaton("documentClick",this.onDocumentClick,this),h.getEventBaton().trigger("windowFocus")},onWindowFocus:function(){},onDocumentClick:function(){},onKeyDown:function(a){a.preventDefault()},onKeyUp:function(a){a.preventDefault()},show:function(){this.toggleZ(!0),d.nextTick(e.bind(function(){this.toggleShow(!0)},this))},hide:function(){this.toggleShow(!1),setTimeout(e.bind(function(){this.shown||this.toggleZ(!1)},this),this.getAnimationTime())},getInsideElement:function(){return this.$(".contentHolder")},toggleShow:function(a){this.shown!==a&&(a?this.stealKeyboard():this.releaseKeyboard(),this.shown=a,this.$el.toggleClass("show",a))},toggleZ:function(a){this.$el.toggleClass("inFront",a)},tearDown:function(){this.$el.html(""),$("body")[0].removeChild(this.el)}}),u=p.extend({tagName:"div",className:"modalTerminal box flex1",template:e.template($("#terminal-window-template").html()),events:{"click div.inside":"onClick"},initialize:function(a){a=a||{},this.navEvents=a.events||e.clone(g.Events),this.container=new t,this.JSON={title:a.title||"Heed This Warning!"},this.render()},onClick:function(){this.navEvents.trigger("click")},getInsideElement:function(){return this.$(".inside")}}),v=p.extend({tagName:"div",template:e.template($("#modal-alert-template").html()),initialize:function(a){a=a||{},this.JSON={title:a.title||"Something to say",text:a.text||"Here is a paragraph",markdown:a.markdown},a.markdowns&&(this.JSON.markdown=a.markdowns.join("\n")),this.container=new u({title:"Alert!"}),this.render(),a.wait||this.show()},render:function(){var b=this.JSON.markdown?a("markdown").markdown.toHTML(this.JSON.markdown):this.template(this.JSON);this.options._dangerouslyInsertHTML&&(b+=this.options._dangerouslyInsertHTML),v.__super__.render.apply(this,[b])}}),w=g.View.extend({initialize:function(a){a=a||{},this.deferred=a.deferred||f.defer(),this.modalAlert=new v(e.extend({},{markdown:"#you sure?"},a));var b=f.defer();this.buttonDefer=b,this.confirmCancel=new r({deferred:b,destination:this.modalAlert.getDestination()}),b.promise.then(this.deferred.resolve).fail(this.deferred.reject).done(e.bind(function(){this.close()},this)),this.navEvents=e.clone(g.Events),this.navEvents.on("positive",this.positive,this),this.navEvents.on("negative",this.negative,this),this.keyboardListener=new l({events:this.navEvents,aliasMap:{enter:"positive",esc:"negative"}}),a.wait||this.modalAlert.show()},positive:function(){this.buttonDefer.resolve()},negative:function(){this.buttonDefer.reject()},getAnimationTime:function(){return 700},show:function(){this.modalAlert.show()},hide:function(){this.modalAlert.hide()},getPromise:function(){return this.deferred.promise},close:function(){this.keyboardListener.mute(),this.modalAlert.die()}}),x=w.extend({initialize:function(b){b=b||{};var c=b.nextLevel?i.getName(b.nextLevel):"",d=i.getDialog(a("../dialogs/nextLevel"))[0].options.markdowns,f=d.join("\n");f=i.template(f,{numCommands:b.numCommands,best:b.best}),f=b.numCommands<=b.best?f+"\n\n"+i.str("finish-dialog-win"):f+"\n\n"+i.str("finish-dialog-lose",{best:b.best}),f+="\n\n";var g;b.nextLevel?f+=i.str("finish-dialog-next",{nextLevel:c}):g='<p class="catchadream">'+i.str("finish-dialog-finished")+" (ﾉ^_^)ﾉ (ﾉ^_^)ﾉ (ﾉ^_^)ﾉ</p>",b=e.extend({},b,{markdown:f,_dangerouslyInsertHTML:g}),x.__super__.initialize.apply(this,[b])}}),y=g.View.extend({initialize:function(){this.$body=$("body"),h.getEvents().on("vcsModeChange",this.updateMode,this)},updateMode:function(a){a=a||{};var b="git"===a.mode;this.$body.toggleClass("gitMode",b),this.$body.toggleClass("hgMode",!b)}}),z=g.View.extend({initialize:function(){this.grabBatons(),this.modalAlert=new v({markdowns:this.markdowns}),this.modalAlert.show()},grabBatons:function(){h.getEventBaton().stealBaton(this.eventBatonName,this.batonFired,this)},releaseBatons:function(){h.getEventBaton().releaseBaton(this.eventBatonName,this.batonFired,this)},finish:function(){this.releaseBatons(),this.modalAlert.die()}}),A=z.extend({initialize:function(a){this.eventBatonName="windowSizeCheck",this.markdowns=["## That window size is not supported :-/","Please resize your window back to a supported size","","(and of course, pull requests to fix this are appreciated :D)"],A.__super__.initialize.apply(this,[a])},batonFired:function(a){a.w>k.VIEWPORT.minWidth&&a.h>k.VIEWPORT.minHeight&&this.finish()}}),B=z.extend({initialize:function(a){if(!a||!a.level)throw new Error("need level");this.eventBatonName="zoomChange",this.markdowns=["## That zoom level of "+a.level+" is not supported :-/","Please zoom back to a supported zoom level with Ctrl + and Ctrl -","","(and of course, pull requests to fix this are appreciated :D)"],B.__super__.initialize.apply(this,[a])},batonFired:function(a){a<=k.VIEWPORT.maxZoom&&a>=k.VIEWPORT.minZoom&&this.finish()}}),C=m.extend({tagName:"div",className:"levelToolbarHolder",template:e.template($("#level-toolbar-template").html()),initialize:function(a){a=a||{},this.parent=a.parent,this.JSON={name:a.name||"Some level! (unknown name)"},this.beforeDestination=$($("#commandLineHistory div.toolbar")[0]),this.render(),this.$goalButton=this.$el.find("#show-goal"),this.$objectiveButton=this.$el.find("#show-objective");var b=this.parent;this.$goalButton.on("click",function(){b.trigger("toggleGoal")}),this.$objectiveButton.on("click",function(){b.trigger("toggleObjective")}),a.wait||d.nextTick(e.bind(this.show,this))},getAnimationTime:function(){return 700},render:function(){var a=this.template(this.JSON);this.$el.html(a),this.beforeDestination.after(this.el)},die:function(){this.hide(),setTimeout(e.bind(function(){this.tearDown()},this),this.getAnimationTime())},hide:function(){this.$("div.toolbar").toggleClass("hidden",!0)},show:function(){this.$("div.toolbar").toggleClass("hidden",!1)}}),D=m.extend({getClassName:function(){return"BaseHelperBar"},tagName:"div",className:"helperBar transitionAll",template:e.template($("#helper-bar-template").html()),events:{"click a":"onClick"},onClick:function(a){var b=a.target,c=$(b).attr("data-id"),d="on"+c[0].toUpperCase()+c.slice(1)+"Click";this[d].call(this)},show:function(){this.$el.toggleClass("show",!0)},hide:function(){this.$el.toggleClass("show",!1),this.deferred&&this.deferred.resolve()},getItems:function(){return[]},setupChildren:function(){},fireCommand:function(a){h.getEventBaton().trigger("commandSubmitted",a)},showDeferMe:function(a){this.hide();var b=f.defer();a.deferred=b,b.promise.then(e.bind(function(){this.show()},this)),a.show()},onExitClick:function(){this.hide()},initialize:function(a){a=a||{},this.destination=$("body"),this.JSON={items:this.getItems()},this.render(),this.$el.addClass(this.getClassName()),this.setupChildren(),a.wait||this.show()}}),E=D.extend({getClassName:function(){return"IntlHelperBar"},getItems:function(){return[{text:"Git Branching",id:"english"},{text:"日本語版リポジトリ",id:"japanese"},{text:"Git 브랜치 배우기",id:"korean"},{text:"学习 Git 分支",id:"simpchinese"},{text:"學習 Git 分支",id:"tradchinese"},{text:"español",id:"spanish"},{text:"português",id:"portuguese"},{text:"français",id:"french"},{text:"Deutsch",id:"german"},{icon:"signout",id:"exit"}]},fireCommand:function(){j.viewInteracted("intlSelect"),D.prototype.fireCommand.apply(this,arguments)},onJapaneseClick:function(){this.fireCommand("locale ja; levels"),this.hide()},onEnglishClick:function(){this.fireCommand("locale en_US; levels"),this.hide()},onKoreanClick:function(){this.fireCommand("locale ko; levels"),this.hide()},onSpanishClick:function(){this.fireCommand("locale es_AR; levels"),this.hide()},onPortugueseClick:function(){this.fireCommand("locale pt_BR; levels"),this.hide()},onFrenchClick:function(){this.fireCommand("locale fr_FR; levels"),this.hide()},onGermanClick:function(){this.fireCommand("locale de_DE; levels"),this.hide()},onSimpchineseClick:function(){this.fireCommand("locale zh_CN; levels"),this.hide()},onTradchineseClick:function(){this.fireCommand("locale zh_TW; levels"),this.hide()}}),F=D.extend({getClassName:function(){return"CommandsHelperBar"},getItems:function(){return[{text:"Levels",id:"levels"},{text:"Solution",id:"solution"},{text:"Reset",id:"reset"},{text:"Undo",id:"undo"},{text:"Objective",id:"objective"},{text:"Help",id:"help"},{icon:"signout",id:"exit"}]},fireCommand:function(){j.viewInteracted("helperBar"),D.prototype.fireCommand.apply(this,arguments)},onSolutionClick:function(){this.fireCommand("show solution")},onObjectiveClick:function(){this.fireCommand("objective")},onLevelsClick:function(){this.fireCommand("levels")},onResetClick:function(){this.fireCommand("reset")},onUndoClick:function(){this.fireCommand("undo")},onHelpClick:function(){this.fireCommand("help general; git help")}}),G=D.extend({getItems:function(){return[{icon:"question-sign",id:"commands"},{icon:"globe",id:"intl"},{newPageLink:!0,icon:"facebook",id:"fb",href:"https://www.facebook.com/LearnGitBranching"}]},onFbClick:function(){j.viewInteracted("fbPageLink")},onIntlClick:function(){this.showDeferMe(this.intlHelper),j.viewInteracted("openIntlBar")},onCommandsClick:function(){this.showDeferMe(this.commandsHelper),j.viewInteracted("openCommandsBar")},setupChildren:function(){this.commandsHelper=new F({wait:!0}),this.intlHelper=new E({wait:!0})}}),H=m.extend({tagName:"div",className:"canvasTerminalHolder box flex1",template:e.template($("#terminal-window-bare-template").html()),events:{"click div.wrapper":"onClick"},initialize:function(a){a=a||{},this.parent=a.parent,this.minHeight=a.minHeight||200,this.destination=$("body"),this.JSON={title:a.title||i.str("goal-to-reach"),text:a.text||i.str("hide-goal")},this.render(),this.inDom=!0,this.$terminal=this.$el.find(".terminal-window-holder").first(),this.$terminal.height(.8*$(window).height()),this.$terminal.draggable({cursor:"move",handle:".toolbar",containment:"#interfaceWrapper",scroll:!1}),$(window).on("resize",e.debounce(e.bind(this.recalcLayout,this),300)),a.additionalClass&&this.$el.addClass(a.additionalClass)},getAnimationTime:function(){return 700},onClick:function(){this.die()},die:function(){this.minimize(),this.inDom=!1,setTimeout(e.bind(function(){this.tearDown()},this),this.getAnimationTime())},minimize:function(){this.parent.trigger("minimizeCanvas",{left:this.$terminal.css("left"),top:this.$terminal.css("top")},{width:this.$terminal.css("width"),height:this.$terminal.css("height")}),this.$terminal.animate({height:"0px",opacity:0},this.getAnimationTime())},restore:function(a,b){var c=this;a=a||{top:this.$terminal.css("top"),left:this.$terminal.css("left")},b=b||{width:this.$terminal.css("width"),height:this.$terminal.css("height")},this.$terminal.css({top:a.top,left:a.left,width:b.width,height:"0px",opacity:"0"}),this.$terminal.animate({height:b.height,opacity:1},this.getAnimationTime(),function(){c.recalcLayout()})},recalcLayout:function(){var a=this.parent,b=0,c=0,d=0,e=this.$terminal.outerWidth(),f=this.$terminal.outerHeight(),g=this.$terminal.offset().left,h=this.$terminal.offset().top,i=$(window).width()-(g+e),j=$(window).height()-(h+f),k=.75*$(window).height(),l=.95*$(window).height();0>h&&(c=-h),0>g&&(b=-g),0>i&&(b=i),0>j&&(c=j),k>f&&(d=k-f),f>l&&(d=l-f),g=Math.max(g+b,0),h=Math.max(h+c,0),f=Math.max(f+d,k),this.$terminal.animate({left:g+"px",top:h+"px",height:f+"px"},this.getAnimationTime(),function(){a.trigger("resizeCanvas")})},getCanvasLocation:function(){return this.$("div.inside")[0]}});c.BaseView=m,c.BackgroundView=y,c.GeneralButton=q,c.ModalView=t,c.ModalTerminal=u,c.ModalAlert=v,c.ContainedBase=p,c.ConfirmCancelView=r,c.LeftRightView=s,c.ZoomAlertWindow=B,c.ConfirmCancelTerminal=w,c.WindowSizeAlertWindow=A,c.MainHelperBar=G,c.CanvasTerminalHolder=H,c.LevelToolbar=C,c.NextLevelConfirm=x},{"../app":21,"../dialogs/nextLevel":26,"../intl":36,"../log":42,"../util":55,"../util/constants":51,"../util/errors":53,"../util/keyboard":56,__browserify_process:5,backbone:1,markdown:11,q:14,underscore:17}],63:[function(a,b,c){var d=a("underscore"),e=(a("q"),a("../util").isBrowser()?window.Backbone:a("backbone")),f=a("../stores/LocaleStore"),g=a("../util"),h=a("../intl"),i=a("../log"),j=a("../util/keyboard").KeyboardListener,k=a("../app"),l=a("../stores/LevelStore"),m=a("../views").ModalTerminal,n=a("../views").ContainedBase,o=a("../views").BaseView,p=a("../../levels"),q=n.extend({tagName:"div",className:"levelDropdownView box vertical",template:d.template($("#level-dropdown-view").html()),events:{"click div.levelDropdownTab":"onTabClick"},initialize:function(a){a=a||{};var b=g.parseQueryString(window.location.href);this.JSON={selectedTab:b.defaultTab||"main",tabs:[{id:"main",name:h.todo("Main")},{id:"remote",name:h.todo("Remote")}]},this.navEvents=d.clone(e.Events),this.navEvents.on("clickedID",d.debounce(d.bind(this.loadLevelID,this),300,!0)),this.navEvents.on("negative",this.negative,this),this.navEvents.on("positive",this.positive,this),this.navEvents.on("left",this.left,this),this.navEvents.on("right",this.right,this),this.navEvents.on("up",this.up,this),this.navEvents.on("down",this.down,this),this.keyboardListener=new j({events:this.navEvents,aliasMap:{esc:"negative",enter:"positive"},wait:!0}),this.sequences=l.getSequences(),this.sequenceToLevels=l.getSequenceToLevels(),this.container=new m({title:h.str("select-a-level")});var c=this;f.subscribe(function(){c.render.apply(c)}),l.subscribe(function(){c.render()}),this.render(),a.wait||this.show()},render:function(){q.__super__.render.apply(this,arguments),this.buildSequences()},onTabClick:function(a){var b=a.target||a.srcElement,c=$(b).attr("data-id");c!==this.JSON.selectedTab&&(this.selectedTab=c,this.updateTabTo(c))},updateTabTo:function(a){this.JSON.selectedTab=a,this.render(),this.selectedID&&(this.selectedSequence=this.getSequencesOnTab()[0],this.selectedIndex=0,this.updateSelectedIcon())},positive:function(){this.selectedID&&this.loadLevelID(this.selectedID)},left:function(){this.turnOnKeyboardSelection()||this.leftOrRight(-1)},updateSelectedIcon:function(){this.selectedID=this.getSelectedID(),this.selectIconByID(this.selectedID)},leftOrRight:function(a){this.deselectIconByID(this.selectedID);var b=this.selectedIndex+a,c=this.getCurrentSequence(),d=this.JSON.tabs;b>=c.length&&this.getTabIndex()+1<d.length?(this.switchToTabIndex(this.getTabIndex()+1),this.selectedIndex=0):0>b&&this.getTabIndex()-1>=0?(this.switchToTabIndex(this.getTabIndex()-1),this.selectedIndex=0):this.selectedIndex=this.wrapIndex(this.selectedIndex+a,this.getCurrentSequence()),this.updateSelectedIcon()},right:function(){this.turnOnKeyboardSelection()||this.leftOrRight(1)},up:function(){this.turnOnKeyboardSelection()||(this.selectedSequence=this.getPreviousSequence(),this.downOrUp())},down:function(){this.turnOnKeyboardSelection()||(this.selectedSequence=this.getNextSequence(),this.downOrUp())},downOrUp:function(){this.selectedIndex=this.boundIndex(this.selectedIndex,this.getCurrentSequence()),this.deselectIconByID(this.selectedID),this.updateSelectedIcon()},turnOnKeyboardSelection:function(){return this.selectedID?!1:(this.selectFirst(),!0)},turnOffKeyboardSelection:function(){this.selectedID&&(this.deselectIconByID(this.selectedID),this.selectedID=void 0,this.selectedIndex=void 0,this.selectedSequence=void 0)},getTabIndex:function(){var a=d.map(this.JSON.tabs,function(a){return a.id});return a.indexOf(this.JSON.selectedTab)},switchToTabIndex:function(a){var b=this.JSON.tabs[a].id;this.updateTabTo(b)},wrapIndex:function(a,b){return a=a>=b.length?0:a,a=0>a?b.length-1:a},boundIndex:function(a,b){return a=a>=b.length?b.length-1:a,a=0>a?0:a},getSequencesOnTab:function(){return d.filter(this.sequences,function(a){var b=p.getTabForSequence(a);return b===this.JSON.selectedTab},this)},getNextSequence:function(){var a=this.getSequenceIndex(this.selectedSequence),b=this.wrapIndex(a+1,this.getSequencesOnTab());return this.getSequencesOnTab()[b]},getPreviousSequence:function(){var a=this.getSequenceIndex(this.selectedSequence),b=this.wrapIndex(a-1,this.getSequencesOnTab());return this.getSequencesOnTab()[b]},getSequenceIndex:function(a){var b=this.getSequencesOnTab().indexOf(a);if(0>b)throw new Error("didnt find");return b},getIndexForID:function(a){return l.getLevel(a).index},selectFirst:function(){var a=this.sequenceToLevels[this.getSequencesOnTab()[0]][0].id;this.selectIconByID(a),this.selectedIndex=0,this.selectedSequence=this.getSequencesOnTab()[0]},getCurrentSequence:function(){return this.sequenceToLevels[this.selectedSequence]},getSelectedID:function(){return this.sequenceToLevels[this.selectedSequence][this.selectedIndex].id},selectIconByID:function(a){this.toggleIconSelect(a,!0)},deselectIconByID:function(a){this.toggleIconSelect(a,!1)},toggleIconSelect:function(a,b){this.selectedID=a;var c="#levelIcon-"+a;$(c).toggleClass("selected",b),d.each(this.seriesViews,function(b){return-1===b.levelIDs.indexOf(a)?(b.resetAbout(),void 0):(b.updateAboutForLevelID(a),void 0)},this)},negative:function(){this.hide()},testOption:function(a){return this.currentCommand&&new RegExp("--"+a).test(this.currentCommand.get("rawStr"))},show:function(a,b){this.currentCommand=b,this.updateSolvedStatus(),this.showDeferred=a,this.keyboardListener.listen(),q.__super__.show.apply(this)},hide:function(){this.showDeferred&&this.showDeferred.resolve(),this.showDeferred=void 0,this.keyboardListener.mute(),this.turnOffKeyboardSelection(),q.__super__.hide.apply(this)},loadLevelID:function(a){if(!this.testOption("noOutput")){k.getEventBaton().trigger("commandSubmitted","level "+a);var b=l.getLevel(a),c=b.name.en_US;i.levelSelected(c)}this.hide()},updateSolvedStatus:function(){d.each(this.seriesViews,function(a){a.updateSolvedStatus()},this)},buildSequences:function(){this.seriesViews=[],d.each(this.getSequencesOnTab(),function(a){this.seriesViews.push(new r({destination:this.$el,name:a,navEvents:this.navEvents}))},this)}}),r=o.extend({tagName:"div",className:"seriesView box flex1 vertical",template:d.template($("#series-view").html()),events:{"click div.levelIcon":"click","mouseenter div.levelIcon":"enterIcon","mouseleave div.levelIcon":"leaveIcon"},initialize:function(a){this.name=a.name||"intro",this.navEvents=a.navEvents,this.info=l.getSequenceInfo(this.name),this.levels=l.getLevelsInSequence(this.name),this.levelIDs=[],d.each(this.levels,function(a){this.levelIDs.push(a.id)},this),this.destination=a.destination,this.JSON={displayName:h.getIntlKey(this.info,"displayName"),about:h.getIntlKey(this.info,"about")||"&nbsp;",ids:this.levelIDs},this.render(),this.updateSolvedStatus()},updateSolvedStatus:function(){this.$("div.levelIcon").each(function(a,b){var c=$(b).attr("data-id");$(b).toggleClass("solved",l.isLevelSolved(c))})},getEventID:function(a){var b=a.target;return $(b).attr("data-id")},resetAbout:function(){this.$("p.about").text(h.getIntlKey(this.info,"about")).css("font-style","inherit")},setAbout:function(a){this.$("p.about").text(a).css("font-style","italic")},enterIcon:function(a){var b=this.getEventID(a);this.updateAboutForLevelID(b)},updateAboutForLevelID:function(a){var b=l.getLevel(a);this.setAbout(h.getName(b))},leaveIcon:function(){this.resetAbout()},click:function(a){var b=this.getEventID(a);this.navEvents.trigger("clickedID",b)}});c.LevelDropdownView=q},{"../../levels":77,"../app":21,"../intl":36,"../log":42,"../stores/LevelStore":49,"../stores/LocaleStore":50,"../util":55,"../util/keyboard":56,"../views":62,backbone:1,q:14,underscore:17}],64:[function(a,b,c){var d=a("underscore"),e=a("q"),f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=(a("../views").ModalTerminal,a("../views").ContainedBase,a("../views").ConfirmCancelView,a("../views").LeftRightView),h=a("../views").ModalAlert,i=a("../views/gitDemonstrationView").GitDemonstrationView,j=a("../views/builderViews"),k=j.MarkdownPresenter,l=a("../util/keyboard").KeyboardListener,m=(a("../util/errors").GitError,f.View.extend({tagName:"div",className:"multiView",navEventDebounce:550,deathTime:700,typeToConstructor:{ModalAlert:h,GitDemonstrationView:i,MarkdownPresenter:k},initialize:function(a){a=a||{},this.childViewJSONs=a.childViews||[{type:"ModalAlert",options:{markdown:"Woah wtf!!"}},{type:"GitDemonstrationView",options:{command:"git checkout -b side; git commit; git commit"}},{type:"ModalAlert",options:{markdown:"Im second"}}],this.deferred=a.deferred||e.defer(),this.childViews=[],this.currentIndex=0,this.navEvents=d.clone(f.Events),this.navEvents.on("negative",this.getNegFunc(),this),this.navEvents.on("positive",this.getPosFunc(),this),this.navEvents.on("quit",this.finish,this),this.navEvents.on("exit",this.finish,this),this.keyboardListener=new l({events:this.navEvents,aliasMap:{left:"negative",right:"positive",enter:"positive",esc:"quit"}}),this.render(),a.wait||this.start()},onWindowFocus:function(){},getAnimationTime:function(){return 700},getPromise:function(){return this.deferred.promise},getPosFunc:function(){return d.debounce(d.bind(function(){this.navForward()},this),this.navEventDebounce,!0)},getNegFunc:function(){return d.debounce(d.bind(function(){this.navBackward()},this),this.navEventDebounce,!0)},lock:function(){this.locked=!0},unlock:function(){this.locked=!1},navForward:function(){return this.locked?void 0:this.currentIndex===this.childViews.length-1?(this.hideViewIndex(this.currentIndex),this.finish(),void 0):(this.navIndexChange(1),void 0)},navBackward:function(){0!==this.currentIndex&&this.navIndexChange(-1)},navIndexChange:function(a){this.hideViewIndex(this.currentIndex),this.currentIndex+=a,this.showViewIndex(this.currentIndex)},hideViewIndex:function(a){this.childViews[a].hide()},showViewIndex:function(a){this.childViews[a].show()},finish:function(){this.keyboardListener.mute(),d.each(this.childViews,function(a){a.die()}),this.deferred.resolve()},start:function(){this.showViewIndex(this.currentIndex)},createChildView:function(a){var b=a.type;if(!this.typeToConstructor[b])throw new Error('no constructor for type "'+b+'"');var c=new this.typeToConstructor[b](d.extend({},a.options,{wait:!0}));return c},addNavToView:function(a,b){var c=new g({events:this.navEvents,destination:a.getDestination(),showLeft:0!==b,lastNav:b===this.childViewJSONs.length-1});a.receiveMetaNav&&a.receiveMetaNav(c,this)},render:function(){d.each(this.childViewJSONs,function(a,b){var c=this.createChildView(a);this.childViews.push(c),this.addNavToView(c,b)},this)}}));c.MultiView=m},{"../util":55,"../util/errors":53,"../util/keyboard":56,"../views":62,"../views/builderViews":59,"../views/gitDemonstrationView":61,backbone:1,q:14,underscore:17}],65:[function(a,b,c){var d=(a("../util/errors").GitError,a("underscore")),e=a("q"),f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=a("../views").ModalTerminal,h=a("../views").ContainedBase,i=a("../views").ConfirmCancelView,j=(a("../views").LeftRightView,h.extend({tagName:"div",template:d.template($("#interactive-rebase-template").html()),initialize:function(a){this.deferred=a.deferred,this.rebaseMap={},this.entryObjMap={},this.options=a,this.rebaseEntries=new l,a.toRebase.reverse(),d.each(a.toRebase,function(a){var b=a.get("id");this.rebaseMap[b]=a,this.entryObjMap[b]=new k({id:b}),this.rebaseEntries.add(this.entryObjMap[b])},this),this.container=new g({title:"Interactive Rebase"}),this.render(),this.show(),a.aboveAll&&$("#canvasHolder").css("display","none")},restoreVis:function(){$("#canvasHolder").css("display","inherit")},confirm:function(){this.die(),this.options.aboveAll&&this.restoreVis();var a=[];this.$("ul.rebaseEntries li").each(function(b,c){a.push(c.id)});var b=[];d.each(a,function(a){this.entryObjMap[a].get("pick")&&b.unshift(this.rebaseMap[a])},this),b.reverse(),this.deferred.resolve(b),this.$el.html("")},render:function(){var a={num:d.keys(this.rebaseMap).length,solutionOrder:this.options.initialCommitOrdering},b=this.container.getInsideElement();this.$el.html(this.template(a)),$(b).append(this.el);var c=this.$("ul.rebaseEntries");this.rebaseEntries.each(function(a){new m({el:c,model:a})},this),c.sortable({axis:"y",placeholder:"rebaseEntry transitionOpacity ui-state-highlight",appendTo:"parent"}),this.makeButtons()},cancel:function(){this.hide(),this.options.aboveAll&&this.restoreVis(),this.deferred.resolve([])},makeButtons:function(){var a=e.defer();a.promise.then(d.bind(function(){this.confirm()},this)).fail(d.bind(function(){this.cancel()},this)).done(),new i({destination:this.$(".confirmCancel"),deferred:a})}})),k=f.Model.extend({defaults:{pick:!0},toggle:function(){this.set("pick",!this.get("pick"))}}),l=f.Collection.extend({model:k}),m=f.View.extend({tagName:"li",template:d.template($("#interactive-rebase-entry-template").html()),toggle:function(){this.model.toggle(),this.listEntry.toggleClass("notPicked",!this.model.get("pick"))},initialize:function(){this.render()},render:function(){this.model.toJSON();this.$el.append(this.template(this.model.toJSON())),this.listEntry=this.$el.children(":last"),this.listEntry.delegate("#toggleButton","click",d.bind(function(){this.toggle()},this))}});c.InteractiveRebaseView=j},{"../util":55,"../util/errors":53,"../views":62,backbone:1,q:14,underscore:17}],66:[function(a,b,c){var d=a("underscore"),e=(a("backbone"),a("q")),f=a("./index").Animation,g=a("./index").PromiseAnimation,h=a("../../util/constants").GRAPHICS,i={},j=function(a,b){var c=1*h.defaultAnimationTime,d=2*c,e=function(){a.refreshTree(c),b.setBirth(),b.parentInFront(),a.visBranchesFront(),b.animateUpdatedPosition(d,"bounce"),b.animateOutgoingEdges(c)};return{animation:e,duration:Math.max(c,d)}},k=function(a,b){var c=.66*h.defaultAnimationTime,d=2*c;return{animation:function(){a.highlightTo(b,d,"easeInOut")},duration:1.5*d}};i.genCommitBirthAnimation=function(a,b,c){if(!a)throw new Error("Need animation queue to add closure to!");var d=b.get("visNode"),e=j(c,d);a.add(new f({closure:e.animation,duration:e.duration}))},i.genCommitBirthPromiseAnimation=function(a,b){var c=a.get("visNode");return new g(j(b,c))},i.highlightEachWithPromise=function(a,b,c){return d.each(b,function(b){a=a.then(d.bind(function(){return this.playHighlightPromiseAnimation(b,c)},this))},this),a},i.playCommitBirthPromiseAnimation=function(a,b){var c=this.genCommitBirthPromiseAnimation(a,b);return c.play(),c.getPromise()
},i.playRefreshAnimationAndFinish=function(a,b){var c=new g({closure:function(){a.refreshTree()}});c.play(),b.thenFinish(c.getPromise())},i.genRefreshPromiseAnimation=function(a){return new g({closure:function(){a.refreshTree()}})},i.playRefreshAnimationSlow=function(a){var b=h.defaultAnimationTime;return this.playRefreshAnimation(a,2*b)},i.playRefreshAnimation=function(a,b){var c=new g({duration:b,closure:function(){a.refreshTree(b)}});return c.play(),c.getPromise()},i.refreshTree=function(a,b){a.add(new f({closure:function(){b.refreshTree()}}))},i.genHighlightPromiseAnimation=function(a,b){var c=b.get("visBranch")||b.get("visNode")||b.get("visTag");if(!c)throw console.log(b),new Error("could not find vis object for dest obj");var d=a.get("visNode");return new g(k(d,c))},i.playHighlightPromiseAnimation=function(a,b){var c=this.genHighlightPromiseAnimation(a,b);return c.play(),c.getPromise()},i.getDelayedPromise=function(a){var b=e.defer();return setTimeout(b.resolve,a||1e3),b.promise},i.delay=function(a,b){b=b||h.defaultAnimationTime,a.add(new f({closure:function(){},duration:b}))},c.AnimationFactory=i},{"../../util/constants":51,"./index":67,backbone:1,q:14,underscore:17}],67:[function(a,b,c){var d=a("underscore"),e=a("q"),f=a("backbone"),g=a("../../actions/GlobalStateActions"),h=a("../../util/constants").GRAPHICS,i=f.Model.extend({defaults:{duration:h.defaultAnimationTime,closure:null},validateAtInit:function(){if(!this.get("closure"))throw new Error("give me a closure!")},initialize:function(){this.validateAtInit()},run:function(){this.get("closure")()}}),j=f.Model.extend({defaults:{animations:null,index:0,callback:null,defer:!1,promiseBased:!1},initialize:function(a){this.set("animations",[]),a.callback||console.warn("no callback")},thenFinish:function(a,b){a.then(d.bind(function(){this.finish()},this)),a.fail(function(a){throw console.log("uncaught error",a),a}),this.set("promiseBased",!0),b&&b.resolve()},add:function(a){if(!a instanceof i)throw new Error("Need animation not something else");this.get("animations").push(a)},start:function(){this.set("index",0),g.changeIsAnimating(!0),this.next()},finish:function(){g.changeIsAnimating(!1),this.get("callback")()},next:function(){var a=this.get("animations"),b=this.get("index");if(b>=a.length)return this.finish(),void 0;var c=a[b],e=c.get("duration");c.run(),this.set("index",b+1),setTimeout(d.bind(function(){this.next()},this),e)}}),k=f.Model.extend({defaults:{deferred:null,closure:null,duration:h.defaultAnimationTime},initialize:function(a){if(!a.closure&&!a.animation)throw new Error("need closure or animation");this.set("closure",a.closure||a.animation),this.set("duration",a.duration||this.get("duration")),this.set("deferred",a.deferred||e.defer())},getPromise:function(){return this.get("deferred").promise},play:function(){this.get("closure")(),setTimeout(d.bind(function(){this.get("deferred").resolve()},this),this.get("duration"))},then:function(a){return this.get("deferred").promise.then(a)}});k.fromAnimation=function(a){return new k({closure:a.get("closure"),duration:a.get("duration")})},c.Animation=i,c.PromiseAnimation=k,c.AnimationQueue=j},{"../../actions/GlobalStateActions":18,"../../util/constants":51,backbone:1,q:14,underscore:17}],68:[function(a,b,c){function d(b){b=b||{},this.options=b,this.visualization=b.visualization,this.commitCollection=b.commitCollection,this.branchCollection=b.branchCollection,this.tagCollection=b.tagCollection,this.visNodeMap={},this.visEdgeCollection=new p,this.visBranchCollection=new l,this.visTagCollection=new n,this.commitMap={},this.rootCommit=null,this.branchStackMap=null,this.tagStackMap=null,this.upstreamBranchSet=null,this.upstreamTagSet=null,this.upstreamHeadSet=null,this.paper=b.paper,this.gitReady=!1,this.branchCollection.on("add",this.addBranchFromEvent,this),this.branchCollection.on("remove",this.removeBranch,this),this.tagCollection.on("add",this.addTagFromEvent,this),this.tagCollection.on("remove",this.removeTag,this),this.deferred=[],this.flipFraction=.65;var c=a("../app");c.getEvents().on("refreshTree",this.refreshTree,this)}function e(a){var b=0,c=0,d=0,e=0,g=a.length;f.each(a,function(a){var f=a.split("(")[1];f=f.split(")")[0],f=f.split(","),d+=parseFloat(f[1]),e+=parseFloat(f[2]);var g=parseFloat(f[0]),h=g*Math.PI*2;b+=Math.cos(h),c+=Math.sin(h)}),b/=g,c/=g,d/=g,e/=g;var h=Math.atan2(c,b)/(2*Math.PI);return 0>h&&(h+=1),"hsb("+String(h)+","+String(d)+","+String(e)+")"}var f=a("underscore"),g=a("q"),h=a("../util/constants").GRAPHICS,i=a("../stores/GlobalStateStore"),j=a("../visuals/visNode").VisNode,k=a("../visuals/visBranch").VisBranch,l=a("../visuals/visBranch").VisBranchCollection,m=a("../visuals/visTag").VisTag,n=a("../visuals/visTag").VisTagCollection,o=a("../visuals/visEdge").VisEdge,p=a("../visuals/visEdge").VisEdgeCollection;d.prototype.defer=function(a){this.deferred.push(a)},d.prototype.deferFlush=function(){f.each(this.deferred,function(a){a()},this),this.deferred=[]},d.prototype.resetAll=function(){var a=this.visEdgeCollection.toArray();f.each(a,function(a){a.remove()},this);var b=this.visBranchCollection.toArray();f.each(b,function(a){a.remove()},this);var c=this.visTagCollection.toArray();f.each(c,function(a){a.remove()},this),f.each(this.visNodeMap,function(a){a.remove()},this),this.visEdgeCollection.reset(),this.visBranchCollection.reset(),this.visTagCollection.reset(),this.visNodeMap={},this.rootCommit=null,this.commitMap={}},d.prototype.tearDown=function(){this.resetAll(),this.paper.remove()},d.prototype.assignGitEngine=function(a){this.gitEngine=a,this.initHeadBranch(),this.deferFlush()},d.prototype.getVisualization=function(){return this.visualization},d.prototype.initHeadBranch=function(){this.addBranchFromEvent(this.gitEngine.HEAD)},d.prototype.getScreenPadding=function(){var a=i.getFlipTreeY()?3:1.5;return{widthPadding:1.5*h.nodeRadius,topHeightPadding:h.nodeRadius*a,bottomHeightPadding:5*h.nodeRadius}},d.prototype.getPosBoundaries=function(){return this.gitEngine.hasOrigin()?{min:0,max:.5}:this.gitEngine.isOrigin()?{min:.5,max:1}:{min:0,max:1}},d.prototype.getFlipPos=function(){var a=this.getPosBoundaries(),b=a.min,c=a.max;return this.flipFraction*(c-b)+b},d.prototype.getIsGoalVis=function(){return!!this.options.isGoalVis},d.prototype.getLevelBlob=function(){return this.visualization.options.levelBlob||{}},d.prototype.toScreenCoords=function(a){if(!this.paper.width)throw new Error("being called too early for screen coords");var b=this.getScreenPadding(),c=function(a,b,c){return c+a*(b-2*c)},d=function(a,b,c,d){return c+a*(b-d-c)},e=c(a.x,this.paper.width,b.widthPadding),f=d(a.y,this.paper.height,b.topHeightPadding,b.bottomHeightPadding);return i.getFlipTreeY()&&(f=this.paper.height-f),{x:e,y:f}},d.prototype.animateAllAttrKeys=function(a,b,c,d){var e=g.defer(),i=function(e){e.animateAttrKeys(a,b,c,d)};this.visBranchCollection.each(i),this.visEdgeCollection.each(i),this.visTagCollection.each(i),f.each(this.visNodeMap,i);var j=void 0!==c?c:h.defaultAnimationTime;return setTimeout(function(){e.resolve()},j),e.promise},d.prototype.finishAnimation=function(){var a=g.defer(),b=g.defer(),c=h.defaultAnimationTime,d=h.nodeRadius,e="Solved!!\n:D",i=null,j=f.bind(function(){i=this.paper.text(this.paper.width/2,this.paper.height/2,e),i.attr({opacity:0,"font-weight":500,"font-size":"32pt","font-family":"Monaco, Courier, font-monospace",stroke:"#000","stroke-width":2,fill:"#000"}),i.animate({opacity:1},c)},this);return a.promise.then(f.bind(function(){return this.animateAllAttrKeys({exclude:["circle"]},{opacity:0},1.1*c)},this)).then(f.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{r:2*d},1.5*c)},this)).then(f.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{r:.75*d},.5*c)},this)).then(f.bind(function(){return j(),this.explodeNodes()},this)).then(f.bind(function(){return this.explodeNodes()},this)).then(f.bind(function(){return this.animateAllAttrKeys({exclude:["arrow","rect","path","text"]},{},1.25*c)},this)).then(f.bind(function(){return i.animate({opacity:0},c,void 0,void 0,function(){i.remove()}),this.animateAllAttrKeys({},{})},this)).then(function(){b.resolve()}).fail(function(a){console.warn("animation error"+a)}).done(),a.resolve(),b.promise},d.prototype.explodeNodes=function(){var a=g.defer(),b=[];f.each(this.visNodeMap,function(a){b.push(a.getExplodeStepFunc())});var c=setInterval(function(){var d=[];return f.each(b,function(a){a()&&d.push(a)}),d.length?(b=d,void 0):(clearInterval(c),a.resolve(),void 0)},.025);return a.promise},d.prototype.animateAllFromAttrToAttr=function(a,b,c){var d=function(d){var e=d.getID();f.include(c,e)||a[e]&&b[e]&&d.animateFromAttrToAttr(a[e],b[e])};this.visBranchCollection.each(d),this.visEdgeCollection.each(d),this.visTagCollection.each(d),f.each(this.visNodeMap,d)},d.prototype.genSnapshot=function(){this.fullCalc();var a={};return f.each(this.visNodeMap,function(b){a[b.get("id")]=b.getAttributes()},this),this.visBranchCollection.each(function(b){a[b.getID()]=b.getAttributes()},this),this.visEdgeCollection.each(function(b){a[b.getID()]=b.getAttributes()},this),this.visTagCollection.each(function(b){a[b.getID()]=b.getAttributes()},this),a},d.prototype.refreshTree=function(a){this.gitReady&&this.gitEngine.rootCommit&&(this.fullCalc(),this.animateAll(a))},d.prototype.refreshTreeHarsh=function(){this.fullCalc(),this.animateAll(0)},d.prototype.animateAll=function(a){this.zIndexReflow(),this.animateEdges(a),this.animateNodePositions(a),this.animateRefs(a)},d.prototype.fullCalc=function(){this.calcTreeCoords(),this.calcGraphicsCoords()},d.prototype.calcTreeCoords=function(){if(!this.rootCommit)throw new Error("grr, no root commit!");this.calcUpstreamSets(),this.calcBranchStacks(),this.calcTagStacks(),this.calcDepth(),this.calcWidth()},d.prototype.calcGraphicsCoords=function(){this.visBranchCollection.each(function(a){a.updateName()}),this.visTagCollection.each(function(a){a.updateName()})},d.prototype.calcUpstreamSets=function(){this.upstreamBranchSet=this.gitEngine.getUpstreamBranchSet(),this.upstreamHeadSet=this.gitEngine.getUpstreamHeadSet(),this.upstreamTagSet=this.gitEngine.getUpstreamTagSet()},d.prototype.getCommitUpstreamBranches=function(a){return this.branchStackMap[a.get("id")]},d.prototype.getBlendedHuesForCommit=function(a){var b=this.upstreamBranchSet[a.get("id")];if(!b)throw new Error("that commit doesnt have upstream branches!");return this.blendHuesFromBranchStack(b)},d.prototype.blendHuesFromBranchStack=function(a){var b=[];return f.each(a,function(a){var c=a.obj.get("visBranch").get("fill");if("hsb"!==c.slice(0,3)){var d=Raphael.color(c);c="hsb("+String(d.h)+","+String(d.l),c=c+","+String(d.s)+")"}b.push(c)}),e(b)},d.prototype.getCommitUpstreamStatus=function(a){if(!this.upstreamBranchSet)throw new Error("Can't calculate this yet!");var b=a.get("id"),c=this.upstreamBranchSet,d=this.upstreamHeadSet,e=this.upstreamTagSet;return c[b]?"branch":e[b]?"tag":d[b]?"head":"none"},d.prototype.calcTagStacks=function(){var a=this.gitEngine.getTags(),b={};f.each(a,function(a){var c=a.target.get("id");b[c]=b[c]||[],b[c].push(a),b[c].sort(function(a,b){var c=a.obj.get("id"),d=b.obj.get("id");return c.localeCompare(d)})}),this.tagStackMap=b},d.prototype.calcBranchStacks=function(){var a=this.gitEngine.getBranches(),b={};f.each(a,function(a){var c=a.target.get("id");b[c]=b[c]||[],b[c].push(a),b[c].sort(function(a,b){var c=a.obj.get("id"),d=b.obj.get("id");return"master"==c||"master"==d?"master"==c?-1:1:c.localeCompare(d)})}),this.branchStackMap=b},d.prototype.calcWidth=function(){this.maxWidthRecursive(this.rootCommit);var a=this.getPosBoundaries();this.assignBoundsRecursive(this.rootCommit,a.min,a.max)},d.prototype.maxWidthRecursive=function(a){var b=0;f.each(a.get("children"),function(c){if(c.isMainParent(a)){var d=this.maxWidthRecursive(c);b+=d}},this);var c=Math.max(1,b);return a.get("visNode").set("maxWidth",c),c},d.prototype.assignBoundsRecursive=function(a,b,c){var d=(c+b)/2;if(a.get("visNode").get("pos").x=d,0!==a.get("children").length){var e=c-b,g=0,h=a.get("children");f.each(h,function(b){b.isMainParent(a)&&(g+=b.get("visNode").getMaxWidthScaled())},this);var i=b;f.each(h,function(b){if(b.isMainParent(a)){var c=b.get("visNode").getMaxWidthScaled(),d=c/g*e,f=i,h=f+d;this.assignBoundsRecursive(b,f,h),i=f+d}},this)}},d.prototype.calcDepth=function(){var a=this.calcDepthRecursive(this.rootCommit,0);a>15&&console.warn("graphics are degrading from too many layers");var b=this.getDepthIncrement(a);f.each(this.visNodeMap,function(a){a.setDepthBasedOn(b,this.getHeaderOffset())},this)},d.prototype.animateNodePositions=function(a){f.each(this.visNodeMap,function(b){b.animateUpdatedPosition(a)},this)},d.prototype.addBranchFromEvent=function(a){var b=f.bind(function(){this.addBranch(a)},this);this.gitEngine&&this.gitReady?b():this.defer(b)},d.prototype.addBranch=function(a){var b=new k({branch:a,gitVisuals:this,gitEngine:this.gitEngine});this.visBranchCollection.add(b),this.gitReady?b.genGraphics(this.paper):this.defer(f.bind(function(){b.genGraphics(this.paper)},this))},d.prototype.addTagFromEvent=function(a){var b=f.bind(function(){this.addTag(a)},this);this.gitEngine&&this.gitReady?b():this.defer(b)},d.prototype.addTag=function(a){var b=new m({tag:a,gitVisuals:this,gitEngine:this.gitEngine});this.visTagCollection.add(b),this.gitReady?b.genGraphics(this.paper):this.defer(f.bind(function(){b.genGraphics(this.paper)},this))},d.prototype.removeVisBranch=function(a){this.visBranchCollection.remove(a)},d.prototype.removeVisTag=function(a){this.visTagCollection.remove(a)},d.prototype.removeVisNode=function(a){delete this.visNodeMap[a.getID()]},d.prototype.removeVisEdge=function(a){this.visEdgeCollection.remove(a)},d.prototype.animateRefs=function(a){this.visBranchCollection.each(function(b){b.animateUpdatedPos(a)},this),this.visTagCollection.each(function(b){b.animateUpdatedPos(a)},this)},d.prototype.animateEdges=function(a){this.visEdgeCollection.each(function(b){b.animateUpdatedPath(a)},this)},d.prototype.getMinLayers=function(){return this.options.smallCanvas?2:7},d.prototype.getDepthIncrement=function(a){a=Math.max(a,this.getMinLayers());var b=1-this.getHeaderOffset(),c=b/a;return c},d.prototype.shouldHaveHeader=function(){return this.gitEngine.isOrigin()||this.gitEngine.hasOrigin()},d.prototype.getHeaderOffset=function(){return this.shouldHaveHeader()?.05:0},d.prototype.calcDepthRecursive=function(a,b){a.get("visNode").setDepth(b);var c=a.get("children"),d=b;return f.each(c,function(a){var c=this.calcDepthRecursive(a,b+1);d=Math.max(c,d)},this),d},d.prototype.canvasResize=function(a,b){this.resizeFunc||this.genResizeFunc(),this.resizeFunc(a,b)},d.prototype.genResizeFunc=function(){this.resizeFunc=f.debounce(f.bind(function(){this.refreshTree()},this),200,!0)},d.prototype.addNode=function(a,b){this.commitMap[a]=b,b.get("rootCommit")&&(this.rootCommit=b);var c=new j({id:a,commit:b,gitVisuals:this,gitEngine:this.gitEngine});return this.visNodeMap[a]=c,this.gitReady&&c.genGraphics(this.paper),c},d.prototype.addEdge=function(a,b){var c=this.visNodeMap[a],d=this.visNodeMap[b];if(!c||!d)throw new Error("one of the ids in ("+a+", "+b+") does not exist");var e=new o({tail:c,head:d,gitVisuals:this,gitEngine:this.gitEngine});this.visEdgeCollection.add(e),this.gitReady&&e.genGraphics(this.paper)},d.prototype.zIndexReflow=function(){this.visNodesFront(),this.visBranchesFront(),this.visTagsFront()},d.prototype.visNodesFront=function(){f.each(this.visNodeMap,function(a){a.toFront()})},d.prototype.visBranchesFront=function(){this.visBranchCollection.each(function(a){a.nonTextToFront(),a.textToFront()}),this.visBranchCollection.each(function(a){a.textToFrontIfInStack()})},d.prototype.visTagsFront=function(){this.visTagCollection.each(function(a){a.nonTextToFront(),a.textToFront()}),this.visTagCollection.each(function(a){a.textToFrontIfInStack()})},d.prototype.drawTreeFromReload=function(){this.gitReady=!0,this.deferFlush(),this.calcTreeCoords()},d.prototype.drawTreeFirstTime=function(){this.gitReady=!0,this.calcTreeCoords(),f.each(this.visNodeMap,function(a){a.genGraphics(this.paper)},this),this.visEdgeCollection.each(function(a){a.genGraphics(this.paper)},this),this.visBranchCollection.each(function(a){a.genGraphics(this.paper)},this),this.visTagCollection.each(function(a){a.genGraphics(this.paper)},this),this.zIndexReflow()},c.GitVisuals=d},{"../app":21,"../stores/GlobalStateStore":48,"../util/constants":51,"../visuals/visBranch":71,"../visuals/visEdge":72,"../visuals/visNode":73,"../visuals/visTag":74,q:14,underscore:17}],69:[function(a,b,c){var d=a("underscore"),e=a("backbone"),f=e.Model.extend({removeKeys:function(a){d.each(a,function(a){this.get(a)&&this.get(a).remove()},this)},animateAttrKeys:function(a,b,c,e){a=d.extend({},{include:["circle","arrow","rect","path","text"],exclude:[]},a||{});var f=this.getAttributes();d.each(a.include,function(a){f[a]=d.extend({},f[a],b)}),d.each(a.exclude,function(a){delete f[a]}),this.animateToAttr(f,c,e)}});c.VisBase=f},{backbone:1,underscore:17}],70:[function(a,b,c){var d=a("underscore"),e=a("backbone"),f=e.Model.extend({removeKeys:function(a){d.each(a,function(a){this.get(a)&&this.get(a).remove()},this)},getNonAnimateKeys:function(){return["stroke-dasharray"]},getIsInOrigin:function(){return this.get("gitEngine")?this.get("gitEngine").isOrigin():!1},animateToAttr:function(a,b,c){if(0===b)return this.setAttr(a,!0),void 0;var d=void 0!==b?b:this.get("animationSpeed"),e=c||this.get("animationEasing");this.setAttr(a,!1,d,e)},setAttrBase:function(a,b,c,e,f){d.each(a,function(a){c?this.get(a).attr(b[a]):(this.get(a).stop(),this.get(a).animate(b[a],e,f),d.forEach(this.getNonAnimateKeys(),function(c){b[a]&&void 0!==b[a][c]&&this.get(a).attr(c,b[a][c])},this)),b.css&&$(this.get(a).node).css(b.css)},this)},animateAttrKeys:function(a,b,c,e){a=d.extend({},{include:["circle","arrow","rect","path","text"],exclude:[]},a||{});var f=this.getAttributes();d.each(a.include,function(a){f[a]=d.extend({},f[a],b)}),d.each(a.exclude,function(a){delete f[a]}),this.animateToAttr(f,c,e)}});c.VisBase=f},{backbone:1,underscore:17}],71:[function(a,b,c){var d=a("underscore"),e=a("backbone"),f=a("../util/constants").GRAPHICS,g=a("../visuals/visBase").VisBase,h=a("../graph/treeCompare"),i=function(){var a=Math.random(),b="hsb("+String(a)+",0.6,1)";return b},j=g.extend({defaults:{pos:null,text:null,rect:null,arrow:null,isHead:!1,flip:1,fill:f.rectFill,stroke:f.rectStroke,"stroke-width":f.rectStrokeWidth,offsetX:4.75*f.nodeRadius,offsetY:0,arrowHeight:14,arrowInnerSkew:0,arrowEdgeHeight:6,arrowLength:14,arrowOffsetFromCircleX:10,vPad:5,hPad:5,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing},validateAtInit:function(){if(!this.get("branch"))throw new Error("need a branch!")},getID:function(){return this.get("branch").get("id")},initialize:function(){if(this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),!this.gitEngine)throw new Error("asd wtf");this.get("branch").set("visBranch",this);var a=this.get("branch").get("id");"HEAD"==a?(this.set("isHead",!0),this.set("flip",-1),this.refreshOffset(),this.set("fill",f.headRectFill)):"master"!==a&&this.set("fill",i())},getCommitPosition:function(){var a=this.gitEngine.getCommitFromRef(this.get("branch")),b=a.get("visNode");return this.set("flip",this.getFlipValue(a,b)),this.refreshOffset(),b.getScreenCoords()},getDashArray:function(){return this.get("gitVisuals").getIsGoalVis()?this.getIsLevelBranchCompared()?"":"--":""},getIsGoalAndNotCompared:function(){return this.get("gitVisuals").getIsGoalVis()?!this.getIsLevelBranchCompared():!1},getIsLevelBranchCompared:function(){if(this.getIsMaster())return!0;var a=this.get("gitVisuals").getLevelBlob();return!h.onlyMasterCompared(a)},getIsMaster:function(){return"master"==this.get("branch").get("id")},getFlipValue:function(a,b){var c=this.get("gitVisuals").getFlipPos(),d=b.get("pos").x>c;return"C0"===a.get("id")?-1:this.get("isHead")?d?this.isBranchStackEmpty()?-1:1:this.isBranchStackEmpty()?1:-1:d?-1:1},refreshOffset:function(){var a=4.75*f.nodeRadius,b=33,c=10;1===this.get("flip")?(this.set("offsetY",-b),this.set("offsetX",a-c)):(this.set("offsetY",b),this.set("offsetX",a-c))},getArrowTransform:function(){return 1===this.get("flip")?"t-2,-20R-35":"t2,20R-35"},getBranchStackIndex:function(){if(this.get("isHead"))return 0;var a=this.getBranchStackArray(),b=-1;return d.each(a,function(a,c){a.obj==this.get("branch")&&(b=c)},this),b},getBranchStackLength:function(){return this.get("isHead")?1:this.getBranchStackArray().length},isBranchStackEmpty:function(){var a=this.gitVisuals.branchStackMap[this.getCommitID()];return a?0===a.length:!0},getCommitID:function(){var a=this.get("branch").get("target");return"branch"===a.get("type")&&(a=a.get("target")),a.get("id")},getBranchStackArray:function(){var a=this.gitVisuals.branchStackMap[this.getCommitID()];return void 0===a?(this.gitVisuals.calcBranchStacks(),this.getBranchStackArray()):a},getTextPosition:function(){var a=this.getCommitPosition(),b=this.getBranchStackIndex();return{x:a.x+this.get("flip")*this.get("offsetX"),y:a.y+b*f.multiBranchY+this.get("offsetY")}},getRectPosition:function(){var a=this.getTextPosition(),b=(this.get("flip"),this.getTextSize());return{x:a.x-.5*b.w-this.get("hPad"),y:a.y-.5*b.h-this.get("vPad")}},getArrowPath:function(){var a=function(a,b,c){return{x:a.x+b,y:a.y+c}},b=function(a){return String(Math.round(a.x))+","+String(Math.round(a.y))},c=this.get("flip"),e=a(this.getCommitPosition(),c*this.get("arrowOffsetFromCircleX"),0),f=a(e,c*this.get("arrowLength"),-this.get("arrowHeight")),g=a(e,c*this.get("arrowLength"),this.get("arrowHeight")),h=a(f,c*this.get("arrowInnerSkew"),this.get("arrowEdgeHeight")),i=a(g,c*this.get("arrowInnerSkew"),-this.get("arrowEdgeHeight")),j=49,k=a(h,c*j,0),l=a(i,c*j,0),m="";m+="M"+b(k)+" ";var n=[h,f,e,g,i,l];return d.each(n,function(a){m+="L"+b(a)+" "},this),m+="z"},getTextSize:function(){var a=function(a){var b=a.get("text")?a.get("text").node:null;return null===b?0:b.clientWidth},b=function(a){return a.w||(a.w=75),a.h||(a.h=20),a},c=this.get("text").node;if(this.get("isHead"))return b({w:c.clientWidth,h:c.clientHeight});var e=0;return d.each(this.getBranchStackArray(),function(b){e=Math.max(e,a(b.obj.get("visBranch")))}),b({w:e,h:c.clientHeight})},getSingleRectSize:function(){var a=this.getTextSize(),b=this.get("vPad"),c=this.get("hPad");return{w:a.w+2*b,h:a.h+2*c}},getRectSize:function(){var a=this.getTextSize(),b=this.get("vPad"),c=this.get("hPad"),d=this.getBranchStackLength();return{w:a.w+2*b,h:a.h*d*1.1+2*c}},getIsRemote:function(){return this.get("branch").getIsRemote()},getName:function(){var a=this.get("branch").getName(),b=this.get("branch")===this.gitEngine.HEAD.get("target"),c=this.getIsRemote(),d=this.gitEngine.getIsHg();"HEAD"===a&&d&&(a=".");var e=!b||this.getIsInOrigin()||c?"":"*";return a+e},nonTextToFront:function(){this.get("arrow").toFront(),this.get("rect").toFront()},textToFront:function(){this.get("text").toFront()},textToFrontIfInStack:function(){0!==this.getBranchStackIndex()&&this.get("text").toFront()},getFill:function(){return this.get("isHead")||1==this.getBranchStackLength()||0!==this.getBranchStackIndex()?this.get("fill"):this.gitVisuals.blendHuesFromBranchStack(this.getBranchStackArray())},remove:function(){this.removeKeys(["text","arrow","rect"]),this.gitVisuals.removeVisBranch(this)},handleModeChange:function(){},genGraphics:function(a){var b=this.getTextPosition(),c=this.getName(),e=a.text(b.x,b.y,String(c));e.attr({"font-size":14,"font-family":"Monaco, Courier, font-monospace",opacity:this.getTextOpacity()}),this.set("text",e);var f=this.getAttributes(),g=this.getRectPosition(),h=this.getRectSize(),i=a.rect(g.x,g.y,h.w,h.h,8).attr(f.rect);this.set("rect",i);var j=this.getArrowPath(),k=a.path(j).attr(f.arrow);this.set("arrow",k);var l=["text","rect","arrow"];d.each(l,function(a){$(this.get(a).node).css(f.css)},this),this.attachClickHandlers(),i.toFront(),e.toFront()},attachClickHandlers:function(){if(!this.get("gitVisuals").options.noClick){var a=[this.get("rect"),this.get("text"),this.get("arrow")];d.each(a,function(a){a.click(d.bind(this.onClick,this))},this)}},shouldDisableClick:function(){return this.get("isHead")&&!this.gitEngine.getDetachedHead()},onClick:function(){if(!this.shouldDisableClick()){var b="git checkout "+this.get("branch").get("id"),c=a("../app");c.getEventBaton().trigger("commandSubmitted",b)}},updateName:function(){this.get("text").attr({text:this.getName()})},getNonTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:0!==this.getBranchStackIndex()?0:1},getTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:this.getIsGoalAndNotCompared()?0===this.getBranchStackIndex()?.7:.3:1},getStrokeWidth:function(){return this.getIsGoalAndNotCompared()?this.get("stroke-width")/5:this.get("stroke-width")},getAttributes:function(){var a=this.getTextOpacity();this.updateName();var b=this.getTextPosition(),c=this.getRectPosition(),d=this.getRectSize(),e=this.getArrowPath(),f=this.getDashArray(),g=this.shouldDisableClick()?"auto":"pointer";return{css:{cursor:g},text:{x:b.x,y:b.y,opacity:a},rect:{x:c.x,y:c.y,width:d.w,height:d.h,opacity:this.getNonTextOpacity(),fill:this.getFill(),stroke:this.get("stroke"),"stroke-dasharray":f,"stroke-width":this.getStrokeWidth()},arrow:{path:e,opacity:this.getNonTextOpacity(),fill:this.getFill(),stroke:this.get("stroke"),transform:this.getArrowTransform(),"stroke-dasharray":f,"stroke-width":this.getStrokeWidth()}}},animateUpdatedPos:function(a,b){var c=this.getAttributes();this.animateToAttr(c,a,b)},animateFromAttrToAttr:function(a,b,c,d){this.animateToAttr(a,0),this.animateToAttr(b,c,d)},setAttr:function(a,b,c,d){var e=["text","rect","arrow"];this.setAttrBase(e,a,b,c,d)}}),k=e.Collection.extend({model:j});c.VisBranchCollection=k,c.VisBranch=j,c.randomHueString=i},{"../app":21,"../graph/treeCompare":34,"../util/constants":51,"../visuals/visBase":70,backbone:1,underscore:17}],72:[function(a,b,c){var d=a("underscore"),e=a("backbone"),f=a("../util/constants").GRAPHICS,g=a("../visuals/visBase").VisBase,h=a("../stores/GlobalStateStore"),i=g.extend({defaults:{tail:null,head:null,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing},validateAtInit:function(){var a=["tail","head"];d.each(a,function(a){if(!this.get(a))throw new Error(a+" is required!")},this)},getID:function(){return this.get("tail").get("id")+"."+this.get("head").get("id")},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),this.get("tail").get("outgoingEdges").push(this)},remove:function(){this.removeKeys(["path"]),this.gitVisuals.removeVisEdge(this)},genSmoothBezierPathString:function(a,b){var c=a.getScreenCoords(),d=b.getScreenCoords();return this.genSmoothBezierPathStringFromCoords(c,d)},genSmoothBezierPathStringFromCoords:function(a,b){var c=h.getFlipTreeY()?-1:1,d=function(a){return String(Math.round(a.x))+","+String(Math.round(a.y))},e=function(a,b,d){return d=d||f.curveControlPointOffset,{x:a.x,y:a.y+c*d*b}},g=function(a,b,d){return{x:a.x+b,y:a.y+c*d}};a=e(a,-1,this.get("tail").getRadius()),b=e(b,1,1.15*this.get("head").getRadius());var i="";i+="M"+d(a)+" ",i+="C",i+=d(e(a,-1))+" ",i+=d(e(b,1))+" ",i+=d(b);var j=f.arrowHeadSize||10;return i+=" L"+d(g(b,-j,j)),i+=" L"+d(g(b,j,j)),i+=" L"+d(b),i+="C",i+=d(e(b,1))+" ",i+=d(e(a,-1))+" ",i+=d(a)},getBezierCurve:function(){return this.genSmoothBezierPathString(this.get("tail"),this.get("head"))},getStrokeColor:function(){return f.visBranchStrokeColorNone},setOpacity:function(a){a=void 0===a?1:a,this.get("path").attr({opacity:a})},genGraphics:function(a){var b=this.getBezierCurve(),c=a.path(b).attr({"stroke-width":f.visBranchStrokeWidth,stroke:this.getStrokeColor(),"stroke-linecap":"round","stroke-linejoin":"round",fill:this.getStrokeColor()});c.toBack(),this.set("path",c)},getOpacity:function(){var a=this.gitVisuals.getCommitUpstreamStatus(this.get("tail")),b={branch:1,tag:1,head:f.edgeUpstreamHeadOpacity,none:f.edgeUpstreamNoneOpacity};if(void 0===b[a])throw new Error("bad stat");return b[a]},getAttributes:function(){var a=this.getBezierCurve(),b=this.getOpacity();return{path:{path:a,opacity:b}}},animateUpdatedPath:function(a,b){var c=this.getAttributes();this.animateToAttr(c,a,b)},animateFromAttrToAttr:function(a,b,c,d){this.animateToAttr(a,0),this.animateToAttr(b,c,d)},animateToAttr:function(a,b,c){return 0===b?(this.get("path").attr(a.path),void 0):(this.get("path").toBack(),this.get("path").stop(),this.get("path").animate(a.path,void 0!==b?b:this.get("animationSpeed"),c||this.get("animationEasing")),void 0)}}),j=e.Collection.extend({model:i});c.VisEdgeCollection=j,c.VisEdge=i},{"../stores/GlobalStateStore":48,"../util/constants":51,"../visuals/visBase":70,backbone:1,underscore:17}],73:[function(a,b,c){var d=a("underscore"),e=(a("backbone"),a("../util/constants").GRAPHICS),f=a("../visuals/visBase").VisBase,g=f.extend({defaults:{depth:void 0,maxWidth:null,outgoingEdges:null,circle:null,text:null,id:null,pos:null,radius:null,commit:null,animationSpeed:e.defaultAnimationTime,animationEasing:e.defaultEasing,fill:e.defaultNodeFill,"stroke-width":e.defaultNodeStrokeWidth,stroke:e.defaultNodeStroke},getID:function(){return this.get("id")},validateAtInit:function(){if(!this.get("id"))throw new Error("need id for mapping");if(!this.get("commit"))throw new Error("need commit for linking");this.get("pos")||this.set("pos",{x:Math.random(),y:Math.random()})},initialize:function(){this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),this.set("outgoingEdges",[])},setDepth:function(a){this.set("depth",Math.max(this.get("depth")||0,a))},setDepthBasedOn:function(a,b){if(void 0===this.get("depth"))throw new Error("no depth yet!");var c=this.get("pos");c.y=this.get("depth")*a+b},getMaxWidthScaled:function(){var a=this.gitVisuals.getCommitUpstreamStatus(this.get("commit")),b={branch:1,tag:1,head:.3,none:.1};if(void 0===b[a])throw new Error("bad stat");return b[a]*this.get("maxWidth")},toFront:function(){this.get("circle").toFront(),this.get("text").toFront()},getOpacity:function(){var a={branch:1,tag:1,head:e.upstreamHeadOpacity,none:e.upstreamNoneOpacity},b=this.gitVisuals.getCommitUpstreamStatus(this.get("commit"));if(void 0===a[b])throw new Error("invalid status");return a[b]},getTextScreenCoords:function(){return this.getScreenCoords()},getAttributes:function(){var a=this.getScreenCoords(),b=this.getTextScreenCoords(),c=this.getOpacity(),d=this.getIsInOrigin()?e.originDash:"";return{circle:{cx:a.x,cy:a.y,opacity:c,r:this.getRadius(),fill:this.getFill(),"stroke-width":this.get("stroke-width"),"stroke-dasharray":d,stroke:this.get("stroke")},text:{x:b.x,y:b.y,opacity:c}}},animatePositionTo:function(a,b,c){var d=this.getAttributes(),e=a.getAttributes();d.circle=e.circle,d.text=e.text,this.animateToAttr(d,b,c)},highlightTo:function(a,b,c){var d=a.get("fill"),e={circle:{fill:d,stroke:d,"stroke-dasharray":"","stroke-width":5*this.get("stroke-width")},text:{}};this.animateToAttr(e,b,c)},animateUpdatedPosition:function(a,b){var c=this.getAttributes();this.animateToAttr(c,a,b)},animateFromAttrToAttr:function(a,b,c,d){this.animateToAttr(a,0),this.animateToAttr(b,c,d)},animateToSnapshot:function(a,b,c){a[this.getID()]&&this.animateToAttr(a[this.getID()],b,c)},setAttr:function(a,b,c,d){var e=["text","circle"];this.setAttrBase(e,a,b,c,d)},animateToAttr:function(a,b,c){f.prototype.animateToAttr.apply(this,arguments);{var d=void 0!==b?b:this.get("animationSpeed");c||this.get("animationEasing")}"bounce"==c&&a.circle&&void 0!==a.circle.cx&&a.text&&void 0!==a.text.x&&(this.get("circle").animate(a.circle.cx,d,"easeInOut"),this.get("text").animate(a.text.x,d,"easeInOut"))
},getScreenCoords:function(){var a=this.get("pos");return this.gitVisuals.toScreenCoords(a)},getRadius:function(){return this.get("radius")||e.nodeRadius},getParentScreenCoords:function(){return this.get("commit").get("parents")[0].get("visNode").getScreenCoords()},setBirthPosition:function(){var a=this.getParentScreenCoords();this.get("circle").attr({cx:a.x,cy:a.y,opacity:0,r:0}),this.get("text").attr({x:a.x,y:a.y,opacity:0})},setBirthFromSnapshot:function(a){var b=this.get("commit").get("parents")[0].get("visNode").getID(),c=a[b];this.get("circle").attr({opacity:0,r:0,cx:c.circle.cx,cy:c.circle.cy}),this.get("text").attr({opacity:0,x:c.text.x,y:c.text.y});var d={x:c.circle.cx,y:c.circle.cy};this.setOutgoingEdgesBirthPosition(d)},setBirth:function(){this.setBirthPosition(),this.setOutgoingEdgesBirthPosition(this.getParentScreenCoords())},setOutgoingEdgesOpacity:function(a){d.each(this.get("outgoingEdges"),function(b){b.setOpacity(a)})},animateOutgoingEdgesToAttr:function(a){d.each(this.get("outgoingEdges"),function(b){var c=a[b.getID()];b.animateToAttr(c)},this)},animateOutgoingEdges:function(a,b){d.each(this.get("outgoingEdges"),function(c){c.animateUpdatedPath(a,b)},this)},animateOutgoingEdgesFromSnapshot:function(a,b,c){d.each(this.get("outgoingEdges"),function(d){var e=a[d.getID()];d.animateToAttr(e,b,c)},this)},setOutgoingEdgesBirthPosition:function(a){d.each(this.get("outgoingEdges"),function(b){var c=b.get("head").getScreenCoords(),d=b.genSmoothBezierPathStringFromCoords(a,c);b.get("path").stop(),b.get("path").attr({path:d,opacity:0})},this)},parentInFront:function(){this.get("commit").get("parents")[0].get("visNode").toFront()},getFontSize:function(a){return a.length<3?12:a.length<5?10:8},getFill:function(){var a=this.gitVisuals.getCommitUpstreamStatus(this.get("commit"));return"head"==a?e.headRectFill:"tag"==a?e.orphanNodeFill:"none"==a?e.orphanNodeFill:this.gitVisuals.getBlendedHuesForCommit(this.get("commit"))},attachClickHandlers:function(){if(!this.get("gitVisuals").options.noClick){var b="git checkout "+this.get("commit").get("id"),c=a("../app");d.each([this.get("circle"),this.get("text")],function(a){a.click(function(){c.getEventBaton().trigger("commandSubmitted",b)}),$(a.node).css("cursor","pointer")})}},setOpacity:function(a){a=void 0===a?1:a;var b=["circle","text"];d.each(b,function(b){this.get(b).attr({opacity:a})},this)},remove:function(){this.removeKeys(["circle"],["text"]);var a=this.get("text");a&&a.remove(),this.gitVisuals.removeVisNode(this)},removeAll:function(){this.remove(),this.removeAllEdges()},removeAllEdges:function(){d.each(this.get("outgoingEdges"),function(a){a.remove()},this)},getExplodeStepFunc:function(){var a=this.get("circle"),b=20,c=Math.PI+1*Math.random()*Math.PI,d=.2,e=.01,f=b*Math.cos(c),g=b*Math.sin(c),h=a.attr("cx"),i=a.attr("cy"),j=this.gitVisuals.paper.width,k=this.gitVisuals.paper.height,l=.8,m=1,n=function(){return g+=d*m-e*g,f-=e*f,h+=f*m,i+=g*m,(0>h||h>j)&&(f=l*-f,h=0>h?0:j),(0>i||i>k)&&(g=l*-g,i=0>i?0:k),a.attr({cx:h,cy:i}),.01>f*f+g*g&&0===Math.abs(i-k)?!1:!0};return n},makeCircle:function(a){var b=this.getScreenCoords();return a.circle(b.x,b.y,this.getRadius()).attr(this.getAttributes().circle)},makeText:function(a){var b=this.getTextScreenCoords();return a.text(b.x,b.y,String(this.get("id")))},genGraphics:function(){var a=this.gitVisuals.paper,b=this.makeCircle(a),c=this.makeText(a);c.attr({"font-size":this.getFontSize(this.get("id")),"font-weight":"bold","font-family":"Monaco, Courier, font-monospace",opacity:this.getOpacity()}),this.set("circle",b),this.set("text",c),this.attachClickHandlers()}});c.VisNode=g},{"../app":21,"../util/constants":51,"../visuals/visBase":70,backbone:1,underscore:17}],74:[function(a,b,c){var d=a("underscore"),e=a("backbone"),f=a("../util/constants").GRAPHICS,g=a("../visuals/visBase").VisBase,h=a("../graph/treeCompare"),i=function(){var a=Math.random(),b="hsb("+String(a)+",0.7,1)";return b},j=g.extend({defaults:{pos:null,text:null,rect:null,isHead:!1,fill:f.tagFill,stroke:f.tagStroke,"stroke-width":f.tagStrokeWidth,offsetX:f.nodeRadius,offsetY:f.nodeRadius,vPad:2,hPad:2,animationSpeed:f.defaultAnimationTime,animationEasing:f.defaultEasing},validateAtInit:function(){if(!this.get("tag"))throw new Error("need a Tag!")},getID:function(){return this.get("tag").get("id")},initialize:function(){if(this.validateAtInit(),this.gitVisuals=this.get("gitVisuals"),this.gitEngine=this.get("gitEngine"),!this.gitEngine)throw new Error("asd wtf");this.get("tag").set("visTag",this)},getCommitPosition:function(){var a=this.gitEngine.getCommitFromRef(this.get("tag")),b=a.get("visNode");return b.getScreenCoords()},getDashArray:function(){return this.get("gitVisuals").getIsGoalVis()?this.getIsLevelTagCompared()?"":"--":""},getIsGoalAndNotCompared:function(){return this.get("gitVisuals").getIsGoalVis()?!this.getIsLevelTagCompared():!1},getIsLevelTagCompared:function(){var a=this.get("gitVisuals").getLevelBlob();return!h.onlyMasterCompared(a)},getTagStackIndex:function(){if(this.get("isHead"))return 0;var a=this.getTagStackArray(),b=-1;return d.each(a,function(a,c){a.obj==this.get("tag")&&(b=c)},this),b},getTagStackLength:function(){return this.get("isHead")?1:this.getTagStackArray().length},isTagStackEmpty:function(){var a=this.gitVisuals.tagStackMap[this.getCommitID()];return a?0===a.length:!0},getCommitID:function(){var a=this.get("tag").get("target");return a.get("id")},getTagStackArray:function(){var a=this.gitVisuals.tagStackMap[this.getCommitID()];return void 0===a?(this.gitVisuals.calcTagStacks(),this.getTagStackArray()):a},getTextPosition:function(){var a=this.getCommitPosition(),b=this.getTagStackIndex();return{x:a.x+this.get("offsetX"),y:a.y+b*f.multiTagY+this.get("offsetY")}},getRectPosition:function(){var a=this.getTextPosition(),b=this.getTextSize();return{x:a.x-this.get("hPad"),y:a.y-.5*b.h-this.get("vPad")}},getTextSize:function(){var a=function(a){var b=a.get("text")?a.get("text").node:null;return null===b?0:b.clientWidth},b=function(a){return a.w||(a.w=75),a.h||(a.h=20),a},c=this.get("text").node,e=0;return d.each(this.getTagStackArray(),function(b){e=Math.max(e,a(b.obj.get("visTag")))}),b({w:e,h:c.clientHeight})},getSingleRectSize:function(){var a=this.getTextSize(),b=this.get("vPad"),c=this.get("hPad");return{w:a.w+2*b,h:a.h+2*c}},getRectSize:function(){var a=this.getTextSize(),b=this.get("vPad"),c=this.get("hPad"),d=this.getTagStackLength();return{w:a.w+2*b,h:a.h*d+2*c}},getIsRemote:function(){return this.get("tag").getIsRemote()},getName:function(){{var a=this.get("tag").getName();this.getIsRemote(),this.gitEngine.getIsHg()}return a},nonTextToFront:function(){this.get("rect").toFront()},textToFront:function(){this.get("text").toFront()},textToFrontIfInStack:function(){0!==this.getTagStackIndex()&&this.get("text").toFront()},remove:function(){this.removeKeys(["text","rect"]),this.gitVisuals.removeVisTag(this)},handleModeChange:function(){},genGraphics:function(a){var b=this.getTextPosition(),c=this.getName(),e=a.text(b.x,b.y,String(c));e.attr({"font-size":14,"font-family":"Monaco, Courier, font-monospace",opacity:this.getTextOpacity(),"text-anchor":"start"}),this.set("text",e);var f=this.getAttributes(),g=this.getRectPosition(),h=this.getRectSize(),i=a.rect(g.x,g.y,h.w,h.h,8).attr(f.rect);this.set("rect",i);var j=["text","rect"];d.each(j,function(a){$(this.get(a).node).css(f.css)},this),this.attachClickHandlers(),i.toFront(),e.toFront()},attachClickHandlers:function(){if(!this.get("gitVisuals").options.noClick){var a=[this.get("rect"),this.get("text")];d.each(a,function(a){a.click(d.bind(this.onClick,this))},this)}},shouldDisableClick:function(){return this.get("isHead")&&!this.gitEngine.getDetachedHead()},onClick:function(){if(!this.shouldDisableClick()){var b="git checkout "+this.get("tag").get("id"),c=a("../app");c.getEventBaton().trigger("commandSubmitted",b)}},updateName:function(){this.get("text").attr({text:this.getName()})},getNonTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:0!==this.getTagStackIndex()?0:1},getTextOpacity:function(){return this.get("isHead")?this.gitEngine.getDetachedHead()?1:0:this.getIsGoalAndNotCompared()?0===this.getTagStackIndex()?.7:.3:1},getStrokeWidth:function(){return this.getIsGoalAndNotCompared()?this.get("stroke-width")/5:this.get("stroke-width")},getAttributes:function(){var a=this.getTextOpacity();this.updateName();var b=this.getTextPosition(),c=this.getRectPosition(),d=this.getRectSize(),e=this.getDashArray(),f=this.shouldDisableClick()?"auto":"pointer";return{css:{cursor:f},text:{x:b.x,y:b.y,opacity:a},rect:{x:c.x,y:c.y,width:d.w,height:d.h,opacity:this.getNonTextOpacity(),fill:this.get("fill"),stroke:this.get("stroke"),"stroke-dasharray":e,"stroke-width":this.getStrokeWidth()}}},animateUpdatedPos:function(a,b){var c=this.getAttributes();this.animateToAttr(c,a,b)},animateFromAttrToAttr:function(a,b,c,d){this.animateToAttr(a,0),this.animateToAttr(b,c,d)},setAttr:function(a,b,c,d){var e=["text","rect"];this.setAttrBase(e,a,b,c,d)}}),k=e.Collection.extend({model:j});c.VisTagCollection=k,c.VisTag=j,c.randomHueString=i},{"../app":21,"../graph/treeCompare":34,"../util/constants":51,"../visuals/visBase":70,backbone:1,underscore:17}],75:[function(a,b,c){var d=a("__browserify_process"),e=a("underscore"),f=f=a("../util").isBrowser()?window.Backbone:a("backbone"),g=a("../models/collections"),h=g.CommitCollection,i=g.BranchCollection,j=g.TagCollection,k=a("../util/eventBaton").EventBaton,l=a("../visuals").GitVisuals,m=f.View.extend({initialize:function(a){a=a||{},this.options=a,this.customEvents=e.clone(f.Events),this.containerElement=a.containerElement;var b=this,c=a.containerElement||$("#canvasHolder")[0];new Raphael(c,200,200,function(){var c=this;d.nextTick(function(){b.paperInitialize(c,a)})})},paperInitialize:function(b,c){this.treeString=c.treeString,this.paper=b;var f=a("../app");this.eventBaton=c.noKeyboardInput?new k({noInput:!0}):f.getEventBaton(),this.commitCollection=new h,this.branchCollection=new i,this.tagCollection=new j,this.gitVisuals=new l({commitCollection:this.commitCollection,branchCollection:this.branchCollection,tagCollection:this.tagCollection,paper:this.paper,noClick:this.options.noClick,isGoalVis:this.options.isGoalVis,smallCanvas:this.options.smallCanvas,visualization:this});var g=a("../git").GitEngine;this.gitEngine=new g({collection:this.commitCollection,branches:this.branchCollection,tags:this.tagCollection,gitVisuals:this.gitVisuals,eventBaton:this.eventBaton}),this.gitEngine.init(),this.gitVisuals.assignGitEngine(this.gitEngine),this.myResize(),$(window).on("resize",e.bind(function(){this.myResize()},this)),this.$el.parents(".ui-draggable").on("drag",e.bind(function(a,b){this.customEvents.trigger("drag",a,b),this.myResize()},this)),this.gitVisuals.drawTreeFirstTime(),this.treeString&&this.gitEngine.loadTreeFromString(this.treeString),this.options.zIndex&&this.setTreeIndex(this.options.zIndex),this.shown=!1,this.setTreeOpacity(0),d.nextTick(e.bind(this.fadeTreeIn,this)),this.customEvents.trigger("gitEngineReady"),this.customEvents.trigger("paperReady")},clearOrigin:function(){delete this.originVis},makeOrigin:function(a){return this.originVis=new m(e.extend({},this.options,{noKeyboardInput:!0,noClick:!0,treeString:a.treeString})),this.originVis.customEvents.on("paperReady",e.bind(function(){var a=$(this.paper.canvas).css("z-index");this.originVis.setTreeIndex(a)},this)),this.originVis},originToo:function(a,b){if(this.originVis){var c=e.bind(function(){this.originVis[a].apply(this.originVis,b)},this);return this.originVis.paper?(c(),void 0):(this.originVis.customEvents.on("paperReady",c),void 0)}},setTreeIndex:function(a){$(this.paper.canvas).css("z-index",a),this.originToo("setTreeIndex",arguments)},setTreeOpacity:function(a){0===a&&(this.shown=!1),$(this.paper.canvas).css("opacity",a),this.originToo("setTreeOpacity",arguments)},getAnimationTime:function(){return 300},fadeTreeIn:function(){this.shown=!0,this.paper&&($(this.paper.canvas).animate({opacity:1},this.getAnimationTime()),this.originToo("fadeTreeIn",arguments))},fadeTreeOut:function(){this.shown=!1,$(this.paper.canvas).animate({opacity:0},this.getAnimationTime()),this.originToo("fadeTreeOut",arguments)},hide:function(){this.fadeTreeOut(),setTimeout(e.bind(function(){$(this.paper.canvas).css("visibility","hidden")},this),this.getAnimationTime()),this.originToo("hide",arguments)},show:function(){$(this.paper.canvas).css("visibility","visible"),setTimeout(e.bind(this.fadeTreeIn,this),10),this.originToo("show",arguments),this.myResize()},showHarsh:function(){$(this.paper.canvas).css("visibility","visible"),this.setTreeOpacity(1),this.originToo("showHarsh",arguments),this.myResize()},resetFromThisTreeNow:function(a){this.treeString=a;var b=this.getOriginInTreeString(a);if(b){var c=this.gitEngine.printTree(b);this.originToo("resetFromThisTreeNow",[c])}},getOriginInTreeString:function(a){var b=JSON.parse(unescape(a));return b.originTree},reset:function(a){var b=a||this.treeString;if(this.setTreeOpacity(0),b?this.gitEngine.loadTreeFromString(b):this.gitEngine.defaultInit(),this.fadeTreeIn(),this.originVis)if(b){var c=this.getOriginInTreeString(b);this.originToo("reset",[JSON.stringify(c)])}else this.originToo("reset",arguments)},tearDown:function(a){a=a||{},this.gitEngine.tearDown(),this.gitVisuals.tearDown(),delete this.paper,this.originToo("tearDown",arguments)},die:function(){this.fadeTreeOut(),setTimeout(e.bind(function(){this.shown||this.tearDown({fromDie:!0})},this),this.getAnimationTime()),this.originToo("die",arguments)},myResize:function(){if(this.paper){var a=1,b=this.el,c=b.clientWidth-a,d=b.clientHeight-a;if(this.containerElement)$(this.paper.canvas).css({position:"absolute"});else{var e=this.$el.offset().left,f=this.$el.offset().top;$(this.paper.canvas).css({position:"absolute",left:e+"px",top:f+"px"})}this.paper.setSize(c,d),this.gitVisuals.canvasResize(c,d),this.originToo("myResize",arguments)}}});c.Visualization=m},{"../app":21,"../git":32,"../models/collections":44,"../util":55,"../util/eventBaton":54,"../visuals":68,__browserify_process:5,backbone:1,underscore:17}],76:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C7","id":"master"},"bugWork":{"target":"C2","id":"bugWork"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C4","C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git branch bugWork master^^2^",startTree:'{"branches":{"master":{"target":"C7","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C4","C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Multiple parents",zh_CN:"多个父提交记录",fr_FR:"Parents multiples",de_DE:"Mehrere Vorgänger",ja:"複数のparent commit",es_AR:"Múltiples padres",pt_BR:"Múltiplos pais",zh_TW:"多個 parent commit"},hint:{en_US:"Use `git branch bugWork` with a target commit to create the missing reference.",de_DE:"Nutze `git branch bugWork` mit einem Ziel-Commit um die fehlende Referenz zu erstellen.",ja:"`git branch bugWork`を対象のコミットと組み合わせて使い、欠如しているリファレンスを作成",fr_FR:'Utilisez "git branch bugWork" avec un commit pour créer une référence manquante',zh_CN:"使用`git branch bugWork`加上一个目标提交记录来创建消失的引用。",es_AR:"Usá `git branch bugWork` sobre algún commit para crear la referencia faltante",pt_BR:"Use `git branch bugWork` com um commit alvo para criar a referência que falta",zh_TW:"在一個指定的 commit 上面使用 `git branch bugWork`。"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Specifying Parents","","Like the `~` modifier, the `^` modifier also accepts an optional number after it.","","Rather than specifying the number of generations to go back (what `~` takes), the modifier on `^` specifies which parent reference to follow from a merge commit. Remember that merge commits have multiple parents, so the path to choose is ambiguous.","",'Git will normally follow the "first" parent upwards from a merge commit, but specifying a number with `^` changes this default behavior.',"","Enough talking, let's see it in action.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have a merge commit. If we checkout `master^` without the modifier, we will follow the first parent after the merge commit. ","","(*In our visuals, the first parent is positioned directly above the merge commit.*)"],afterMarkdowns:["Easy -- this is what we are all used to."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now let's try specifying the second parent instead..."],afterMarkdowns:["See? We followed the other parent upwards."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["The `^` and `~` modifiers can make moving around a commit tree very powerful:"],afterMarkdowns:["Lightning fast!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Even crazier, these modifiers can be chained together! Check this out:"],afterMarkdowns:["The same movement as before, but all in one command."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Put it to practice","","To complete this level, create a new branch at the specified destination.","","Obviously it would be easy to specify the commit directly (with something like `C6`), but I challenge you to use the modifiers we talked about instead!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Vorgänger ansteuern","","Wie der Operator `~` akzeptiert auch der Operator `^` eine optionale Anzahl.","","Anstatt der Anzahl von Schritten, die zurückgegangen werden soll (das ist das, was man bei `~` angibt), bezeichnet die Anzahl nach `^` welchem Vorgänger bei einem Merge-Commit gefolgt werden soll. Du erinnerst dich, dass ein Merge-Commit mehrere Vorgänger hat; es gilt also aus diesen auszuwählen.","",'Normalerweise folgt Git dem "ersten" Vorgänger des Merge-Commit, aber durch Angabe einer Zahl nach dem `^` lässt sich dieses Verhalten ändern.',"","Aber genug gequatscht, schauen wir's uns in Aktion an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier sehen wir einen Merge-Commit. Wenn wir einen Checkout von `master^` ohne Zahl machen, wird Git auf den ersten Vorgänger des Commits zurückgehen. ","","*(In unserer Darstellung befindet sich der erste Vorgänger direkt über dem Merge-Commit.)*"],afterMarkdowns:["Simpel -- so kennen wir das."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Jetzt versuchen wir mal stattdessen den zweiten Vorgänger anzugeben ..."],afterMarkdowns:["Gesehen? Wir gehen zu dem anderen Vorgänger zurück."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Die Operatoren `^` und `~` geben uns eine Menge Möglichkeiten für das Navigieren durch den Commit-Baum:"],afterMarkdowns:["Bämm!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Noch abgefahrener: die beiden Operatoren können verkettet werden. Aufgepasst:"],afterMarkdowns:["Gleicher Ablauf wie zuvor, nur alles in einem Befehl."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Setzen wir's um","","Erstelle einen neuen Branch an dem angegebenen Ziel, um diesen Level abzuschließen.","","Es ist natürlich möglich den Commit einfach direkt anzugeben (also mit sowas wie `C6`), aber ich fordere dich heraus stattdessen die relativen Operatoren zu benutzen!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Determine les Parents","","Comme le symbole `~`, le symbole `^` accepte un numéro après lui.","","Au lieu d'entrer le nombre de générations à remonter (ce que `~` fait), le symbole `^` détermine quel parent est à remonter. Attention, un merge commit a deux parents ce qui peut porter à confusion.","",'Normalement Git suit le  "premier" parent pour un commit/merge, mais avec un numéro suivi de `^` le comportement par défault est modifié.',"","Assez de bla bla, passons à l'action",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous avons un commit/merge. Si nous faisons checkout `master^` sans le symbole, on obtient le premier parent suivant ce commit. ","","(*Dans notre vue, le premier parent se situe juste au dessus du merge.*)"],afterMarkdowns:["Facile -- C'est ce que nous faisons tout le temps."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous allons spécifier le deuxième parent à la place."],afterMarkdowns:["Vous voyez ? Nous suivons le second parent."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Les symboles `^` et `~` permettent de se déplacer de façon très efficace :"],afterMarkdowns:["Boum, vitesse du tonnerre !"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Encore plus fou, ces symboles peuvent être enchainés ! Regardez cela :"],afterMarkdowns:["Le même résultat, mais en une seule commande."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Un peu de pratique","","Pour réussir le niveau, créez une nouvelle branche à la destination indiquée","","Évidement ce serait plus rapide de spécifier le commit (C6 par exemple), mais faites-le plutôt avec les symboles de déplacement dont nous venons de parler !"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 选择父提交","","和`~`修改符一样，`^`修改符之后也可以跟一个（可选的）数字。","","这不是用来指定向上返回几代（`~`的作用），`^`后的数字指定跟随合并提交记录的哪一个父提交。还记得一个合并提交有多个父提交吧，所有选择哪条路径不是那么清晰。","",'Git默认选择跟随合并提交的"第一个"父提交，使用`^`后跟一个数字来改变这一默认行为。',"","废话不多说，举个例子。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里有一个合并提交。如果不加数字修改符直接切换到`master^`，会回到第一个父提交。","","(*在我们的图示中，第一个父提交是指合并提交正上方的那个父提交。*)"],afterMarkdowns:["OK--这恰好是我们想要的。"],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在来试试选择第二个父提交……"],afterMarkdowns:["看见了吧？我们回到了第二个父提交。"],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用`^`和`~`可以自由在在提交树中移动："],afterMarkdowns:["快若闪电！"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["再疯狂点，这些修改符支持链式操作！试一下这个："],afterMarkdowns:["和前面的结果一样，但只用了一条命令。"],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### 实践一下","","要完成此关，在指定的目标位置创建一个新的分支。","","很明显可以简单的直接使用提交记录的hash值（比如`C6`），但我要求你使用刚刚讲到的相对引用修饰符！"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Especificando los padres","","Como el modificador de `~`, `^` también acepta un número opcional después de él.","","En lugar de especificar cuántas generaciones hacia atrás ir (como `~`), el modificador de `^` especifica por cuál de las referencias padres seguir en un commit de merge. Recordá que un commit de merge tiene múltiples padres, por lo que el camino a seguir es ambiguo.","",'Git normalmente sigue el "primer" padre de un commit de merge, pero especificando un número junto con `^` cambia este comportamiento predefinido.',"","Demasiada charla, veámoslo en acción.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acá tenemos un commit de merge. Si hacemos checkout de `master^`, sin modificadores, vamos a seguir al primer padre después del commit de merge. ","","(*En nuestras visualizaciones, el primer padre se ubica directamente arriba del commit de merge.*)"],afterMarkdowns:["Fácil -- esto es a lo que estamos acostumbrados."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ahora tratemos de especificar el segundo padre, en cambio..."],afterMarkdowns:["¿Ves? Seguimos al otro padre hacia arriba."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Los modificadores de `^` y `~` son muy poderosos a la hora de movernos en un árbol:"],afterMarkdowns:["¡Rapidísimo!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Más loco aún, ¡estos modificadores pueden encadenarse entre sí! Mirá esto:"],afterMarkdowns:["El mismo movimiento que antes, pero todo en uno."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Ponelo en práctica","","Para completar este nivel, creá una nueva rama en la ubicación indicada.","","Obviamente sería muy fácil especificar el commit directamente (algo como `C6`), pero te reto a usar los modificadores de los que estuvimos hablando, mejor"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Especificando pais","","Assim como o modificador `~`, o modificador `^` também aceita um número opcional depois dele.","","Em vez de especificar o número de gerações a voltar (que é o que o `~` faz), o modificador no `^` especifica qual referência de pai a ser seguida a partir de um commit de merge. Lembre-se que commits de merge possuem múltiplos pais, então o caminho a seguir é ambíguo.","",'O Git normalmente subirá o "primeiro" pai de um commit de merge, mas especificar um número após o `^` muda esse comportamento padrão.',"","Basta de conversa, vejamos o operador em ação.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aqui temos um commit de merge. Se fizermos checkout em `master^` sem especificar um número, vamos seguir o primeiro pai acima do commit de merge. ","","(*Em nossa visualização, o primeiro pai é aquele diretamente acima do commit de merge.*)"],afterMarkdowns:["Fácil -- isso é aquilo com o que já estamos acostumados."],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora vamos, em vez disso, especificar o segundo pai..."],afterMarkdowns:["Viu? Subimos para o outro pai."],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Os modificadores `^` e `~` podem tornar a movimentação ao redor da árvore de commits muito poderosa:"],afterMarkdowns:["Rápido como a luz!"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ainda mais louco, esses modificadores podem ser encadeados em conjunto! Veja só:"],afterMarkdowns:["O mesmo movimento que o anterior, mas tudo em um único comando."],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### Coloque em prática","","Para completar este nível, crie um novo ramo no destino especificado.","","Obviamente seria mais fácil especificar o commit diretamente (com algo como `C6`), mas em vez disso eu desafio você a usar os modificadores sobre os quais falamos!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["### 選擇 parent commit","","和 `~` 符號一樣，`^` 符號的後面也可以接一個（可選的）數字。","","這不是用來指定往上回去幾代（`~` 的作用），`^` 後面所跟的數字表示我要選擇哪一個 parent commit。還記得一個 merge commit 可以有多個 parent commit 吧，所以當我們要選擇走到哪一個 parent commit 的時候就會比較麻煩了。","",'git 預設會選擇 merge commit 的"第一個" parent commit，使用 `^` 後面接一個數字可以改變這個預設的行為。',"","廢話不多說，舉一個例子。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["這裡有一個 merge commit。如果後面不加數字的話會直接切換到`master^`，也就是說會回到第一個 parent commit。","","(*在我們的圖示中，第一個 parent commit 是指 merge commit 正上方的那一個 parent commit。*)"],afterMarkdowns:["簡單吧！這就是預設的情況。"],command:"git checkout master^",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["現在來試試選擇第二個 parent commit..."],afterMarkdowns:["看到了嗎？我們回到了第二個 parent commit。"],command:"git checkout master^2",beforeCommand:"git checkout HEAD^; git commit; git checkout master; git merge C2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用`^`和`~`可以自由在 commit tree 中移動："],afterMarkdowns:["簡直就像是電光石火！"],command:"git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["再瘋狂點，這些符號可以被連在一起！試一下這個："],afterMarkdowns:["和前面的結果一樣，但只用了一條指令。"],command:"git checkout HEAD~^2~2",beforeCommand:"git commit; git checkout C0; git commit; git commit; git commit; git checkout master; git merge C5; git commit"}},{type:"ModalAlert",options:{markdowns:["### 練習一下","","要完成這一關，在指定的目標位置上面建立一個新的 branch。","","很明顯可以直接使用 commit 的 hash 值（比如 `C6`），但我要求你使用剛剛講到的相對引用的符號！"]}}]}}}},{}],77:[function(a,b,c){c.levelSequences={intro:[a("./intro/commits").level,a("./intro/branching").level,a("./intro/merging").level,a("./intro/rebasing").level],rampup:[a("./rampup/detachedHead").level,a("./rampup/relativeRefs").level,a("./rampup/relativeRefs2").level,a("./rampup/reversingChanges").level],move:[a("./rampup/cherryPick").level,a("./rampup/interactiveRebase").level],mixed:[a("./mixed/grabbingOneCommit").level,a("./mixed/jugglingCommits").level,a("./mixed/jugglingCommits2").level,a("./mixed/tags").level,a("./mixed/describe").level],advanced:[a("./rebase/manyRebases").level,a("./advanced/multipleParents").level,a("./rebase/selectiveRebase").level],remote:[a("./remote/clone").level,a("./remote/remoteBranches").level,a("./remote/fetch").level,a("./remote/pull").level,a("./remote/fakeTeamwork").level,a("./remote/push").level,a("./remote/fetchRebase").level],remoteAdvanced:[a("./remote/pushManyFeatures").level,a("./remote/mergeManyFeatures").level,a("./remote/tracking").level,a("./remote/pushArgs").level,a("./remote/pushArgs2").level,a("./remote/fetchArgs").level,a("./remote/sourceNothing").level,a("./remote/pullArgs").level]};
var d=c.sequenceInfo={intro:{displayName:{en_US:"Introduction Sequence",de_DE:"Einführung",ja:"まずはここから",fr_FR:"Séquence d'introduction",es_AR:"Secuencia introductoria",pt_BR:"Sequência introdutória",zh_CN:"基础篇",zh_TW:"基礎篇",ko:"기본 명령어"},about:{en_US:"A nicely paced introduction to the majority of git commands",de_DE:"Eine gut abgestimmte Einführung in die wichtigsten Git-Befehle",ja:"gitの基本的なコマンド群をほどよいペースで学ぶ",fr_FR:"Une introduction en douceur à la majorité des commandes git",es_AR:"Una breve introducción a la mayoría de los comandos de git",pt_BR:"Uma breve introdução à maioria dos comandos do git",zh_CN:"循序渐进介绍git主要命令",zh_TW:"循序漸進地介紹 git 主要命令",ko:"브랜치 관련 주요 git 명령어를 깔끔하게 알려드립니다"}},rampup:{displayName:{en_US:"Ramping Up",de_DE:"Aufstieg",ja:"次のレベルに進もう",fr_FR:"Montée en puissance",es_AR:"Acelerando",pt_BR:"Acelerando",zh_CN:"进阶篇",zh_TW:"進階篇"},about:{en_US:"The next serving of 100% git awesomes-ness. Hope you're hungry",de_DE:"Eine Portion Git-Wahnsinn zum Thema Navigation",ja:"更にgitの素晴らしさを堪能しよう",fr_FR:"Le prochain excellent plat de pur git. J'espère que vous êtes affamés",es_AR:"La próxima porción de 100% maravillas git. Espero que estés hambriento",pt_BR:"A próxima porção de maravilhas do git. Faminto?",zh_CN:"接下来是git的超赞特性。迫不及待了吧！",zh_TW:"接下來是 git 非常厲害的地方！相信你已經迫不及待了吧！"}},remote:{tab:"remote",displayName:{en_US:"Push & Pull -- Git Remotes!",de_DE:"Push & Pull -- entfernte Repositorys",ja:"Push及びPullコマンド -- Gitリモート",fr_FR:"Push & Pull -- dépôts gits distants !",es_AR:"Push & Pull -- Git Remotes!",pt_BR:"Push & Pull -- repositórios remotos no Git!",zh_CN:"Push & Pull -- Git Remotes!",zh_TW:"Push & Pull -- Git Remotes!"},about:{en_US:"Time to share your 1's and 0's kids; coding just got social",fr_FR:"C'est le temps de partager vos 1 et vos 0 les enfants, le code vient de devenir social.",ja:"自分のコードをより広く公開しましょう",de_DE:"Zeit Eure 1en und 0en zu teilen; Coding mit sozialer Komponente",es_AR:"Hora de compartir sus 1's y 0's, chicos; programar se volvió social!",pt_BR:"Hora de compartilhar seus 1's e 0's, crianças; programar agora é social!",zh_CN:"是时候分享你的代码了",zh_TW:"是時候分享你的程式碼了"}},remoteAdvanced:{tab:"remote",displayName:{en_US:"To Origin And Beyond -- Advanced Git Remotes!",de_DE:"Bis zum origin und noch weiter",ja:"Originだけではない -- Gitリモート上級編",fr_FR:"Vers l'infini et au-delà -- dépôts distants version avancée",es_AR:"Hasta el origin y más allá -- Git Remotes avanzado!",pt_BR:"Até a origin e além -- repositórios remotos avançados!",zh_CN:"关于origin 和 其它仓库 -- Git Gemotes 高级命令",zh_TW:"關於 origin 和其它 repo，git remote 的進階指令"},about:{en_US:"And you thought being a benevolent dictator would be fun...",fr_FR:"Et vous pensiez qu'être un dictateur bienfaisant serait amusant...",ja:"上級者の仕事は絶えずあり",es_AR:"Y pensabas que ser un dictador benévolo sería divertido...",pt_BR:"E você achava que ser um déspota esclarecido seria mais divertido...",zh_CN:"做一名仁慈的独裁者会很有趣..",zh_TW:"而且你會覺得做一個仁慈的獨裁者會很有趣...",de_DE:"Git Remotes für Fortgeschrittene"}},move:{displayName:{en_US:"Moving Work Around",de_DE:"Code Umherschieben",fr_FR:"Déplacer le travail",es_AR:"Moviendo el trabajo por ahí",pt_BR:"Movendo trabalho por aí",ja:"コードの移動",zh_CN:"精通 rebase！",zh_TW:"精通 rebase！",ko:"리베이스 완전정복!"},about:{en_US:"Get comfortable with modifying the source tree",de_DE:"Gewöhn dich daran, den Git-Baum zu verändern",fr_FR:"Soyez alaise de modifier l'arbre Git",es_AR:"Ponete cómodo con modificar el directorio fuente",pt_BR:"Fique confortável em modificar a árvore de códigos",ja:"話題のrebaseってどんなものだろう？って人にオススメ",ko:"그 좋다고들 말하는 rebase에 대해 알아봅시다!",zh_CN:"大家都在说的 rebase 究竟是神马？看看吧！",zh_TW:"大家都在說的 rebase 到底是什麼啊？來看看吧！"}},mixed:{displayName:{en_US:"A Mixed Bag",de_DE:"Ein Kessel Buntes",ja:"様々なtips",fr_FR:"Un assortiment",es_AR:"Bolsa de gatos",pt_BR:"Sortidos",ko:"종합선물세트",zh_CN:"大杂烩？",zh_TW:"活用 git 的指令"},about:{en_US:"A mixed bag of Git techniques, tricks, and tips",de_DE:"Eine bunte Mischung von Techniken, Tipps und Tricks",ja:"gitを使う上での様々なtipsやテクニックなど",fr_FR:"Un assortiment de techniques et astuces pour utiliser Git",es_AR:"Un rejunte de técnicas, trucos y tips sobre Git",pt_BR:"Técnicas, truques e dicas sortidas sobre Git",ko:"Git을 다루는 다양한 팁과 테크닉을 다양하게 알아봅니다",zh_CN:"Git技术、技巧与贴士杂烩",zh_TW:"git 的技術，招數與技巧"}},advanced:{displayName:{en_US:"Advanced Topics",de_DE:"Themen für Fortgeschrittene",ja:"上級トピック",fr_FR:"Sujets Avancés",es_AR:"Temas avanzados",pt_BR:"Temas avançados",zh_CN:"高级主题",zh_TW:"進階主題"},about:{en_US:"For the truly brave!",de_DE:"... die nie ein Mensch zuvor gesehen hat.",ja:"勇気ある人のみ！",fr_FR:"Pour les plus courageux !",es_AR:"¡Para los verdaderos valientes!",pt_BR:"Para os verdadeiros valentes!",zh_CN:"只为真正的勇士！",zh_TW:"來成為真正的強者吧！"}}};c.getTabForSequence=function(a){var b=d[a];return b.tab?b.tab:"main"}},{"./advanced/multipleParents":76,"./intro/branching":78,"./intro/commits":79,"./intro/merging":80,"./intro/rebasing":81,"./mixed/describe":82,"./mixed/grabbingOneCommit":83,"./mixed/jugglingCommits":84,"./mixed/jugglingCommits2":85,"./mixed/tags":86,"./rampup/cherryPick":87,"./rampup/detachedHead":88,"./rampup/interactiveRebase":89,"./rampup/relativeRefs":90,"./rampup/relativeRefs2":91,"./rampup/reversingChanges":92,"./rebase/manyRebases":93,"./rebase/selectiveRebase":94,"./remote/clone":95,"./remote/fakeTeamwork":96,"./remote/fetch":97,"./remote/fetchArgs":98,"./remote/fetchRebase":99,"./remote/mergeManyFeatures":100,"./remote/pull":101,"./remote/pullArgs":102,"./remote/push":103,"./remote/pushArgs":104,"./remote/pushArgs2":105,"./remote/pushManyFeatures":106,"./remote/remoteBranches":107,"./remote/sourceNothing":108,"./remote/tracking":109}],78:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master"},"bugFix":{"target":"C1","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',solutionCommand:"git branch bugFix;git checkout bugFix",name:{en_US:"Branching in Git",de_DE:"Branches in Git",ja:"Gitのブランチ",ko:"Git에서 브랜치 쓰기",es_AR:"Brancheando en Git",pt_BR:"Ramos no Git",fr_FR:"Gérer les branches avec Git",zh_CN:"建立Git分支",zh_TW:"建立 git branch"},hint:{en_US:'Make a new branch with "git branch [name]" and check it out with "git checkout [name]"',de_DE:'Lege mit "git branch <Name>" einen neuen Branch an und checke ihn mit "git checkout <Name> aus',ja:'ブランチの作成（"git branch [ブランチ名]"）と、チェックアウト（"git checkout [ブランチ名]"）',es_AR:'Hacé una nueva rama con "git branch [nombre]" y cambiá a ella con "git checkout [nombre]"',pt_BR:'Crie um novo ramo com "git branch [nome]" e mude para ele com "git checkout [nome]"',fr_FR:'Faites une nouvelle branche avec "git branch [nom]" positionnez-vous dans celle-ci avec "git checkout [nom]"',zh_CN:"用 'git branch [分支名]' 来创建分支，用 'git checkout [分支名]' 切换到分支",zh_TW:"用 'git branch [ branch 名稱]' 來建立 branch，用 'git checkout [ branch 名稱]' 切換到該 branch",ko:'"git branch [브랜치명]"으로 새 브랜치를 만들고, "git checkout [브랜치명]"로 그 브랜치로 이동하세요'},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Branches","","Branches in Git are incredibly lightweight as well. They are simply references to a specific commit -- nothing more. This is why many Git enthusiasts chant the mantra:","","```","branch early, and branch often","```","","Because there is no storage / memory overhead with making many branches, it's easier to logically divide up your work than have big beefy branches.","",'When we start mixing branches and commits, we will see how these two features combine. For now though, just remember that a branch essentially says "I want to include the work of this commit and all parent commits."']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see what branches look like in practice.","","Here we will create a new branch named `newImage`"],afterMarkdowns:["There, that's all there is to branching! The branch `newImage` now refers to commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's try to put some work on this new branch. Hit the button below"],afterMarkdowns:["Oh no! The `master` branch moved but the `newImage` branch didn't! That's because we weren't \"on\" the new branch, which is why the asterisk (*) was on `master`"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's tell git we want to checkout the branch with","","```","git checkout [name]","```","","This will put us on the new branch before committing our changes"],afterMarkdowns:["There we go! Our changes were recorded on the new branch"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! You are all ready to get branching. Once this window closes,","make a new branch named `bugFix` and switch to that branch"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches in Git","","Branches sind in Git extrem schlank. Sie sind einfach Verweise auf einen bestimmten Commit -- das ist alles. Es ist unter Git-Enthusiasten deshalb gängige Praxis, früh und oft Branches anzulegen.","","Da das Anlegen von Branches keinen Plattenplatz und Speicher verbraucht, liegt es nahe die Arbeit in kleine logische Häppchen aufzuteilen, anstatt mit wenigen großen, monolithischen Branches zu hantieren.","",'Wir werden sehen wie Commits und Branches zusammengehören sobald wir anfangen mit beiden zu arbeiten. Bis hierhin merk dir einfach, dass ein Branch im Prinzip bedeutet "ich möchte die Arbeit, die in diesem Commit und seinen Vorgändern steckt, sichern".']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir mal, wie Branches in der Praxis aussehen.","","Wir legen einen neuen Branch an und nennen ihn `issue`:"],afterMarkdowns:["Und das war's auch schon, mehr ist es nicht. Der Branch `issue` zeigt nun auf den Commit `C1`."],command:"git branch issue",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lass uns mal ein wenig auf dem neuen Branch arbeiten. Machen wir einen Commit:"],afterMarkdowns:['Oi! Der Branch `master` hat sich verändert, aber der Branch `issue` nicht. Das liegt daran, dass wir nicht "auf" dem neuen Branch waren, weshalb das Sternchen `*` auch hinter `master` steht.'],command:"git commit",beforeCommand:"git branch issue"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Sagen wir Git also erst mal auf welchem Branch wir arbeiten wollen, und zwar mit","","```","git checkout <Name>","```","","Das wird uns auf den neuen Branch bringen bevor wir unsere Änderungen committen."],afterMarkdowns:["Und fertig! Unsere Änderungen wurden im neuen Branch gespeichert."],command:"git checkout issue; git commit",beforeCommand:"git branch issue"}},{type:"ModalAlert",options:{markdowns:["Cool! Jetzt bist du soweit, selbst Branches anzulegen. Wenn dieses Fenster geschlossen wurde, leg einen neuen Branch namens `bugFix` an und schalte auf diesen um."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのブランチ","","Gitではコミットだけでなく、ブランチもまた信じられないほど軽量です。ブランチとは単に特定のコミットを指示したポインタにしか過ぎません。Gitの達人は決まってこう言うのは、そのためです：","","```","早めに、かつ頻繁にブランチを切りなさい","```","","どれほど多くのブランチを作ってもストレージやメモリを全然使わないので、ブランチを肥大化させるよりも論理的に分割していく方が簡単なのです。","","ブランチとコミットをあわせて使い始めると、これら2つのフィーチャがどのように連動して機能するかがわかるでしょう。ここではとりあえず、ブランチは基本的には「あるコミットとその親のコミットたちを含めた全てのコミット」のことを呼ぶと覚えておいてください。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["では実際にブランチがどのようなものかを見ていきましょう。","","`newImage`という名前の新しいブランチを切ってみることにします。"],afterMarkdowns:["以上。必要な手順はこれだけです。いま作成された`newImage`ブランチは`C1`コミットを指しています。"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["この新しいブランチに何か変更を加えてみましょう。次のボタンを押してください。"],afterMarkdowns:["あれ？`newImage`ではなくて`master`ブランチが移動してしまいました。これは、私たちが`newImage`のブランチ上で作業していなかったためです。どのブランチで作業しているかは、アスタリスク(*)がついてるかどうかで分かります。"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["今度は作業したいブランチ名をgitに伝えてみましょう。","","```","git checkout [ブランチ名]","```","","このようにして、コミットする前に新しいブランチへと作業ブランチを移動することができます。"],afterMarkdowns:["できましたね。今度は新しいブランチに対して変更を記録することができました。"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["OK! もうどんなブランチでも切れますね。このウィンドウを閉じて、","`bugFix`という名前のブランチを作成し、そのブランチをチェックアウトしてみましょう。"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramas en Git","","Las ramas (branches) en Git son increíblemente livianas. Son sólo referencias a un commit específico - nada más. Por esto es que tantos entusiastas de Git siguen el mantra:","","```","brancheá temprano, y brancheá seguido","```","","Como no hay consumo extra de alamcenamiento ni memoria al hacer varias ramas, es más fácil dividir lógicamente tu trabajo que tener un par de ramas grandes.","",'Cuando empecemos a mezclar ramas y commits, vamos a ver cómo se combinan estas dos herramientas. Por ahora, en cambio, simplemente recordá que una rama escencialmente dice "Quiero incluir el trabajo de este commit y todos su ancestros".']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos cómo se ven las ramas en práctica.","","Acá vamos a crear una rama nueva llamada `newImage`"],afterMarkdowns:["Ahí está, ¡eso es todo lo que hay que hacer para branchear! La rama `newImage` ahora referencia al commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Pongamos algo de trabajo en esta nueva rama. Apretá el botón de acá abajo"],afterMarkdowns:['¡Uh, no! ¡La rama `master` avanzó, pero `newImage` no! Eso es porque no estábamos "en" la rama nueva, y por eso el asterisco (*) estaba en `master`'],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Digámosle a git que queremos checkoutear esa rama con","","```","git checkout [name]","```","","Esto va a situarnos en esa rama antes de commitear nuestros cambios"],afterMarkdowns:["¡Ahí estamos! Nuestros cambios se registraron en nuestra nueva rama"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["¡Ok! Ya estás listo para manejar ramas. Cuando se cierre esta ventana,","creá una nueva rama llamada `bugFix` y cambiate a ella"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramos no Git","","Ramos no Git também são incrivelmente leves. Eles são simplesmente referências a um commit específico -- e nada mais. É por isso que muitos entusiastas do Git entoam o mantra:","","```","ramifique cedo, ramifique sempre","```","","Devido a não existir sobrecarga de armazenamento / memória associada à criação de ramos, é mais fácil dividir logicamente o seu trabalho do que ter ramos grandes e gordos.","",'Quando começarmos a misturar ramos e commits, vamos ver como esses dois recursos combinam bem. Por enquanto, só lembre que um ramo diz essencialmente "Quero incluir o trabalho deste commit e de todos os seus ancestrais".']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos como os ramos funcionam na prática.","","Aqui vamos criar um novo ramo chamado `newImage`"],afterMarkdowns:["Veja, é só isso que você tem que fazer para ramificar! O ramo `newImage` agora se refere ao commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos tentar colocar algum trabalho neste novo ramo. Clique no botão abaixo"],afterMarkdowns:['Ah não! O ramo `master` se moveu mas o `newImage` não! Isso é porque o novo ramo não era o "ativo", e é por isso que o asterisco (*) estava no `master`'],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos contar ao git que queremos fazer checkout no ramo com:","","```","git checkout [nome]","```","","Isso vai nos situar no ramo antes de commitarmos nossas mudanças"],afterMarkdowns:["Aqui vamos nós! Nossas mudanças foram gravadas no novo ramo"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! Vocês estão todos prontos para ramificar. Assim que esta janela fechar,","crie um novo ramo chamado `bugFix` e mude para esse ramo"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches Git","","Les branches sous Git sont incroyablement légères. Elles sont simplment des références sur un commit spécifique -- rien de plus. C'est pourquoi beaucoup d'enthousiastes répètent en cœur :","","```","des branches le plus tôt possible, et des branches souvent","```","","Parce qu'il n'y a pas de surcoût (stockage/mémoire) associé aux branches, il est facile de diviser son travail en de nombreuses branches plutôt que d'avoir quelques grosses branches.","","Nous verrons comment les banches et les commits interagissent quand nous les utiliserons ensemble. Pour l'instant, souvenez-vous qu'une branche est un moyen d'exprimer \"Je veux inclure le contenu de ce commit et de tous les commits parents.\""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Regardons à quoi ressemblent les branches en pratique.","","Nous allons nous positionner (checkout) dans une nouvelle branche appellée `newImage`"],afterMarkdowns:["Et voilà, c'est tout ! La branche `newImage` se réfère désormais au commit `C1`"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Travaillons mainenant dans cette branche. Appuyez sur le bouton ci-dessous."],afterMarkdowns:["Oh non! La branche `master` a bougé mais pas la branche `newImage` ! C'est parce que nous n'étions pas  \"sur\" la nouvelle branche, comme indiqué par l'asterisque (*) sur `master`"],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Indiquons à git que nous voulons nous positionner sur la branche avec ","","```","git checkout [nom]","```","","Cela nous positionne sur la nouvelle branche avant de faire un commit avec nos modifications"],afterMarkdowns:["C'est parti ! Nos modifications ont été enregistrées sur la nouvelle branche"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["Ok! Vous êtes fin prêt pour faire des branches. Après la fermeture de cette fenêtre,","faites une nouvelle branche nommée `bugFix` et positionnez-vous sur cette branche"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Branches",""," Git 的分支非常轻量。它们只是简单地指向某个提交纪录——仅此而已。所以许多Git爱好者会念叨：","","```","早点建分支！经常建分支！","```","","创建分支没有储存或内存上的开销，所以按逻辑分解工作比维护单一的代码树要简单。","","同时使用分支和提交时，我们会看到两者如何配合。现在，只要记住使用分支其实就是在说：“我想包含本次提交及所有的父提交记录。”"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["举个例子看看分支究竟是什么。","","这里，我们切换到到名为`newImage`的新分支。"],command:"git branch newImage",afterMarkdowns:["看，这就是建立分支所需的操作啦！`newImage`分支现在指向提交记录`C1`。"],beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在让我们修改一下新分支。点击下面的按钮。"],command:"git commit",afterMarkdowns:["啊摔！`master`分支前进了，但`newImage`分支没有哇！这是因为我们没有“在”这个新分支上，这也是为什么星号（*）只在 `master` 上。"],beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用如下命令告诉git我们想要切换到新的分支","","```","git checkout [name]","```","","这可以让我们在提交修改之前切换到新的分支。"],command:"git checkout newImage; git commit",afterMarkdowns:["好的嘞！新的分支已经记录了我们的修改。"],beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["好啦，你已经准备好使用分支了。当前窗口关闭后，","创建一个叫 `bugFix` 的新分支，然后切换过去。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git 的 branch",""," git 的 branch 非常不佔空間。它們只是一個指向某個 commit 的 reference，就這麼簡單。所以許多 git 的愛好者會建議：","","```","早點建立 branch！經常建立 branch！","```","","因為建立 branch 不怎麼會佔用到硬碟空間或者是記憶體，所以你可以把你目前的工作分成好幾個 branch，這比只用一個 branch 要來的好。","","同時使用 branch 和 commit 時，我們待會可以看到兩者如何配合。現在，只要記住使用 branch 其實就是在說：「我想要包含這一次的 commit 以及它的所有 parent 的 commit。」"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["舉一個例子來看看 branch 到底是什麼。","","這裡，我們建立一個名稱為 `newImage` 的新的 branch。"],command:"git branch newImage",afterMarkdowns:["看吧！這就是建立 branch 所需的操作啦！ `newImage` branch 現在指向 commit `C1`。"],beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["現在讓我們這個新的 branch 做一些操作。點擊下面的按鈕。"],command:"git commit",afterMarkdowns:["太奇怪了啦！ `master` branch 前進了，但 `newImage` branch 沒有前進！這是因為我們沒有「在」這個新的 branch 上，這也是為什麼星號（*）會在 `master` 上。"],beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用如下指令告訴 git 我們想要切換到新的 branch","","```","git checkout [name]","```","","這可以讓我們在 commit 之前切換到新的 branch。"],command:"git checkout newImage; git commit",afterMarkdowns:["太好了！新的 branch 已經記錄了我們的修改。"],beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["好啦，你已經準備好使用 branch 了。當目前的視窗關閉後，","建立一個叫 `bugFix` 的新的 branch，然後切換過去。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 브랜치","","깃의 브랜치도 놀랍도록 가볍습니다. 브랜치는 특정 커밋에 대한 참조(reference)에 지나지 않습니다. 이런 사실 때문에 수많은 Git 애찬론자들이 자주 이렇게 말하곤 합니다:","","```","브랜치를 서둘러서, 그리고 자주 만드세요","```","","브랜치를 많이 만들어도 메모리나 디스크 공간에 부담이 되지 않기 때문에, 여러분의 작업을 커다른 브랜치로 만들기 보다, 작은 단위로 잘게 나누는 것이 좋습니다.","",'브랜치와 커밋을 같이 쓸 때, 어떻게 두 기능이 조화를 이루는지 알아보겠습니다. 하지만 우선은, 단순히 브랜치를 "하나의 커밋과 그 부모 커밋들을 포함하는 작업 내역"이라고 기억하시면 됩니다.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["브랜치가 어떤 것인지 연습해보죠.","","`newImage`라는 브랜치를 살펴보겠습니다."],afterMarkdowns:["저 그림에 브랜치의 모든 것이 담겨있습니다! 브랜치 `newImage`가 커밋 `C1`를 가리킵니다"],command:"git branch newImage",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["이 새로운 브랜치에 약간의 작업을 더해봅시다. 아래 버튼을 눌러주세요"],afterMarkdowns:["앗! `master` 브랜치가 움직이고, `newImage` 브랜치는 이동하지 않았네요! 그건 우리가 새 브랜치 위에 있지 않았었기 때문입니다. 별표(*)가 `master`에 있었던 것이죠."],command:"git commit",beforeCommand:"git branch newImage"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["아래의 명령으로 새 브랜치로 이동해 봅시다.","","```","git checkout [브랜치명]","```","","이렇게 하면 변경분을 커밋하기 전에 새 브랜치로 이동하게 됩니다."],afterMarkdowns:["이거죠! 이제 우리의 변경이 새 브랜치에 기록되었습니다!"],command:"git checkout newImage; git commit",beforeCommand:"git branch newImage"}},{type:"ModalAlert",options:{markdowns:["좋아요! 이제 직접 브랜치 작업을 연습해봅시다. 이 창을 닫고,","`bugFix`라는 새 브랜치를 만드시고, 그 브랜치로 이동해보세요"]}}]}}}},{}],79:[function(a,b,c){c.level={name:{en_US:"Introduction to Git Commits",de_DE:"Einführung in Git Commits",es_AR:"Introducción a los commits de Git",pt_BR:"Introdução aos commits no Git",fr_FR:"Introduction aux commits avec Git",ja:"Gitのコミット",ko:"Git 커밋 소개",zh_CN:"Git Commits简介",zh_TW:"介紹 git commit "},goalTreeString:'{"branches":{"master":{"target":"C3","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git commit;git commit",startTree:'{"branches":{"master":{"target":"C1","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',hint:{en_US:"Just type in 'git commit' twice to finish!",de_DE:"Gib einfach zweimal 'git commit' ein um den Level abzuschließen",es_AR:"¡Simplemente tipeá 'git commit' dos veces para terminar!",pt_BR:"Simplesmente digite 'git commit' duas vezes para concluir!",fr_FR:"Il suffit de saisir 'git commit' deux fois pour réussir !",zh_CN:"敲两次 'git commit' 就好啦！",zh_TW:"輸入兩次 'git commit' 就可以完成！",ja:"'git commit'コマンドを2回打てば完成!",ko:"'git commit'이라고 두 번 치세요!"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","A commit in a git repository records a snapshot of all the files in your directory. It's like a giant copy and paste, but even better!","",'Git wants to keep commits as lightweight as possible though, so it doesn\'t just blindly copy the entire directory every time you commit. It can (when possible) compress a commit as a set of changes, or a "delta", from one version of the repository to the next.',"","Git also maintains a history of which commits were made when. That's why most commits have ancestor commits above them -- we designate this with arrows in our visualization. Maintaining history is great for everyone working on the project!","","It's a lot to take in, but for now you can think of commits as snapshots of the project. Commits are very lightweight and switching between them is wicked fast!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see what this looks like in practice. On the right we have a visualization of a (small) git repository. There are two commits right now -- the first initial commit, `C0`, and one commit after that `C1` that might have some meaningful changes.","","Hit the button below to make a new commit"],afterMarkdowns:["There we go! Awesome. We just made changes to the repository and saved them as a commit. The commit we just made has a parent, `C1`, which references which commit it was based off of."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Go ahead and try it out on your own! After this window closes, make two commits to complete the level"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","Ein Commit in ein Git-Repository speichert einen Abbildung aller Dateien in deinem Projektverzeichnis. Es ist wie ein riesiges Kopieren und Einfügen, nur besser.","","Allerdings will Git die Commits so schlank wie möglich halten, also kopiert es nicht einfach stur das ganze Verzeichnis jedes Mal wenn du committest. Es kann (wenn möglich) Commits als Menge von Änderungen zusammenpacken, von einer Version des Repositorys zur nächsten.","","Außerdem führt Git ein Protokoll darüber welche Commits wann gemacht wurden, und welcher auf welchen folgt. Deshalb werden die Commits hier mit ihrem Vorgänger über sich gezeigt -- wir verwenden Pfeile zur Darstellung der Beziehung. Dieses Protokoll zu haben ist eine tolle Sache für jeden, der an einem Projekt arbeitet.","","Das war jetzt eine Menge Neues, aber vorerst kannst du dir Commits einfach als Abbildungen des Projekts vorstellen. Commits sind sehr ressourcenschonend, und zwischen ihnen wechseln geht superschnell!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Mal sehen wie das in der Praxis ist. Rechts sehen wir ein (kleines) Git-Repository. Es gibt akutell zwei Commits -- den initialen, `C0`, und den danach, `C1`, der irgendwelche Änderungen enthält.","","Klick die Schaltfläche unten um einen neuen Commit zu erzeugen:"],afterMarkdowns:["Fertig. Klasse! Wir haben gerade Änderungen gemacht und als Commit im Repository gespeichert. Der Commit, den wir gerade gemacht haben, hat den Vorgänger `C1`; der verweist wiederum auf den Commit, auf dem er basiert: `C0`."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Probier das committen gleich mal aus! Mach zwei Commits um den Level abzuschließen."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitのコミット","コミットによって、ディレクトリ中の全てのファイルのスナップショットを記録します。巨大なコピー＆ペーストのようなものですが、実はそれよりずっと良いものです。","","Gitではコミットを可能な限り軽量に保つために、コミット毎にフォルダ全体をコピーしません。実際にはGitは、コミットを直前のバージョンから一つ先のバージョンへの「変更の固まり」あるいは「差分」として記録します。後で出てきますが、ほとんどのコミットが親を持っているのはそういう理由からです。","","リポジトリをcloneする時には、内部動作としてはコミットの差分をたどって全ての変更を取得しています。cloneした時に以下のような表示が出るのは：","","`resolving deltas`（訳：差分を解決中）","","このためです。","","もっと説明したいところですが、しばらくはコミットをスナップショットのようなものだと考えてください。コミットは非常に軽量であり、コミット間の移動も非常に高速です。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["これがどういうことか、動きを見ていきましょう。図には（小さな）gitリポジトリが描かれています。コミットが2つあります ― `C0`という名前の初回のコミットがあり、`C1`という名前の次のコミットが続きます。これは何か意味のある変更かもしれません。","","下のボタンを押下して新しいコミットを作ってみましょう。"],afterMarkdowns:["できました! 良いですね。いまリポジトリに新しい変更が加えられ、1つのコミットとして保存されました。作成したコミットには親がいて、このコミットの出発点となった`C1`を指しています。"],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["実際に手を動かしてみましょう。このウィンドウを閉じたら、試しに2回コミットをしてみましょう。"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits de Git","Un commit en un repositorio git registra un snapshot de todos los archivos en tu directorio. Es como un _gran_ copy&paste, ¡pero incluso mejor!","",'Git pretende mantener los commits tan livianos como sea posible, por lo que no copia ciegamente el directorio completo cada vez que commiteás. Puede (cuando es posible) comprimir un commit como un conjunto de cambios (o un _"delta"_) entre una versión de tu repositorio y la siguiente.',"","Git mantiene, también, un historial de qué commits se hicieron cuándo. Es por eso que la mayoría de los commits tienen commits ancestros arriba suyo -- designamos esto con flechas en nuestra visualización. ¡Mantener el historial es genial para todos los que trabajan en el proyecto!","","Hay un montón en lo que ahondar, pero por ahora podés pensar en los commits como snapshots de tu proyecto. Los commits son muy livianos, y ¡cambiar de uno a otro es terriblemente rápido!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos cómo se ve esto en la práctica. A la derecha tenemos una visualización de un (pequeño) repositorio git. Hay dos commits ahora: el commit inicial, `C0`, y un commit que lo sigue, `C1`, que podría tener algunos cambios interesantes.","","Dale al botón de abajo para hacer un nuevo commit"],afterMarkdowns:["¡Ahí va! Increíble. Acabamos de hacer cambios al repositorio y los guardamos como un commit. El commit que acabamos de crear tiene un padre, `C1`, que referencia al commit en que se basó este."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["¡Dale, intentalo vos ahora! Cuando se cierre esta ventana, hacé dos commits para completar el nivel."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits no Git","Um commit em um repositório git registra uma fotografia (snapshot) de todos os arquivos no seu diretório. É como um _grande_ copy&paste, mas ainda melhor!","",'O Git tem por objetivo manter os commits tão leves quanto possível, de forma que ele não copia cegamente o diretório completo toda vez que você commita. Ele pode (quando possível) comprimir um commit como um conjunto de mudanças (ou um _"delta"_) entre uma versão do seu repositório e a seguinte.',"","O Git também mantém um histórico de quando ocorreu cada commit. É por isso que a maioria dos commits tem ancestrais acima de si -- que indicamos usando setas na nossa visualização. Manter a história é ótimo para todos que trabalham no projeto!","","Há muito para aprender, mas por enquanto pense nos commits como snapshots do seu projeto. Os commits são muito leves, e mudar de um para outro é extremamente rápido!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos o que isso significa na prática. À direita, temos uma visualização de um (pequeno) repositório git. Há dois commits no momento: o commit inicial, `C0`, e um commit que se segue, `C1`, que poderia conter algumas mudanças interessantes.","","Clique no botão abaixo para fazer um novo commit"],afterMarkdowns:["Aí vamos nós! Incrível. Acabamos de fazer mudanças no repositório e as guardamos como um commit. O commit que acabamos de criar tem um pai, `C1`, que referencia em qual commit ele se baseou."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Vamos lá, tente você agora! Quando esta janela se fechar, faça dois commits para completar o nível."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits Git","Un commit dans un dépôt (repository) git enregistre une image (snapshot) de tous les fichiers du repertoire. Comme un Copier-Coller géant, mais en bien mieux !","","Git fait en sorte que les commits soient aussi légers que possible donc il ne recopie pas tout le répertoire à chaque commit. En fait, git n'enregistre que l'ensemble des changments (\"delta\") depuis la version précédante du dépôt. C'est pour cette raison que la plupart des commits ont un commit parent -- ainsi que nous le verrons plus tard.","",'Pour cloner un dépôt, il faut décompresser ("résoudre") tous ces deltas. C\'est la raison pour laquelle la commande écrit :',"","`resolving deltas`","","lorsque l'on clone un dépôt.","","C'est beaucoup à absorber, mais pour l'instant vous pouvez considérer les commits comme des snapshots du projet. Les commits sont très légers et passer de l'un à l'autre est très rapide !"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons à quoi cela ressemble en pratique. Sur la droite, on peut visualiser un (petit) dépôt git. Il y a pour l'instant deux commits -- le premier commit initial, `C0`, et un commit suivant `C1` qui aurait des changements significatifs.","","Appuyez sur le bouton ci-dessous pour faire un nouveau commit"],afterMarkdowns:["C'est parti ! Super. Nous venons de faire des modifications sur le dépôt et de saugevarder celles-ci dans un commit. Ce commit que nous venons de faire a un parent, `C1`, qui référence le commit sur lequel il est basé."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Allez-y et essayez par vous-même ! Après la fermeture de cettefenêtre, faites deux commits pour terminer ce niveau."]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 커밋","커밋은 Git 저장소에 여러분의 디렉토리에 있는 모든 파일에 대한 스냅샷을 기록하는 것입니다. 디렉토리 전체에 대한 복사해 붙이기와 비슷하지만 훨씬 유용합니다!","",'Git은 커밋을 가능한한 가볍게 유지하고자 해서, 커밋할 때마다 디렉토리 전체를 복사하는 일은 하지 않습니다. 각 커밋은 저장소의 이전 버전과 다음 버전의 변경내역("delta"라고도 함)을 저장합니다. 그래서 대부분의 커밋이 그 커밋 위에 부모 커밋을 가리키고 있게 되는 것입니다. -- 곧 그림으로 된 화면에서 살펴보게 될 것입니다.',"","저장소를 복제(clone)하려면, 그 모든 변경분(delta)를 풀어내야하는데, 그 때문에 명령행 결과로 아래와 같이 보게됩니다. ","","`resolving deltas`","","알아야할 것이 꽤 많습니다만, 일단은 커밋을 프로젝트의 각각의 스냅샷들로 생각하시는 걸로 충분합니다. 커밋은 매우 가볍고 커밋 사이의 전환도 매우 빠르다는 것을 기억해주세요!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["연습할 때 어떻게 보이는지 확인해보죠. 오른쪽 화면에 git 저장소를 그림으로 표현해 놓았습니다. 현재 두번 커밋한 상태입니다 -- 첫번째 커밋으로 `C0`, 그 다음으로 `C1`이라는 어떤 의미있는 변화가 있는 커밋이 있습니다.","","아래 버튼을 눌러 새로운 커밋을 만들어보세요"],afterMarkdowns:["이렇게 보입니다! 멋지죠. 우리는 방금 저장소 내용을 변경해서 한번의 커밋으로 저장했습니다. 방금 만든 커밋은 부모는 `C1`이고, 어떤 커밋을 기반으로 변경된 것인지를 가리킵니다."],command:"git commit",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["계속해서 직접 한번 해보세요! 이 창을 닫고, 커밋을 두 번 하면 다음 레벨로 넘어갑니다"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Commits","git仓库中的一次提交（commit）记录目录下所有文件的快照。感觉像是大量的复制和粘贴，但 git 做的不只这么简单！","",'Git 希望提交记录尽可能地轻量，所以每次进行提交时，它不会简单地复制整个目录。实际上它把每次提交记录保存为从代码库的一个版本到下一个版本的变化集，或者说一个"增量（delta）"。所以，大部分提交记录都有一个父提交（parent commit）-- 我们会很快演示这一点。',"","克隆（clone）代码库时，需要解包（unpack）或者“解析（resolve）”所有的差异。所以在克隆代码库时，可能会看见如下命令行输出：","","`resolving deltas`","","要学的东西有很多，但现在你可以把提交记录看作是项目的快照。提交记录非常轻量且可以快速切换！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在实践中学习commit。右边是一个（小）git代码库的图示。当前有两个提交记录—— 初始提交`C0`和其后可能包含有用修改的提交`C1`。","","点击下面的按钮生成新的提交记录。"],command:"git commit",afterMarkdowns:["看！碉堡吧！我们修改了代码，并保存为一次提交记录。刚刚做的提交`C2`有一个父提交（parent）`C1`，代表此次修改的基础。"],beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["接下来你可以随便测试。当前窗口关闭后，完成两次提交就可以过关！"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git commit","一個 commit 在 git repo 中會記錄目錄下所有文件的快照。感覺像是大量的複製和貼上，但 git 的速度更快！","",'git 希望 commit 儘可能地不占空間，所以每次進行 commit 的時候，它不會單純地複製整個目錄。實際上它把每次 commit 視為從目前的版本到下一個版本的變化量，或者說一個 "（delta）"。',"","git 會保存 commit 的歷史紀錄，所以，絕大部分的 commit 的上面都會有 parent commit，在我們的圖形表示中，箭頭方向表示從 parent commit 到所對應的 child commit，保存這樣子的一個歷史紀錄是非常有用的。","","要學的東西有很多，但現在你可以把 commit 當作是當下的 project 的快照。commit 不佔空間且可以快速切換！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在實例中學習 commit。右邊是一個（小）git repository。當前有兩個 commit，一開始的 commit `C0` 以及 `C1` 這一個 commit 來表示之後可能的一些修改。","","點擊下面的按鈕生成新的 commit。"],command:"git commit",afterMarkdowns:["看吧！很厲害！我們對於文件做了一些修改，並且把這些修改表示成一個 commit。剛剛做的 commit `C2` 有一個 parent commit `C1`，代表此次修改是從那裡過來的。"],beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["接下來你可以隨便測試。當目前的視窗關閉之後，輸入兩次 commit 就可以過關！"]}}]}}}
},{}],80:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C4","id":"master"},"bugFix":{"target":"C2","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3","C2"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',solutionCommand:"git checkout -b bugFix;git commit;git checkout master;git commit;git merge bugFix",name:{en_US:"Merging in Git",de_DE:"Mergen in git",es_AR:"Mergeando en Git",pt_BR:"Merge no Git",fr_FR:"Faire des 'merge' (fusions de branches) avec Git",ko:"Git에서 브랜치 합치기(Merge)",ja:"ブランチとマージ",zh_CN:"分支与合并",zh_TW:"git 中的 merge"},hint:{en_US:"Remember to commit in the order specified (bugFix before master)",de_DE:"Denk dran in der angegebenen Reihenfolge zu committen (erst bugFix, dann master)",ja:"指示された順番でコミットすること（masterの前にbugFixで）",es_AR:"Acordate de commitear en el orden especificado (bugFix antes de master)",pt_BR:"Lembre-se de commitar na ordem especificada (bugFix antes de master)",fr_FR:"Pensez à faire des commits dans l'ordre indiqué (bugFix avant master)",zh_CN:"记住按指定的顺序提交（bugFix先于master）",zh_TW:"記住按指定的順序 commit（bugFix 比 master 優先）",ko:"말씀드린 순서대로 커밋해주세요 (bugFix에 먼저 커밋하고 master에 커밋)"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches and Merging","","Great! We now know how to commit and branch. Now we need to learn some kind of way of combining the work from two different branches together. This will allow us to branch off, develop a new feature, and then combine it back in.","",'The first method to combine work that we will examine is `git merge`. Merging in Git creates a special commit that has two unique parents. A commit with two parents essentially means "I want to include all the work from this parent over here and this one over here, *and* the set of all their parents."',"","It's easier with visuals, let's check it out in the next view"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches; each has one commit that's unique. This means that neither branch includes the entire set of \"work\" in the repository that we have done. Let's fix that with merge.","","We will `merge` the branch `bugFix` into `master`"],afterMarkdowns:["Woah! See that? First of all, `master` now points to a commit that has two parents. If you follow the arrows up the commit tree from `master`, you will hit every commit along the way to the root. This means that `master` contains all the work in the repository now.","","Also, see how the colors of the commits changed? To help with learning, I have included some color coordination. Each branch has a unique color. Each commit turns a color that is the blended combination of all the branches that contain that commit.","","So here we see that the `master` branch color is blended into all the commits, but the `bugFix` color is not. Let's fix that..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's merge `master` into `bugFix`:"],afterMarkdowns:["Since `bugFix` was an ancestor of `master`, git didn't have to do any work; it simply just moved `bugFix` to the same commit `master` was attached to.","","Now all the commits are the same color, which means each branch contains all the work in the repository! Woohoo!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["To complete this level, do the following steps:","","* Make a new branch called `bugFix`","* Checkout the `bugFix` branch with `git checkout bugFix`","* Commit once","* Go back to `master` with `git checkout`","* Commit another time","* Merge the branch `bugFix` into `master` with `git merge`","",'*Remember, you can always re-display this dialog with "objective"!*']}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches und Mergen","","Super! Wir wissen jetzt, wie man committet und einen Branch anlegt. Jetzt müssen wir nur noch rauskriegen, wie man die Arbeit, die in verschiedenen Branches steckt, zusammenführen kann. Dann können wir einen neuen Branch erstellen, darin ein neues Feature entwickeln, und das dann in den ursprünglichen Zweig integrieren.","",'Die einfachste Methode, mit der man Branches zusammenführen kann, ist `git merge`. Das Mergen erzeugt in git einen speziellen Commit, der zwei Vorgänger hat. Ein solcher Commit bedeutet im Prinzip "ich möchte alle Arbeit von dem Vorgänger hier und dem dort *und* allen ihren jeweiligen Vorgängern miteinander kombinieren".',"","Grafisch dargestellt ist es einfacher zu verstehen, lass es uns mal ansehen"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir zwei Branches; jeder besteht jeweils aus einem eigenen Commit. Das bedeutet, dass keiner der beiden Branches alle Inhalte des gesamten Repositorys kennt. Das werden wir mit einem Merge ändern.","","Wir werden den Branch `bugFix` in `master` integrieren"],afterMarkdowns:["Wow! Hast du das gesehen? Zunächst mal zeigt `master` jetzt auf einen Commit mit zwei Vorgängern. Wenn du den beiden Pfeilen immer weiter folgst, kommst du an jedem Commit im Repository vorbei. Das heißt `master` enthält jetzt alles, was es im Repository gibt.","","Siehst du außerdem wie sich die Farben der Commits verändert haben? Um die Vorgänge zu verdeutlichen hab ich etwas Farbe ins Spiel gebracht. Jeder Branch hat seine eindeutige Farbe. Jeder Merge Commit bekommt als Farbe eine Mischung aus den Farben seiner Vorgänger.","","Wir sehen also, dass die Farbe des Branch `master` in alle Commits gemischt wurde, die von `bugFix` aber nicht. Ändern wir das ..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Mergen wir `master` in `bugFix`:"],afterMarkdowns:["Da `bugFix` ein Vorgänger von `master` war, musste git hier kaum etwas tun; es verschiebt `bugFix` einfach auf den Commit, auf den auch `master` zeigt.","","Jetzt haben alle Commits dieselbe Farbe, das heißt jeder Branch enthält die Informationen des gesamten Repositorys! Juhu!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Führe folgendes aus, um diesen Level zu schaffen:","","* Lege einen neuen Branch `bugFix` an","* Checke `bugFix` aus mittels `git checkout bugFix`","* Mach einen Commit","* Geh mit `git checkout` zum `master` zurück","* Mach noch einen Commit","* Merge den Branch `bugFix` in `master` mit `git merge`","","*Denk dran, du kannst diese Meldung mit dem Befehl `objective` so oft anzeigen, wie du willst!*"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ブランチとマージ","","いい調子ですね。これまでにコミットとブランチについて学びました。そろそろ2つのブランチを1つにまとめるやり方について見ていきましょう。これができれば新しいフィーチャの開発のために新しいブランチを切って、開発が終わったら変更を元のブランチへ統合することができるようになります。","","はじめに紹介するのは、`git merge`を使ったマージのやり方です。mergeコマンドによって、2つの独立した親を持つ特別なコミットを作ることができます。2つの親を持つコミットが持つ意味とは、「全く別々の場所にいるこの親とその親（*かつ*、それらの親の祖先全て）が持つ全ての変更を含んでいますよ」ということです。","","見てみた方が早いので、次の画面で確認してみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["それぞれ別のコミットを指している2つのブランチがあります。変更が別々のブランチに分散していて統合されていないケースです。これをマージで1つにまとめてみましょう。","","`bugFix`ブランチを`master`ブランチにマージしてみます。"],afterMarkdowns:["わあ。見ましたか？まず初めに、`master`ブランチが2つのコミットを親に持つ新しいコミットを指してますね。`master`から親をたどっていくと、最も古いコミットにたどり着くまでに全てのコミットを含んでいる様が確認できます。これで、全ての変更を含む`master`が完成しました。","","色がどう変わったかにも注目して下さい。学習を助けるために、ブランチ毎に色をつけています。それぞれのブランチは自分の色を持っていて、どのブランチから派生して出てくるか次第でコミットごとの色が決まります。","","今回のコミットには`master`ブランチの色が使われました。しかし`bugFix`ブランチの色がまだ変わってないようなので、これを変えてみましょう。"],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`master`ブランチを`bugFix`ブランチにマージしてみます。"],afterMarkdowns:["`bugFix`ブランチは`master`ブランチの派生元だったので、gitは実際大したことはしていません：`bugFix`ブランチを指していたポインタを`master`が指していたコミットへと移動させただけです。","","これで全てのコミットが同じ色になりました。つまり、リポジトリの中の全ての変更をそれぞれのブランチが持ったことになります。やったね！"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["以下の作業で理解度の確認をしてみましょう。 steps:","","* `bugFix`という名前で新しいブランチを切る","* `git checkout bugFix`コマンドで`bugFix`ブランチをチェックアウトする","* 一回だけコミット","* `git checkout`で`master`へ戻る","* もう1回コミットする","* `git merge`コマンドを使って、`bugFix`ブランチを`master`ブランチへとマージする","",'*注："objective"コマンドでこのヘルプにいつでも戻ってこれます*']}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Mergeando ramas","","¡Genial! Ya sabemos cómo commitear y cómo crear ramas. Ahora tenemos que aprender algún modo de unificar el trabajo de dos ramas diferentes.  Esto nos va a permitir abrir una nueva rama de desarrollo, implementar alguna nueva funcionalidad, y después unirla de nuevo con el trabajo principal.","",'El primer método para combinarlas que vamos a explorar es `git merge`. Mergear en Git crea un commit especial que tiene dos padres diferentes. Un commit con dos padres escencialmente significa "Quiero incluir todo el trabajo de este padre de acá y este otro padre de acá, *y* del conjunto de todos sus ancestros"',"","Es más simple visualizarlo, veámoslo a continuación"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Acá tenemos dos ramas, y cada una tiene un commit que le es único. Esto significa que ninguna de las ramas incluye "todo el trabajo" que hay en nuestro repositorio. Hagamos un merge para solucionar eso.',"","Vamos a `merge`ar la rama `bugFix` a `master`"],afterMarkdowns:["¡Wooow! ¿Viste eso? Primero que nada, `master` ahora apunta a un commit que tiene dos padres. Si seguís las flechas por el árbol de commits empezando desde `master` vas a cruzarte con cada commit del repositorio hasta llegar a la raíz. Esto significa que `master` ahora contiene todo el trabajo que hay en el repositorio.","","Además, ¿viste cómo cambiaron los colores de los commits? Para ayudar al aprendizaje, incluí algunas convenciones de colores. Cada rama tiene un color propio. Cada commmit se vuelve del color resultante de mezclar los colores de todas las ramas que lo contienen.","","Así que acá vemos que el color de la rama `master` participa en la mezcla de todos los commits, pero que el de `bugFix` no. Arreglemos eso..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Mergeemos `master` a `bugFix`:"],afterMarkdowns:["Como `bugFix` era un ancestro de `master`, git no tuvo que hacer ningún trabajo; simplemente movió `bugFix` al mismo commit al que estaba anexado `master`.","","Ahora todos los commits son del mismo color, lo que significa que cada rama contiene todo el trabajo que hay en el repositorio. ¡Wiii!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, seguí estos pasos:","","* Creá una nueva rama, llamada `bugFix`","* Checkouteá la rama `bugFix` usando `git checkout bugFix`","* Hacé un commit","* Volvé a `master` con `git checkout`","* Hacé otro commit","* Mergeá la rama `bugFix` a `master` usando `git merge`","",'*Acordate: siempre podés volver a ver este mensaje tipeando "objective"!*']}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches e Merge","","Ótimo! Agora sabemos como commitar e criar ramos. Agora precisamos aprender uma forma de combinar o trabalho de dois ramos diferentes. Isso nos permitirá ramificar, desenvolver um novo recurso, e então combiná-lo de volta.","",'O primeiro método para combinar trabalho que vamos examinar é o `git merge`. O merge do Git cria um commit especial que possui dois pais únicos. Um commit com dois pais essencialmente significa "Quero incluir todo o trabalho deste pai aqui com o daquele outro pai ali, *e* com o do conjunto de todos os seus ancestrais."',"","É mais fácil com uma visualização, vamos ver logo a seguir"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Aqui nós temos dois ramos; cada um tem um commit que é único. Isso significa que nenhum ramo inclui o conjunto do "trabalho" que foi realizado no repositório. Vamos consertar isso com um merge.',"","Vamos juntar o ramo `bugFix` no `master`"],afterMarkdowns:["Uau! Viu isso? Antes de tudo, o `master` agora aponta para um commit que possui dois pais. Se você seguir as setas subindo a árvore de commits a partir do `master`, você será capaz de encontrar, ao longo do caminho até a raiz, qualquer um dos commits. Isso significa que o `master` contém todo o trabalho realizado no repositório até o momento.","","Além disso, viu como as cores dos commits mudaram? Para ajudá-lo a aprender, eu incluí uma legenda. Cada ramo tem uma cor única. Cada commit tem a cor resultante da mistura das cores de todos os ramos que o contém.","","Aqui vemos que a cor do ramo `master` está misturada em todos os commits, mas a cor do `bugFix` não está. Vamos corrigir isso..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos juntar o `master` no `bugFix`:"],afterMarkdowns:["Como o `bugFix` é um ancestral do `master`, o git não teve trabalho nenhum; ele só precisou mover o `bugFix` para o mesmo commit do `master`.","","Agora todos os commits possuem a mesma cor, o que significa que ambos os ramos contém todo o trabalho realizado no repositório! Eba!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, faça o seguinte:","","* Crie um novo ramo chamado `bugFix`","* Faça checkout no ramo `bugFix` com `git checkout bugFix`","* Faça um commit","* Volte ao `master` com `git checkout`","* Faça um novo commit","* Junte o ramo `bugFix` no `master` com `git merge`","",'*Lembre-se, você pode sempre mostrar esta mensagem novamente com o comando "objective"!*']}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches et Merges","","Super ! Nous savons désormais comment faire des commits et des branches. Maintenant nous devons apprendre comment combiner ensemble les contenus de deux branches différentes. Ceci nous permettra de créer une nouvelle branche, développer une nouvelle fonctionnalité sur cette dernière, puis intégrer cette fonctionnalité en combinant le contenu de cette branche de développement à la branche d'origine(master par exemple).","","La première méthode que nous allons voir pour combiner le contenu de deux branches est `git merge`. Faire un 'merge' avec Git crée un commit spécial qui a deux parents. Un commit avec deux parents indique en susbtance \"Je veux inclure le contenu de ce parent et le contenu de cet autre parent, *et* l'ensemble de leurs parents.\"","","C'est plus facile en visualisant, regardons dans la vue suivante"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici nous avons deux branches ; chacune a un commit qui lui est propre. Cela signifie qu'aucune des deux branches n'inclut la totalité du \"travail\" qui a été fait dans le dépôt. Arrangeons-cela avec merge.","","Nous allons `merge` («fusionner») la branche `bugFix` dans `master`"],afterMarkdowns:["Youhou ! Vous avez vu ça ? Avant tout, `master` pointe donc maintenant sur un commit qui a deux parents. Si vous remontez l'enchaînement des flèches depuis `master`, vous allez passez par tous les commits jusqu'à la racine. Cela signifie que `master` contient maintenant tout le travail du dépôt.","","Par ailleurs, avez-vous remarqué les nouvelles couleurs des commits ? Pour faciliter l'apprentissage, j'ai inclus une certaine logique dans la coloration. Chaque branche a une unique couleur. Chaque commit est de la couleur de toutes les branches qui le contiennent.","","Ici nous voyons que la couleur de `master` est intégrée à tous les commits, sauf ceux de `bugFix`. Réparons-cela ..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Faisons un merge  de `master` dans `bugFix`:"],afterMarkdowns:["Puisque `bugFix` était un descendant de `master`, git n'avait aucun travail à effectuer ; il a simplement déplacé `bugFix` au même commit auquel `master` est attaché.","","Maintenant tous les commits sont de la même couleur, ce qui indique que chaque branche contient tout le contenu du dépôt ! Woohoo!"],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, effectuez les opérations suivantes :","","* Faites une nouvelle branche appelée `bugFix`","* Positionnez-vous sur la branche `bugFix` avec `git checkout bugFix`","* Faites un commit","* Retournez sur la branche `master` (commande `git checkout`)","* Faites un nouveau commit","* Fusionnez la branche `bugFix` dans `master` avec `git merge`","",'*Rappelez-vous que vous pouvez à tout moment réafficher ces indications avec "objective"!*']}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches and Merging","","Great! 我们已经知道怎么提交和使用分支了。接下来要学的一招是如何合并两个不同分支的工作。这让我们可以新建一个分支，在其上开发新功能，然后合并回主线。","","`git merge`是我们要学习的合并工作的第一个方法。合并产生一个特殊的提交记录，它包含两个唯一父提交。有两个父提交的提交记录本质上是：“我想把这两个父提交本身及它们的父提交集合都包含进来。”","","有图有真相，看看下面的图示就明白了。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["当前有两个分支：各有一个唯一的提交。这意味着没有一个分支包含我们对代码库的所有修改。让我们合并这两个分支来解决这个问题。","","我们要把 `bugFix` 合并到 `master` "],command:"git merge bugFix",afterMarkdowns:["哇！看见木有？首先，`master` 现在指向一个拥有两个父提交的提交记录。假如从 `master` 开始沿着箭头向上游走，在到达起点的路上会经过所有的提交记录。这说明有 `master` 包含了对代码库的所有修改。","","还有，看见各个提交记录的颜色变化了吗？为了帮助学习，我使用了颜色混合。每个分支都有特定的颜色。每个提交记录都变成了含有此提交的所有分支的混合色。","","所以，`master` 分支的颜色被混入到所有的提交记录，但 `bugFix` 没有。接下来就改一下这里吧。"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["让我们把 `master` 分支合并到 `bugFix` 吧。"],command:"git checkout bugFix; git merge master",afterMarkdowns:["因为 `bugFix` 分支在 `master` 分支的下游，git什么都不用做，只是简单地把`bugfix`分支移动到`master`指向的提交记录。","","现在所有的提交记录的颜色都是一样的啦，这表明每一个分支都包含了代码库的所有修改！走起！"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["想完成此关，执行以下操作：","","* 创建新分支 `bugFix` ","* 用 `git checkout bugFix` 切换到 `bugFix`分支","* 提交一次","* 用 `git checkout` 切换回 `master` ","* 再提交一次","* 用 `git merge` 合并 `bugFix`分支进 `master`","",'*记住，总是可以用 "objective" 命令来重新显示这个对话框！*']}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## branch 以及 merge","","太好了! 我們已經知道怎麼使用 commit 和 branch 了。接下來要學的一招是如何合併（merge）兩個不同 branch 的工作。這讓我們可以建立一個新的 branch ，並且在上面開發新功能，然後合併回 master branch。","","`git merge` 是我們要學習 merge 的第一個方法。該 merge 會產生一個特殊的 commit，它包含兩個唯一 parent commit。一個 commit 如果有兩個 parent commit 的話，那就表示：「我想把這兩個 parent commit 本身及它們的 所有的 parent commit 都包含進來。」","","有圖有真相，看看下面的圖就明白了。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在這裡，我們有兩個 branch：各自都有一個唯一的 commit。這意味著沒有一個 branch 包含我們對文件的所有修改。讓我們 merge 這兩個 branch 來解決這個問題。","","我們要 merge `bugFix` 到 `master` "],command:"git merge bugFix",afterMarkdowns:["哇！看見了沒有？首先，`master` 現在指向一個 commit，這個 commit 有兩個 parent commit。假如從 `master` 開始沿著箭頭向上走，在到達起點的路上會經過所有的 commit。這說明了現在 `master` 紀錄了對文件的所有修改。","","還有，看見各個 commit 的顏色變化了嗎？為了幫助學習，我混合了顏色。每個 branch 都有特定的顏色。每個 commit 的顏色都變成了含有此 commit 的所有 branch 的混合色。","","所以，`master` branch 的顏色被混入到所有的 commit，但 `bugFix` 沒有。接下來就改一下這裡吧。"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們 merge  `master` branch 到 `bugFix` 吧。"],command:"git checkout bugFix; git merge master",afterMarkdowns:["因為 `bugFix` branch只是 `master` branch 的 parent，git 什麼都不用做，只是簡單地把 `bugfix` branch 移動到 `master` 指向的 commit。","","現在所有的 commit 的顏色都是一樣的啦，這表示每一個 branch 都包含了所有文件的修改！太厲害了啦！"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["想完成這一關，執行以下的操作：","","* 建立新的 branch，叫做 `bugFix` ","* 用 `git checkout bugFix` 切換到 `bugFix` branch","* commit 一次","* 用 `git checkout` 切換回 `master` branch","* 再 commit 一次","* 用 `git merge`  將 `bugFix` merge 到 `master`","",'*記住，你可以用 "objective" 指令來重新顯示這個對話框！*']}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 브랜치와 합치기(Merge)","","좋습니다! 지금까지 커밋하고 브랜치를 만드는 방법을 알아봤습니다. 이제 두 별도의 브랜치를 합치는 몇가지 방법을 알아볼 차례입니다. 이제부터 배우는 방법으로 브랜치를 따고, 새 기능을 개발 한 다음 합칠 수 있게 될 것입니다.","",'처음으로 살펴볼 방법은 `git merge`입니다. Git의 합치기(merge)는 두 개의 부모(parent)를 가리키는 특별한 커밋을 만들어 냅니다. 두개의 부모가 있는 커밋이라는 것은 "한 부모의 모든 작업내역과 나머지 부모의 모든 작업, *그리고* 그 두 부모의 모든 부모들의 작업내역을 포함한다"라는 의미가 있습니다. ',"","그림으로 보는게 이해하기 쉬워요. 다음 화면을 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기에 브랜치가 두 개 있습니다. 각 브랜치에 독립된 커밋이 하나씩 있구요. 그 말은 이 저장소에 지금까지 작업한 내역이 나뉘어 담겨 있다는 얘기입니다. 두 브랜치를 합쳐서(merge) 이 문제를 해결해 볼까요?","","`bugFix` 브랜치를 `master` 브랜치에 합쳐(merge) 보겠습니다."],afterMarkdowns:["보셨어요? 우선, `master`가 두 부모가 있는 커밋을 가리키고 있습니다. ","","또, 커밋들의 색이 바뀐 것을 눈치 채셨나요? 이해를 돕기위해 색상으로 구분해 표현했습니다. 각 브랜치는 그 브랜치만의 색상으로 그렸습니다. 브랜치가 합쳐지는 커밋의 경우에는, 그 브랜치들의 색을 조합한 색상으로 표시 했습니다.","","그런식으로 여기에 `bugFix`브랜치 쪽을 제외한 나머지 커밋만 `master` 브랜치의 색으로 칠해져 있습니다. 이걸 고쳐보죠..."],command:"git merge bugFix",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["이제 `master` 브랜치에 `bugFix`를 합쳐(merge) 봅시다:"],afterMarkdowns:["`bugFix`가 `master`의 부모쪽에 있었기 때문에, git이 별다른 일을 할 필요가 없었습니다; 간단히 `bugFix`를 `master`가 붙어 있는 커밋으로 이동시켰을 뿐입니다.","","짜잔! 이제 모든 커밋의 색이 같아졌고, 이는 두 브랜치가 모두 저장소의 모든 작업 내역을 포함하고 있다는 뜻입니다."],command:"git checkout bugFix; git merge master",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit; git merge bugFix"}},{type:"ModalAlert",options:{markdowns:["아래 작업을 해서 이 레벨을 통과하세요:","","* `bugFix`라는 새 브랜치를 만듭니다","* `git checkout bugFix`를 입력해 `bugFix` 브랜치로 이동(checkout)합니다.","* 커밋 한 번 하세요","* `git checkout` 명령어를 이용해 `master`브랜치로 돌아갑니다","* 커밋 또 하세요","* `git merge` 명령어로 `bugFix`브랜치를 `master`에 합쳐 넣습니다.","",'*아 그리고, "objective" 명령어로 이 안내창을 다시 볼 수 있다는 것을 기억해 두세요!*']}}]}}}},{}],81:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22bugFix%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C2%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22bugFix%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout -b bugFix;git commit;git checkout master;git commit;git checkout bugFix;git rebase master",name:{en_US:"Rebase Introduction",de_DE:"Einführung in Rebase",ja:"Rebaseの解説",es_AR:"Introducción a rebase",pt_BR:"Introdução ao rebase",fr_FR:"Introduction à rebase",ko:"리베이스(rebase)의 기본",zh_CN:"介绍 rebase",zh_TW:"介紹 rebase"},hint:{en_US:"Make sure you commit from bugFix first",de_DE:"Geh vor dem committen sicher, dass du auf bugFix arbeitest",ja:"初めにbugFixを指した状態でコミットする",fr_FR:"Assurez-vous de bien faire votre commit sur bugFix en premier",es_AR:"Asegurate de commitear desde bugFix primero",pt_BR:"O bugFix precisa ser commitado primeiro",ko:"bugFix 브랜치에서 먼저 커밋하세요",zh_CN:"确保你先在 bugFix 分支进行提交",zh_TW:"你要先在 bugFix branch 進行 commit"},disabledMap:{"git revert":!0},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'The second way of combining work between branches is *rebasing.* Rebasing essentially takes a set of commits, "copies" them, and plops them down somewhere else.',"","While this sounds confusing, the advantage of rebasing is that it can be used to make a nice linear sequence of commits. The commit log / history of the repository will be a lot cleaner if only rebasing is allowed.","","Let's see it in action..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have two branches yet again; note that the bugFix branch is currently selected (note the asterisk)","","We would like to move our work from bugFix directly onto the work from master. That way it would look like these two features were developed sequentially, when in reality they were developed in parallel.","","Let's do that with the `git rebase` command"],afterMarkdowns:["Awesome! Now the work from our bugFix branch is right on top of master and we have a nice linear sequence of commits.","",'Note that the commit C3 still exists somewhere (it has a faded appearance in the tree), and C3\' is the "copy" that we rebased onto master.',"","The only problem is that master hasn't been updated either, let's do that now..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now we are checked out on the `master` branch. Let's go ahead and rebase onto `bugFix`..."],afterMarkdowns:["There! Since `master` was an ancestor of `bugFix`, git simply moved the `master` branch reference forward in history."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["To complete this level, do the following","","* Checkout a new branch named `bugFix`","* Commit once","* Go back to master and commit again","* Check out bugFix again and rebase onto master","","Good luck!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'Der zweite Weg um Inhalte aus verschiedenen Branches zu kombinieren ist `git rebase`. Rebasen nimmt im Prinzip eine Menge von Commits, "kopiert" sie und packt sie auf etwas anderes drauf.',"","Auch wenn das erst mal komisch klingt liegt der Vorteil von Rebase darin, dass man es benutzen kann um hübsch lineare Abfolgen von Commits zu erhalten. Das Commit-Protokoll des Repositorys wird durch Rebase eine ganze Ecke einfacher aussehen, weil Merge Commits vermieden werden.","","Schauen wir's uns mal in Aktion an ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir wieder zwei Branches; wie du siehst ist `bugFix` aktuell ausgewählt (sieht man am `*`).","","Wir würden jetzt gerne unsere Arbeit aus `bugFix` direkt auf den `master` packen. Das Ergebnis wäre, dass alle aktuellen Änderungen in `master` auch im Branch `bugFix` sind.","","Das machen wir mit dem Befehl `git rebase`:"],afterMarkdowns:["Hammer! Was wir in `bugFix` gemacht haben ist jetzt oben auf `master` draufgepackt und wir haben eine schön lineare Abfolge von Commits bekommen.","",'Commit `C3` existiert immer noch irgendwo (deswegen ist er blaß dargestellt) und `C3\'` ist die "Kopie" die wir auf den `master` gepackt haben.',"","Aber `master` ist jetzt nicht aktualisiert worden, lass uns das gerade noch nachholen ..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Jetzt sind wir im `master`. Lass uns den mal auf `bugFix` rebasen ..."],afterMarkdowns:["So! Da `master` ein Vorgänger von `bugFix` war konnte Git hier einfach den Bezeichner `master` auf denselben Commit schieben, auf den auch `bugFix` zeigt."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level abzuschließen musst du folgendes tun:","","* Einen neuen Branch namens `bugFix` auschecken","* Einen Commit machen","* Zurück zum `master` wechseln und noch einmal committen","* `bugFix` auschecken und auf den `master` rebasen","","Viel Erfolg!"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","","ブランチを一つにまとめる方法として前回はマージを紹介しましたが、今回紹介するリベースを使うこともできます。リベースの動作は、マージするコミットのコピーをとって、どこかにストンと落とすというイメージです。","","ピンと来ないかもしれませんが、リベースのメリットは一本の連続したシーケンシャルなコミットに整形できることです。リベースだけ使っていると、コミットのログや履歴が非常にクリーンな状態に保たれます。","","早速実際にどう動くのかを見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["前回と同様の2つのブランチを考えます：仮にいまbugFixブランチをチェックアウトしているとします。（アスタリスクつきのもの）","","bugFixに入ってる作業内容をそのまま直接masterブランチ上の内容に移動したいとします。こうすることで、実際には並行して開発された2つの別々のブランチ上のフィーチャを、あたかも1本のブランチ上でシーケンシャルに開発されていたかのように見せることができます。","","`git rebase`コマンドでそれをやってみましょう。"],afterMarkdowns:["できた！これでbugFixブランチの作業内容はmasterブランチのすぐ先に移動したので、見た目が一本になってスッキリしました。","","気を付けてほしいのは、C3コミットはどこかに残ってるということ（ツリーの中で半透明にしてあります）、そしてC3'は（C3との接続が切れているC3の）コピーがmasterブランチ上に作られているということです。","","一つ問題が残ってて、masterブランチがまだ最新化されていませんね。ちょっと直してみましょう。。"],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["masterブランチはチェックアウトしてあります。この状態からmasterブランチを`bugFix`へとリベースしてみましょう。"],afterMarkdowns:["できた！`master`は`bugFix`の直前のコミットだったので、gitは単純に`master`ブランチのポインタを前に進めただけでした。"],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["以下の作業で理解度の確認をしてみましょう。","","* `bugFix`という名前の新しいブランチをチェックアウトする","* 一回だけコミット","* masterブランチに戻ってもう1回コミット","* bugFixをもう1回チェックアウトして、master上にリベース","","幸運を祈る！"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'El segundo modo de combinar el trabajo de distintas ramas es el *rebase*. Rebasear escencialmente agarra un conjunto de commits, los "copia", y los aplica sobre algún otro lado.',"","Aunque esto pueda sonar confuso, la ventaja de rebasear es que puede usarse para conseguir una secuencia de commits lineal, más bonita. El historial / log de commits del repositorio va a estar mucho más claro si sólo usás rebase.","","Veámoslo en acción..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acá tenemos dos ramas otra vez. Notar que la rama bugFix está actualmente seleccionada (tiene un asterisco)","","Nos gustaría mover nuestro trabajo de bugFix directamente sobre el trabajo de master. De ese modo, parecería que esas dos tareas se desarrollaron secuencialmente, cuando en realidad se hicieron en paralelo.","","Hagámoslo usando el comando `git rebase`"],afterMarkdowns:["¡Genial! Ahora el trabajo de nuestra rama bugFix está justo encima del de master, y tenemos una secuencia lineal de commits.","",'Notá que el commit C3 sigue existiendo en algún lado (aparece medio desvanecido en el árbol), y C3\' es la "copia" que rebaseamos sobre master.',"","El único problema es que master todavía no se actualizó, resolvámoslo ahora..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ahora estamos parados sobre la rama `master`. Avancemos y rebaseémosla sobre `bugFix`..."],afterMarkdowns:["¡Ahí está! Como `master` era un ancestro de `bugFix`, git simplemente movió la referencia de `master` hacia adelante en la historia."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, hacé lo siguiente:","","* Checkouteá una nueva rama llamada `bugFix`","* Commiteá una vez","* Volvé a master y commiteå de nuevo","* Checkoutá bugFix otra vez y rebaseala sobre master","","¡Éxitos!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Rebase no Git","",'A segunda forma de combinar trabalho entre ramos é o *rebase*. O rebase essencialmente pega um conjunto de commits, "copia" os mesmos, e os despeja em outro lugar.',"","Isso pode parecer confuso, mas a vantagem do rebase é que ele pode ser usado para construir uma sequência mais bonita e linear de commits. O registro de commits (história do repositório) ficará muito mais limpa se for utilizado apenas rebase em vez de merge.","","Vejamo-lo em ação..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aqui temos dois ramos novamente; note que o ramo bugFix está atualmente ativo (veja o asterisco)","","Queremos mover nosso trabalho do bugFix diretamente dentro do master. Desta forma, vai parecer que esses dois recursos foram desenvolvidos sequencialmente, quando na realidade foram feitos em paralelo.","","Vamos fazê-lo com o comando `git rebase`"],afterMarkdowns:["Incrível! Agora o trabalho do nosso ramo bugFix está logo após o do master, e temos uma linda sequência linear de commits.","",'Perceba que o commit C3 ainda existe em algum lugar (ele está clareado na árvore), e que o C3\' é a "cópia" que rebaseamos no master.',"","O único problema é que o master não foi atualizado também, vamos fazê-lo agora..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora o ramo `master` está ativo. Vamos em frente, fazer rebase no `bugFix`..."],afterMarkdowns:["Aí está! Como o `master` era um ancestral do `bugFix`, o git simplesmente moveu a referência do ramo `master` para frente na história."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, faça o seguinte","","* Faça checkout de um novo branch chamado `bugFix`","* Faça um commit","* Volte ao master e faça um novo commit","* Faça checkout do bugFix novamente e faça rebase no master","","Boa sorte!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'La seconde façon de combiner les contenus de deux branches est *rebase*. Rebase prend un ensemble de commits, les "recopie", et les ajoute en bout de chaîne à un autre endroit.',"","Bien que cela puisse sembler compliqué, l'avantage de rebase est de permettre d'obtenir une simple séquence linéaire de commits. Les logs/l'historique du dépôt seront bien plus propres si seul rebase est autorisé (plutôt que merge).","","Voyons rebase en action…"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici nous avons encore une fois deux branches; notez que nous sommes sur la branche bugFix (cf. l'asterisque)","","Nous voudrions transférer notre travail de la branche 'bugFix' directement sur le travail existant dans 'master'. Ainsi on aurait l'impression que ces deux travaux ont été développés séquentiellement alors qu'en réalité ils ont été réalisés en parallèle.","","Faisons cela avec la commande `git rebase`"],afterMarkdowns:["Super! Désormais, le travail de la branche 'bugFix' est juste en haut de la branche 'master' et nous avons une belle séquence linéaire de commits.","","Notez que le commit C3 existe toujours quelque part (il est en grisé sur l'arbre), et C3' est la  \"copie\" que nous avons créée sur master avec rebase.","","Le seul problème est que master n'a pas été mis à jour, faisons cela maintenant…"],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous sommes désormais positionnés sur la branche `master`. Continuons en faisant le rebase sur `bugFix`…","Et voilà ! Puisque `master` était un ascendant de `bugFix`, git a simplement déplacé la référence de la branche `master` en avant dans le temps."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, faites les opérations suivantes","","* Positionnez-vous (checkout) sur une nouvelle branche nommée `bugFix`","* Faites un commit","* Retournez sur master et faites un nouveau commit","* Positionnez-vous à nouveau sur bugFix et faites un rebase sur master","","Bonne chance !"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Rebase","",'*rebasing*是在分支之间合并工作的第二种方法。Rebasing就是取出一系列的提交记录，"复制"它们，然后把在别的某个地方放下来。',"","虽然听上去难以理解，rebasing 的优势是可以创造更线性的提交历史。假如只允许使用rebasing，代码库的提交日志/历史会更好看。","","让我们亲身体会下……"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里，还是有两个分支；注意当前分支是 bugFix（看那颗星）","","我们想要把 bugFix 里面的工作直接移到 master 分支上。使用这个方法，两个分支的功能看起来像是按顺序开发，实际上它们是平行开发的。","","用 `git rebase`实现此目标"],command:"git rebase master",afterMarkdowns:["碉堡吧，现在 bugFix 分支上的工作在 master 的最前端，同时我们也得到了一个更线性的提交序列。","","注意，提交记录 C3 仍然存在（阴影的那货就是你了，还看什么看），而我们已经将 C3 复制到了master。","","现在唯一的问题是 master 分支还没有更新……下面就来更新它吧"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在，切换到 `master` 分支。接下来就把它 rebase 到 `bugFix` 吧……"],command:"git rebase bugFix",afterMarkdowns:["完成！因为 `master` 是 `bugFix` 的下游，所以 git 只把 `master` 分支的记录前移到 `bugFix` 上。"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["想完成此关，执行以下操作：","","* 新建`bugFix`分支","* 提交一次","* 切换回 master 分支再提交一次","* 再次切换到 bugFix 分支，rebase 到 master 上","","祝你好运啦！"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git rebase","",'*rebasing* 是 merge branch 的第二種方法。rebasing 就是取出一連串的 commit，"複製"它們，然後把它們接在別的地方。',"","雖然聽起來難以理解，rebasing 的優點是可以建立更線性的 commit history。假如只允許使用 rebasing 的話，則我們的 repo 中的 commit log 或者是 commit history 會更加簡潔好看。","","讓我們親身體會一下..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["這裡，還是有兩個 branch；注意目前我們所在的 branch 是 bugFix（看那顆星啦）","","我們想要把在 bugfix 所做的修改直接移到 master branch上。使用 rebasing 的話，兩個 branch 看起來像是依序按順序進行修改，實際上它們的修改是平行進行的。","","用 `git rebase` 來實現吧"],command:"git rebase master",afterMarkdowns:["很厲害吧！現在 bugFix branch 上的工作在 master branch 的最前端，同時我們也得到了一個更加線性的 commit 順序。","",'注意，本來的 commit C3 沒有消失（在圖上面呈現陰影），而我們"複製" C3，將它的副本 C3\' 接在 master branch 的後面。',"","現在唯一的問題是 master branch 還沒有更新...我們接下來就更新它吧！"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["現在，切換到 `master` branch。接下來就把它 rebase 到 `bugFix` 上面吧..."],command:"git rebase bugFix",afterMarkdowns:["完成！因為 `master` branch 是 `bugFix` 的 parent，所以 git 只是把 `master` branch 往前移動到 `bugFix` 上。"],beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["想完成這一關，執行以下操作：","","* 建立 `bugFix` branch","* commit 一次","* 切換回 master branch 再 commit 一次","* 再次切換到 bugFix branch，接著 rebase bugFix 這個 branch 到 master branch 上","","祝你好運啦！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 리베이스(Rebase)","","브랜치끼리의 작업을 접목하는 두번째 방법은 *리베이스(rebase)*입니다. 리베이스는 기본적으로 커밋들을 모아서 복사한 뒤, 다른 곳에 떨궈 놓는 것입니다.","","조금 어려게 느껴질 수 있지만, 리베이스를 하면 커밋들의 흐름을 보기 좋게 한 줄로 만들 수 있다는 장점이 있습니다. 리베이스를 쓰면 저장소의 커밋 로그와 이력이 한결 깨끗해집니다.","","어떻게 동작하는지 살펴볼까요..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["여기 또 브랜치 두 개가 있습니다; bugFix브랜치가 현재 선택됐다는 점 눈여겨 보세요 (별표 표시)","","bugFix 브랜치에서의 작업을 master 브랜치 위로 직접 옮겨 놓으려고 합니다. 그렇게 하면, 실제로는 두 기능을 따로따로 개발했지만, 마치 순서대로 개발한 것처럼 보이게 됩니다.","","`git rebase` 명령어로 함께 해보죠."],afterMarkdowns:["오! 이제 bugFix 브랜치의 작업 내용이 master의 바로 위에 깔끔한 한 줄의 커밋으로 보이게 됐습니다.","","C3 커밋은 어딘가에 아직 남아있고(그림에서 흐려짐), C3'는 master 위에 올려 놓은 복사본입니다.","","master가 아직 그대로라는 문제가 남아있는데요, 바로 해결해보죠..."],command:"git rebase master",beforeCommand:"git commit; git checkout -b bugFix C1; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["우리는 지금 `master` 브랜치를 선택한 상태입니다. `bugFix` 브랜치쪽으로 리베이스 해보겠습니다..."],afterMarkdowns:["보세요! `master`가 `bugFix`의 부모쪽에 있었기 때문에, 단순히 그 브랜치를 더 앞쪽의 커밋을 가리키게 이동하는 것이 전부입니다."],command:"git rebase bugFix",beforeCommand:"git commit; git checkout -b bugFix C1; git commit; git rebase master; git checkout master"}},{type:"ModalAlert",options:{markdowns:["이하 작업을 하면 이번 레벨을 통과합니다","","* `bugFix`라는 새 브랜치를 만들어 선택하세요","* 커밋 한 번 합니다","* master로 돌아가서 또 커밋합니다","* bugFix를 다시 선택하고 master에 리베이스 하세요","","화이팅!"]}}]}}}
},{}],82:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"side":{"target":"C4","id":"side","remoteTrackingBranchID":null},"bugFix":{"target":"C7","id":"bugFix","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"tags":{"v0":{"target":"C0","id":"v0","type":"tag"},"v1":{"target":"C3","id":"v1","type":"tag"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',solutionCommand:"git commit ",startTree:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"side":{"target":"C4","id":"side","remoteTrackingBranchID":null},"bugFix":{"target":"C6","id":"bugFix","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"tags":{"v0":{"target":"C0","id":"v0","type":"tag"},"v1":{"target":"C3","id":"v1","type":"tag"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',name:{en_US:"Git Describe",fr_FR:"Git describe",de_DE:"Git Describe",ja:"Git Describe",es_AR:"Git Describe",pt_BR:"Git Describe",zh_TW:"git describe",zh_CN:"git describe"},hint:{en_US:"Just commit once on bugFix when you're ready to move on",fr_FR:"Faites un commit sur bugFix quand vous êtes pret",de_DE:"Committe nur einmal auf bugFix, wenn du soweit bist",ja:"次に進む用意が整えれば、bugFixに対して一回commitしてください",es_AR:"Simplemente commiteá una vez en bugFix cuando estés listo para seguir",pt_BR:"Simplesmente commite uma vez em bugFix quando quiser parar de experimentar",zh_TW:"當你要移動的時候，只要在 bugFix 上面 commit 就好了",zh_CN:"当你要移动的时候，只要在 bugFix 上面 commit 就好了"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Because tags serve as such great "anchors" in the codebase, git has a command to *describe* where you are relative to the closest "anchor" (aka tag). And that command is called `git describe`!',"","Git describe can help you get your bearings after you've moved many commits backwards or forwards in history; this can happen after you've completed a git bisect (a debugging search) or when sitting down at a coworkers computer who just got back from vacation."]}},{type:"ModalAlert",options:{markdowns:["Git describe takes the form of:","","`git describe <ref>`","","Where `<ref>` is anything git can resolve into a commit. If you don't specify a ref, git just uses where you're checked out right now (`HEAD`).","","The output of the command looks like:","","`<tag>_<numCommits>_g<hash>`","","Where `tag` is the closest ancestor tag in history, `numCommits` is how many commits away that tag is, and `<hash>` is the hash of the commit being described."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's look at a quick example. For this tree below:"],afterMarkdowns:["The command `git describe master` would output:","","`v1_2_gC2`","","Whereas `git describe side` would output:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["That's pretty much all there is to git describe! Try describing a few of the locations in this level to get a feel for the command.","","Once you're ready, just go ahead and commit once to finish the level. We're giving you a freebie :P"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git describe","","Parce ce que les tags sont de très bonne références dans le code, git à une commande pour *décrire* (describe) la différence entre le commit et le tag le plus récent. Cette commande s'appelle `git describe`!","","Git describe peut vous aider lorsque vous vous êtes beaucoup déplacé ; cela peut arriver après un git bisect (chercher l'apparition d'un bug) ou lorsque vous revenez de vacance après 3 semaines sur l'ordinateur d'un collègue."]}},{type:"ModalAlert",options:{markdowns:["Git describe s'écrit comme suit :","","`git describe <ref>`","","où `<ref>` est un n'importe quelle chose que git peut résoudre en un commit. Si vous ne specifiez pas de ref, `HEAD` est pris par défault.","","Le résultat de la commande ressemble à :","","`<tag>_<numCommits>_g<hash>`","","où `tag` est le tag le plus proche dans l'historique, `numCommits` le nombre de commit avec le tag, et `<hash>` le hash/identifiant du commit décrit."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Regardons un petit exemple. Prennons cet arbre :"],afterMarkdowns:["La commande`git describe master` donne le résultat :","","`v1_2_gC2`","","alors que `git describe side` donne :","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["Ceci résume bien git describe ! Amusez-vous à utiliser cette commande avec d'autres endroits dans ce niveau pour bien comprendre describe.","","Lorsque vous serez prêt, faites simplement un commit pour finir le niveau. Un petit niveau bonus :P"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["### git describe","","因為 tag 在 commit tree 上表示的是一個錨點，git 有一個指令可以用來*顯示*離你最近的錨點（也就是 tag），而且這個指令叫做 `git describe`！","","當你已經完成了一個 `git bisect`（一個找尋有 bug 的 commit 的指令），或者是當你使用的是你跑去度假的同事的電腦時， `git describe` 可以幫助你了解你離最近的 tag 差了多少個 commit。"]}},{type:"ModalAlert",options:{markdowns:["`git describe` 的使用方式：","","`git describe <ref>`","","`<ref>` 是任何一個可以被 git 解讀成 commit 的位置，如果你沒有指定的話，git 會以你目前所在的位置為準（`HEAD`）。","","指令的輸出就像這樣：","","`<tag>_<numCommits>_g<hash>`","","`<tag>` 表示的是離 `<ref>` 最近的 tag， `numCommits` 是表示這個 tag 離 `<ref>` 有多少個 commit， `<hash>` 表示的是你所給定的 `<ref>` 所表示的 commit 的前七個 id。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們來看一個例子，對於下面的 tree："],afterMarkdowns:["`git describe master` 會輸出：","","`v1_2_gC2`","","`git describe side` 會輸出：","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["`git describe` 就是這樣了！試著在這個關卡指定幾個位置來感受一下這個指令吧！","","當你完成的時候，只要一個 commit 就可以結束這個關卡，我們會給你一個免費贈品:P"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### git describe","","因为 tag 在 commit tree 上表示的是一个锚点，git 有一个指令可以用来*显示*离你最近的锚点（也就是 tag），而且这个指令叫做 `git describe`！","","当你已经完成了一个 `git bisect`（一个找寻有 bug 的 commit 的指令），或者是当你使用的是你跑去度假的同事的电脑时， `git describe` 可以帮助你了解你离最近的 tag 差了多少个 commit。"]}},{type:"ModalAlert",options:{markdowns:["`git describe` 的​​使用方式：","","`git describe <ref>`","","`<ref>` 是任何一个可以被 git 解读成 commit 的位置，如果你没有指定的话，git 会以你目前所在的位置为准（`HEAD`）。","","指令的输出就像这样：","","`<tag>_<numCommits>_g<hash>`","","`<tag>` 表示的是离 `<ref>` 最近的 tag， `numCommits` 是表示这个 tag 离 `<ref>` 有多少个 commit， `<hash>` 表示的是你所给定的 `<ref>` 所表示的commit 的前七个id。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["让我们来看一个例子，对于下面的 tree："],afterMarkdowns:["`git describe master` 会输出：","","`v1_2_gC2`","","`git describe side` 会输出：","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["`git describe` 就是这样了！试着在这个关卡指定几个位置来感受一下这个指令吧！","","当你完成的时候，只要一个 commit 就可以结束这个关卡，我们会给你一个免费赠品:P"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Como los tags sirven tanto para marcar "hitos" en el código, git tiene un comando para *describir* (_describe_) dónde estás relativo al "hito" más cercano (digamos, "tag"). Y ese comamndo se llama ¡`git describe`!',"","Git describe puede ayudarte a saber dónde estás después de que te hayas movido varios commits hacia adelante o atrás en la historia. Esto puede pasarte después de que termines un git bisect (una búsqueda que te ayuda a debuggear problemas) o cuando te sentás en la computadora de un compañero de trabajo que recién vuelve de unas vacaciones."]}},{type:"ModalAlert",options:{markdowns:["Git describe tiene la siguiente forma:","","`git describe <ref>`","","Donde `<ref>` es cualquier cosa que git puede resolver a un commit. Si no especificás ninguna referencia, git simplemente usa el commit en que estás parado ahora (`HEAD`).","","La salida de ese comando se ve así:","","`<tag>_<numCommits>_g<hash>`","","Donde `tag` es el tag más cercano en la historia, `numCommits` dice a cuántos commits de ese tag estás, y `<hash>` es el hash del commit que estás describiendo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos un ejemplo breve. Para este árbol de commits:"],afterMarkdowns:["El comando `git describe master` mostraría:","","`v1_2_gC2`","","Mientras que `git describe side` debería mostrar:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["¡Eso es prácticamente todo lo que hay sobre git describe! Probá describiendo algunas referencias en este nivel para amigarte con el comando.","","Cuando estés listo, hacé un commit para terminar el nivel. Te estamos dando una gratis :P"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Devido ao fato de as tags servirem como "âncoras" tão boas no código, o Git tem um comando para *descrever* onde você está com relação à "âncora" (tag) mais próxima. Esse comando é chamado `git describe`!',"","O git describe pode ajudar a recuperar a sua orientação depois de você ter se movido muitos commits para trás ou para frente no histórico; isso pode acontecer depois de você completar um git bisect (uma busca para debug) ou quando se sentar no computador de um colega que acabou de voltar de férias."]}},{type:"ModalAlert",options:{markdowns:["O git describe é chamado da seguinte forma:","","`git describe <ref>`","","Onde `<ref>` é qualquer coisa que o git possa resolver como uma referência a um commit. Se você não especificar o ref, o Git usa simplesmente o commit atual (`HEAD`).","","A saída do comando é mais ou menos assim:","","`<tag>_<numCommits>_g<hash>`","","Onde `tag` é a tag ancestral mais próxima no histórico, `numCommits` é o número de commits de distância da tag, e `<hash>` é o hash do commit sendo descrito."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos um exemplo rápido. Para a árvore abaixo:"],afterMarkdowns:["O comando `git describe master` daria a saída:","","`v1_2_gC2`","","Enquanto `git describe side` daria:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["É basicamente disso que se trata o git describe! Tente descrever alguns locais da árvore para sentir como o comando se comporta.","","Uma vez que você estiver satisfeito, apenas faça um commit que o nível será finalizado. Essa é de graça :P"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Git Describe","",'Weil Tags so super als "Anker" im Repository dienen können bietet Git einen Befehl um zu *beschreiben* wo du dich relativ zum nächsten "Anker" (also Tag) befindest. Und der heißt `git describe`.',"","Er hilft dir dabei, dir einen Überblick zu verschaffen nachdem du viele Commits im Log zurück- oder vorgegangen bist; das kann vorkommen nachdem du ein `git bisect` (eine Fehlersuche) abgeschlossen hast oder wenn du dich an den Rechner eines Kollegen setzt, der gerade aus dem Urlaub gekommen ist."]}},{type:"ModalAlert",options:{markdowns:["Der Befehl ist folgendermaßen aufgebaut:","","`git describe <Ref-Name>`","","Dabei ist `<Ref-Name>` jeder beliebige Name, der einem Commit zugeordnet ist (Branch, Tag etc). Wenn du keinen angibst benutzt Git `HEAD`, also den aktuellen Checkout.","","Die Befehlsausgabe sieht so aus:","","`<Tag-Name>_<Anzahl Commits>_g<Hash>`","","`<Tag-Name>` ist dabei der nächstliegende Tag in den Vorgänger-Commits, `<Anzahl Commits>` zeigt an, wieviele Commits dieses Tag entfernt ist und `<Hash>` ist das SHA des Commits, auf den das Tag zeigt."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns das schnell an einem Beispiel an. Für den folgenden Baum:"],afterMarkdowns:["Der Befehl `git describe master` würde folgendes ausgeben:","","`v1_2_gC2`","","Wohingegen `git describe side` dies ausgeben würde:","","`v2_1_gC4`"],command:"git tag v2 C3",beforeCommand:"git commit; go -b side HEAD~1; gc; gc; git tag v1 C0"}},{type:"ModalAlert",options:{markdowns:["Das ist so ziemlich alles, was es über `git describe` zu wissen gibt. Versuch ein paar Orte in diesem Level damit auszugeben, um ein Gefühl dafür zu bekommen.","","Sobald du fertig bist, mach einfach einen Commit um den Level abzuschließen. Der geht auf's Haus. :P"]}}]}}}},{}],83:[function(a,b,c){c.level={compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(a){return a.C4>a.C1}]},disabledMap:{"git revert":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22master%22%7D%2C%22debug%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22debug%22%7D%2C%22printf%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22printf%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22bugFix%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout master;git cherry-pick C4",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"debug":{"target":"C2","id":"debug"},"printf":{"target":"C3","id":"printf"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"bugFix","id":"HEAD"}}',name:{ko:"딱 한개의 커밋만 가져오기",en_US:"Grabbing Just 1 Commit",fr_FR:"Choisir seulement 1 commit",de_DE:"Einen Commit pflücken",es_AR:"Tomando un único commit",pt_BR:"Pegando um único commit",ja:"一つのコミットのみを取得",zh_CN:"只取一个 commit",zh_TW:"只取一個 commit"},hint:{en_US:"Remember, interactive rebase or cherry-pick is your friend here",de_DE:"Vergiss nicht: hier kommst du mit interaktivem Rebase oder Cherry-Picking weiter",fr_FR:"Souvenez-vous, les rebases interactifs ou cherry-pick sont vos amis ici.",es_AR:"Acordate, el rebase interactivo o cherry-pick son tus amigos acá",pt_BR:"Lembre-se, o rebase interativo ou o cherry-pick são seus amigos aqui",ja:"このレベルではインタラクティブモードのrebaseやcherry-pickがクリアのカギです",ko:"대화식 리베이스(rebase -i)나 or 체리픽(cherry-pick)을 사용하세요",zh_CN:"记住，交互式 rebase 或者 cherry-pick 会很有帮助",zh_TW:"記住，使用互動式的 rebase 或者 cherry-pick 會很有幫助"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Locally stacked commits","","Here's a development situation that often happens: I'm trying to track down a bug but it is quite elusive. In order to aid in my detective work, I put in a few debug commands and a few print statements.","","All of these debugging / print statements are in their own commits. Finally I track down the bug, fix it, and rejoice!","","Only problem is that I now need to get my `bugFix` back into the `master` branch. If I simply fast-forwarded `master`, then `master` would get all my debug statements which is undesirable. There has to be another way..."]}},{type:"ModalAlert",options:{markdowns:["We need to tell git to copy only one of the commits over. This is just like the levels earlier on moving work around -- we can use the same commands:","","* `git rebase -i`","* `git cherry-pick`","","To achieve this goal."]}},{type:"ModalAlert",options:{markdowns:["This is a later level so we will leave it up to you to decide which command you want to use, but in order to complete the level, make sure `master` receives the commit that `bugFix` references."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Les commits empilés localement","","Voici une situation qui arrive souvent : j'ai un bug assez caché à corriger. Pour trouver la source je rajoute des commandes et prints de debug à travers le code.","","Tous ces debug se retrouvent dans une branche particulière. Je trouve le bug et le répare, comme toujours !","","Le seul problème c'est que je ne peux pas faire de merge ou rebase, car tous ces commits de debug seront dans le master. Il doit y avoir une autre façon..."]}},{type:"ModalAlert",options:{markdowns:["Pour réussir ce niveau, nous avons besoin de dire à Git quel commit particulier recopier. C'est comme pour le niveau précédent -- nous pouvons utiliser les mêmes commandes :","","* `git rebase -i`","* `git cherry-pick`"]}},{type:"ModalAlert",options:{markdowns:["C'est un niveau avancé, donc à vous de choisir quelle commande utiliser, mais pour réussir ce niveau, assurez-vous que `master` reçoive le même commit que `bugFix` référence."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits localmente stackeados","","Esta es una escena que suele pasar cuando uno desarrolla: estoy tratando de encontrar un bug bastante escurridizo. Para ayudar en mi tarea de detective, agrego un par de comandos de debug, y algunas sentencias para imprimir el estado de mi sistema.","","Todas estas cosas de imprimir y debuggear estan en su propia rama. Finalmente encuentro el problema, lo soluciono, ¡y disfruto!","","El único problema es que ahora necesito llevar mi `bugFix` a la rama `master`. Si simplemente fast-forwardeo `master`, entonces `master` va a tener todos mis agregados de debugging, que es indeseado. Tiene que haber otro modo..."]}},{type:"ModalAlert",options:{markdowns:["Necesitamos decirle a git que sólo copie uno de los commits. Esto es tal como los niveles anteriores de mover commits por ahí -- podemos usar los mismos comandos:","","* `git rebase -i`","* `git cherry-pick`","","Para conseguir este resultado."]}},{type:"ModalAlert",options:{markdowns:["Este es un nivel más avanzado, así que está en vos decidir cuál de los dos comandos querés usar, pero para completar el nivel asegurate de que `master` recibe el commit que `bugFix` referencia."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commits empilhados localmente","","Aqui está uma situação de acontece frequentemente com desenvolvedores: Estou tentando encontrar um bug, mas ele é escorregadio. Para auxiliar meu trabalho de detetive, eu coloco alguns comandos de debug e prints.","","Todos esses comandos de debug e mensagens estão em seus próprios ramos. Finalmente eu encontro o bug, corrijo, e me regozijo!","","O único problema é que agora eu preciso devolver o meu `bugFix` ao ramo `master`. Se eu simplesmente der um fast-forward no `master`, então o `master` terminará contendo todos os comandos de debug, o que é indesejável. Deve existir alguma outra forma..."]}},{type:"ModalAlert",options:{markdowns:["Precisamos dizer ao git para copiar somente um dos commits. Esta situação é exatamente a mesma dos níveis anteriores a respeito de como mover trabalho -- podemos usar os mesmos comandos:","","* `git rebase -i`","* `git cherry-pick`","","Para alcançar o objetivo."]}},{type:"ModalAlert",options:{markdowns:["Este é um nível avançado, então vamos deixar para você a decisão de qual comando usar, mas para completar este nível, certifique-se de que o `master` receba o commit referenciado por `bugFix`."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Lokale Commit-Haufen","","Folgende Situation habe ich beim Entwickeln des öfteren: ich bin auf der Suche nach einem Bug, aber er ist echt schwer zu finden. Um ihm auf die Spur zu kommen schreibe ich mehrere Debug-Kommandos und print-Befehle in den Code.","","Die committe ich auch immer wieder, je weiter die Suche mich trägt; natürlich in einem lokalen Branch. Schließlich finde ich den Bug, fixe ihn und freue mich!","","Einziges Problem ist, dass ich diesen `bugFix` jetzt zurück in den `master` kriegen muss. Wenn ich einfach den `master` vorspule oder meinen Branch hinein merge, bekäme der `master` auch die ganzen Debug-Befehle, was nicht gewünscht ist. Das muss anders gehen ..."]}},{type:"ModalAlert",options:{markdowns:["Wir müssten Git sagen können, dass es nur einen Commit herüber kopieren soll. Das ist genauso wie die Level vorhin zum Code-Verschieben. Wir können dieselben Befehle benutzen:","","* `git rebase -i`","* `git cherry-pick`",""]}},{type:"ModalAlert",options:{markdowns:["Da dies ein späterer Level ist überlasse ich es dir zu entscheiden, welchen Befehl du benutzen willst. Aber um da Level zu schaffen musst du irgendwie sicherstellen, dass `maste` den Commit bekommt, auf den `bugFix` zeigt."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ローカルに積み上がったコミット","","実際の開発ではこういうケースがよくあります：「バグの原因調査を試みているがバグの再現性がかなり低い。調査の補助のために、いくつかのデバッグ用の命令やprint文を差し込んでいる。」","","これらのデバッグ用のコードはバグ修正用のブランチにコミットされています。そしてついにバグの原因を突き止めて、修正した！やった！","","あとは`bugFix`ブランチを`master`ブランチに統合できればOK。そこで単純に`master`をfast-forwardすればよいかというと、それでは`master`ブランチの中にデバッグ用のコードも混入してしまいます。"]}},{type:"ModalAlert",options:{markdowns:["ここでGitの魔法が力を発揮します。解決のためにはいくつかの方法がありますが、最も素直な解決方法は2つあって：","","* `git rebase -i`","* `git cherry-pick`","","インタラクティブモードの（`-i`オプションつきの）rebaseによって、保持したいコミットと破棄したいコミットを選り分けることができます。コミットの順序を変更することも可能です。この方法は、一部の変更をどこかへやってしまいたい時に便利です。","","もう一方のcherry-pickを使うと、持っていきたいコミットを選んで`HEAD`の先にストンと落とすことができます。"]}},{type:"ModalAlert",options:{markdowns:["後半の章ですのでどう解決するかをもう自分で考えることができると思います。このレベルをクリアするためには、`bugFix`が持っているコミットを`master`ブランチが受け取る必要がある点には注意してください。"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 本地栈式提交 (Locally stacked commits)","","设想一下一个经常发生的场景：我在追踪一个有点棘手的 bug，为了更好地排查，我添加了一些调试命令和打印语句。","","所有的这些调试和打印语句都只在它们自己的分支里。最终我终于找到这个 bug，揪出来 fix 掉，然后撒花庆祝！","","现在唯一的问题就是要把我在 `bugFix` 分支里的工作合并回 `master` 分支。我可以简单地把 `master` 分支快进（fast-forward），但这样的话 `master` 分支就会包含我这些调试语句了。"]}},{type:"ModalAlert",options:{markdowns:["现在就是 Git 大显神通的时候啦。解决这个问题的方法不止一个，但最直接的两个方法是：","","* `git rebase -i`","* `git cherry-pick`","","交互（`-i`）衍合允许你选择哪些提交是要被保留，哪些要被舍弃。它允许你将提交重新排序。假如你要舍弃一些工作，这个会帮上很大的忙。","","Cherry-picking 能让你选择单独一个提交并且把它放到 `HEAD` 的最前端。"]}},{type:"ModalAlert",options:{markdowns:["本关是可选关卡，玩不玩随便你。但是如果你坚持要刷，确保 `master` 分支能拿到 `bugFix` 分支的相关提交（references）。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 在 local 的堆疊的 commit","","有一個經常發生的情況：我在追蹤一個有點棘手的 bug，但是它實在太難抓出來了，在不得已的情況下我加入了一些 debug 的指令，並且做了一些 commit。","","所有的這些 debug 的指令都只在 `bugFix` 這個 branch 裡面。最後我終於找到這個 bug，並且 fix 掉它，接著撒花慶祝一下！","","現在唯一的問題就是要把我在 `bugFix` branch 裡面所做的修改 merge 回 `master` branch。我可以簡單地透過 fast-forward 來 merge ，但這樣的話 `master` branch 就會包含這些含有 debug 指令的 commit 了。我相信一定有其它方法..."]}},{type:"ModalAlert",options:{markdowns:["我們需要告訴 git 只去複製其中一個 commit。 這種情況跟之前的關卡有一點類似，我們可以使用一樣的指令","","* `git rebase -i`","* `git cherry-pick`","","來完成這個目的。"]}},{type:"ModalAlert",options:{markdowns:["這一個關卡是比較後面的關卡，你可以隨意決定你要選擇使用哪個指令，但是 `bugFix` 所指向的那個 commit 一定要可以被 `master` branch 包含到。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 로컬에 쌓인 커밋들","","개발중에 종종 이런 상황이 생깁니다: 잘 띄지 않는 버그를 찾아서 해결하려고, 어떤 부분의 문제인지를 찾기 위해 디버그용 코드와 화면에 정보를 프린트하는 코드 몇 줄 넣습니다. ","","디버깅용 코드나 프린트 명령은 그 브랜치에 들어있습니다. 마침내 버그를 찾아서 고쳤고, 원래 작업하는 브랜치에 합치면 됩니다!","","이제 `bugFix`브랜치의 내용을 `master`에 합쳐 넣으려 하지만, 한 가지 문제가 있습니다. 그냥 간단히 `master`브랜치를 최신 커밋으로 이동시킨다면(fast-forward) 그 불필요한 디버그용 코드들도 함께 들어가 버린다는 문제죠."]}},{type:"ModalAlert",options:{markdowns:["여기에서 Git의 마법이 드러납니다. 이 문제를 해결하는 여러가지 방법이 있습니다만, 가장 간단한 두가지 방법 아래와 같습니다:","","* `git rebase -i`","* `git cherry-pick`","","대화형 (-i 옵션) 리베이스(rebase)로는 어떤 커밋을 취하거나 버릴지를 선택할 수 있습니다. 또 커밋의 순서를 바꿀 수도 있습니다. 이 커맨드로 어떤 작업의 일부만 골라내기에 유용합니다.","","체리픽(cherry-pick)은 개별 커밋을 골라서 `HEAD`위에 떨어뜨릴 수 있습니다."]}},{type:"ModalAlert",options:{markdowns:["이번 레벨을 통과하기 위해 어떤 방법을 쓰시든 자유입니다만, `master`브랜치가 `bugFix` 브랜치의 커밋을 일부 가져오게 해주세요."]}}]}}}},{}],84:[function(a,b,c){c.level={disabledMap:{"git cherry-pick":!0,"git revert":!0},compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(a){return a.C2>a.C3},function(a){return a.C2>a.C1}]},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%27%22%2C%22id%22%3A%22master%22%7D%2C%22newImage%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22newImage%22%7D%2C%22caption%22%3A%7B%22target%22%3A%22C3%27%27%22%2C%22id%22%3A%22caption%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%2C%22C2%27%27%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%27%27%22%7D%2C%22C3%27%27%22%3A%7B%22parents%22%3A%5B%22C2%27%27%27%22%5D%2C%22id%22%3A%22C3%27%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i HEAD~2 --solution-ordering C3,C2;git commit --amend;git rebase -i HEAD~2 --solution-ordering C2'',C3';git rebase caption master",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"newImage":{"target":"C2","id":"newImage"},"caption":{"target":"C3","id":"caption"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"caption","id":"HEAD"}}',name:{ko:"커밋들 갖고 놀기",en_US:"Juggling Commits",de_DE:"Jonglieren mit Commits",fr_FR:"Jongler avec les Commits",es_AR:"Haciendo malabares con los commits",pt_BR:"Malabarismo com commits",ja:"コミットをやりくりする",zh_CN:"提交变换戏法",zh_TW:"commit 的戲法"},hint:{en_US:"The first command is git rebase -i HEAD~2",de_DE:"Der erste Befehl ist git rebase -i HEAD~2",fr_FR:"La première commande est git rebase -i HEAD~2",es_AR:"El primer comando es git rebase -i HEAD~2",pt_BR:"O primeiro comando é git rebase -i HEAD~2",ja:"最初に打つコマンドはgit rebase -i HEAD~2",ko:"첫번째 명령은 git rebase -i HEAD~2 입니다",zh_CN:"第一个命令是 'git rebase -i HEAD~2'",zh_TW:"第一個命令是 'git rebase -i HEAD~2'"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Juggling Commits","","Here's another situation that happens quite commonly. You have some changes (`newImage`) and another set of changes (`caption`) that are related, so they are stacked on top of each other in your repository (aka one after another).","","The tricky thing is that sometimes you need to make a small modification to an earlier commit. In this case, design wants us to change the dimensions of `newImage` slightly, even though that commit is way back in our history!!"]}},{type:"ModalAlert",options:{markdowns:["We will overcome this difficulty by doing the following:","","* We will re-order the commits so the one we want to change is on top with `git rebase -i`","* We will `commit --amend` to make the slight modification","* Then we will re-order the commits back to how they were previously with `git rebase -i`","* Finally, we will move master to this updated part of the tree to finish the level (via the method of your choosing)","","There are many ways to accomplish this overall goal (I see you eye-ing cherry-pick), and we will see more of them later, but for now let's focus on this technique."]}},{type:"ModalAlert",options:{markdowns:["Lastly, pay attention to the goal state here -- since we move the commits twice, they both get an apostrophe appended. One more apostrophe is added for the commit we amend, which gives us the final form of the tree ","","That being said, I can compare levels now based on structure and relative apostrophe differences. As long as your tree's `master` branch has the same structure and relative apostrophe differences, I'll give full credit"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Jongler avec les Commits","","Voici une autre situation fréquente. Vous avez certains changements (`newImage`) et un autre groupe de changements (`caption`) qui sont relié, ils sont donc empilés l'un sur l'autre dans votre dépôt Git (i.e. un après l'autre).","","Là ou ça se complique c'est lorsque vous devez faire une petite modification dans un commit antérieur. Dans ce cas, les configuration de  `newImage` devront changer un peu, même si ce commit est loin dans notre historique !!"]}},{type:"ModalAlert",options:{markdowns:["Nous allons régler le problème en faisant ceci :","","* Nous allons réordonner les commits pour que celui que nous voulions changer soit sur le dessus `git rebase -i`","* Nous allons utiliser `commit --amend` pour faire les petites modifications","* Nous allons réordonner les commits dans l'ordre original avec `git rebase -i`","* Finalement, nous allons déplacer master vers la nouvelle tête de l'arbre (avec la méthode de votre choix)","","Il y a plusieurs façons d'atteindre ce but (cherry-pick semble très tentant), mais nous allons parler de cherry-pick plus tard, pour le moment concentrez-vous sur cette technique."]}},{type:"ModalAlert",options:{markdowns:["Pour terminer, Faites attentions au but -- Du au fait que nous déplacons les commmits 2 fois, ils se retrouvent les deux avec une apostrophe. une deuxième apostrophe est ajouté sur le commit que nous modifions, ce qui nous donnes l'arbre finale ","","Ceci étant dit, Je peux comparer le résultat avec la stuctures et les différentes apostophes. Tant que votre arbre master a la même structure et apostrophe le niveau sera considéré réussi."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Haciendo malabares con los commits","","Estaes otra situación algo común. Tenés algunos cambios (`newImage`) y otro conjunto de cambios (`caption`) que están relacionados, entonces están apilados en tu repositorio uno encima del otro (es decir, uno después del otro).","","El tema es que a veces tenés que hacer una pequeña modificación a un commit previo. En este caso, la gente de diseño requiere que cambiemos ligeramente las dimensiones de `newImage`, ¡incluso aunque ese commit ya esté atrás en nuestra historia!"]}},{type:"ModalAlert",options:{markdowns:["Superaremos esta dificultad haciendo lo siguiente:","","* Vamos a reordenar los commits para que el que queremos cambiar quede arriba de todo con `git rebase -i`","* Vamos a hacer `commit --amend` para aplicar la ligera modificación","* Después vamos a reordenar los commits a como estaban con `git rebase -i`","* Finalmente, vamos a mover master a esta parte actualizada de nuestor árbol de commits para terminar el nivel (usando el método que prefieras)","","Hay varias maneras de lograr este objetivo en general (ya te veo haciéndole ojitos al cherry-pick), y veremos algunos más después, pero por ahora concentrémonos en esta técnica."]}},{type:"ModalAlert",options:{markdowns:["Por último, prestá atención al estado final acá -- como movemos los commits dos veces, ambos quedan con un apóstrofe. El commit que corregimos tiene un apóstrofe extra, y así nos queda nuestro árbol final","","Habiendo dicho eso, puedo comparar los niveles basándome ahora en la estructura y las diferencias relativas de apóstrofes. Mientras que tu rama `master` tenga la misma estructura y diferencias relativas de apóstrofes, te voy a dar el puntaje completo"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Malabarismo com commits","","Aqui está outra situação que acontece com bastante frequência. Você fez algumas mudanças (`newImage`), além de um outro conjunto de mudanças (`caption`) que são relacionadas, de forma que elas estão empilhadas uma após a outra no seu repositório.","","O complicado é que algumas vezes você precisa fazer uma pequena modificação em um commit mais antigo. Neste caso, o pessoal do design quer que modifiquemos um pouco as dimensões da imagem introduzida em `newImage`, apesar de esse commit estar mais para trás no nosso histórico!!"]}},{type:"ModalAlert",options:{markdowns:["Superaremos essa dificuldade fazendo o seguinte:","","* Reordenaremos os commits de forma que aquele que desejamos esteja no topo, com `git rebase -i`","* Usaremos o comando `git commit --amend` para fazer uma pequena modificação","* Vamos, então, reordenar os commits na mesma ordem que estavam anteriormente com `git rebase -i`","* Finalmente, moveremos o master para essa parte atualizada da árvore para finalizar o nível (usando o método de sua escolha)","","Há muitas formas de alcançar o objetivo final (eu vejo o cherry-pick passando pela sua mente), e veremos mais delas depois, mas por enquanto foquemos nesta técnica."]}},{type:"ModalAlert",options:{markdowns:['Por último, preste atenção no estado do "objetivo" aqui -- como nós movemos os commits duas vezes, ambos ficam com um apóstrofo. Um apóstrofo adicional é colocado no commit que sofreu o "amend", o que nos dá a forma final da árvore ',"","Tendo dito isto, posso avaliar a resposta baseado na estrutura e nas diferenças relativas de número de apóstrofos. Desde que o ramo `master` da sua árvore tenha a mesma estrutura, e o número de apóstrofos seja igual a menos de uma constante, darei a você todos os pontos para esta tarefa"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Jonglieren mit Commits","","Eine weitere häufig vorkommende Situation: du hast einige Änderungen in `newImage` und weitere Änderungen in `caption`. Die Änderungen hängen voneineander ab, das heißt in diesem Fall `caption` ist ein Nachfolger von `newImage`.","","Nun kann es vorkommen, dass du einen früheren Commit verändern willst. In unserem Fall will die Design-Abteilung, dass die Abmessungen in `newImage` leicht verändert werden, obwohl das mitten in unserer History liegt!"]}},{type:"ModalAlert",options:{markdowns:["Um das zu schaffen gehen wir wie folgt vor:","","* Wir sortieren die Commits mit `git rebase -i` so um, dass der, den wir ändern wollen, ganz oben liegt.","* Wir verändern den Commit mit `git commit --amend`.","* Dann sortieren wir die Commit mit einem erneuten `git rebase -i` wieder in die alte Reihenfolge.","* Schließlich aktualisieren wir den `master` auf das Ende unseres fertigen Baums, um diesen Level abzuschließen.","","Es gibt sehr viele Wege um das Endziel dieses Levels zu erreichen (ich sehe, du schielst auf `cherry-pick`) und wir werden uns später noch andere ansehen. Aber für's erste lass uns diese Methode ausprobieren."]}},{type:"ModalAlert",options:{markdowns:["Beachte den geschilderten Zielzustand. Da wir die Commits zweimal umsortieren bekommen sie jedesmal ein Apostroph hinzugefügt (weil sie jedesmal kopiert werden). Ein weiteres Apostroph entsteht durch den `commit --amend`.","","Zuguterletzt noch eine Bemerkung: ich kann Level nun auf Struktur und Apostroph-Differenz prüfen. So lange wie dein `master` am Ende dieselbe Strukutr und Apostroph-Differenz aufweist wie der Ziel-`master`, ist der Level bestanden."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Commitsをやりくりする","","開発中に頻繁に起こるケースをもう1つ考えます。ある変更（`newImage`）とまた別の変更（`caption`）があって、それらに依存関係があるとします。この一連の変更が一列に積み重なっているとします。","","ここでトリッキーなのは、以前のコミットに対して微修正をかけなければならないケースがあるということです。今回の教材でも、過去のコミットであるにも関わらず`newImage`ブランチに僅かな修正を加えるような設計の修正が入ったとしましょう。"]}},{type:"ModalAlert",options:{markdowns:["この困難な状況を、以下の手順で克服することを考えます：","","* `git rebase -i`を使って順番を変更する。これで、変更をかけたいコミットを一番先頭に持ってくる。","* `commit --amend`コマンドで僅かな変更を行う","* `git rebase -i`コマンドを再度使って、先頭に持ってきていたコミットを元に戻す","* 最後に、レベルクリアのためにmasterブランチを先頭に持ってくる","","クリアのための方法はいくつもありますが（cherry-pickを使うこともできます）、別の回答はまた後程の章で見ることにんして、今回は上記の方法でやってみることにしましょう。"]}},{type:"ModalAlert",options:{markdowns:["最後に、ゴール時点での状態に気を付けてください。今回2回ほどコミットを動かしますから、コミットへのポインタにはアポストロフィ（'）が追加されます。commit --amendコマンドの実行でできたコミットには更にもう1つのアポストロフィが追加されます。 "]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 提交变换戏法","","下面这种情况也是经常出现的。例如你之前已经在 `newImage` 分支上做了一些提交，然后又在 `caption` 分支上做了一些相关的提交，因此它们看起来是一个连一个的（stacked on top of each other in your repository）。","","有点棘手的就是有时候你又想往先前的提交里做些小改动。呐，现在就是设计师想要我们去轻微改变下 `newImage` 的内容（change the dimensions slightly），尽管那个提交是很久很久以前的了。"]}},{type:"ModalAlert",options:{markdowns:["为了实现他的愿望，我们可以按照下面的方法来做：","","* 先用 `git rebase -i` 将提交重新排序，然后把我们想要修改的提交挪到最前","* 然后用 `commit --amend` 来进行一些小修改","* 接着再用 `git rebase -i` 来将他们按最开始的顺序重新排好","* 最后我们把 master 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！","","当然还有许多方法可以完成这个任务（我知道你在看 cherry-pick 啦），之后我们会多点关注这些技巧啦，但现在暂时只专注上面这种方法。"]}},{type:"ModalAlert",options:{markdowns:["啊最后还要提醒你一下最终的形式 —— 因为我们把这个提交移动了两次，所以会分别产生一个省略提交（both get an apostrophe appended）。还有一个省略提交是因为我们为了实现最终效果去修改提交而添加的。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## commit 的戲法","","下面這種情況也是經常出現的。例如你之前已經在 `newImage` branch 上做了一些 commit，然後又開了一個 branch 叫做 `caption` ，並且在上面做了一些相關的 commit ，因此它們看起來是一個接著一個的。","","有點棘手的就是有時候你又想在之前的 commit 裡面做一些修改。在這個例子裡面，我們要去稍微修改一下 `newImage` 所指向的 commit，儘管已經是之前的 commit 了 。"]}},{type:"ModalAlert",options:{markdowns:["為了克服這個困難，我們可以按照下面的方法來做：","","* 先用 `git rebase -i` 將 commit 重新排序，然後把我們想要修改的 commit 移到最前面","* 然後用 `commit --amend` 來進行一些修改","* 接著再用 `git rebase -i` 來將他們按照最開始的順序重新排好","* 最後我們把 master 移到這個修改的最前端（用你自己喜歡的方法），就大功告成啦！","","當然還有許多方法可以完成這個任務（我知道你在想 cherry-pick 啦），之後我們會多點關注這些技巧啦，但現在暫時只注意上面這種方法。"]}},{type:"ModalAlert",options:{markdowns:["啊！最後還要提醒你一下最後所產生的 commit tree，因為我們把 commit 移動了兩次，所以會分別產生一個 apostrophe(單引號） commit。還有一個 apostrophe commit 是因為我們修改 commit 而加進來的。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 커밋들 갖고 놀기","","이번에도 꽤 자주 발생하는 상황입니다. `newImage`와 `caption` 브랜치에 각각의 변경내역이 있고 서로 약간 관련이 있어서, 저장소에 차례로 쌓여있는 상황입니다.","","때로는 이전 커밋의 내용을 살짝 바꿔야하는 골치아픈 상황에 빠지게 됩니다. 이번에는 디자인 쪽에서 우리의 작업이력(history)에서는 이미 한참 전의 커밋 내용에 있는 `newImage`의 크기를 살짝 바꿔달라는 요청이 들어왔습니다."]}},{type:"ModalAlert",options:{markdowns:["이 문제를 다음과 같이 풀어봅시다:","","* `git rebase -i` 명령으로 우리가 바꿀 커밋을 가장 최근 순서로 바꾸어 놓습니다","* `commit --amend` 명령으로 커밋 내용을 정정합니다","* 다시 `git rebase -i` 명령으로 이 전의 커밋 순서대로 되돌려 놓습니다","* 마지막으로, master를 지금 트리가 변경된 부분으로 이동합니다. (편하신 방법으로 하세요)","","이 목표를 달성하기 위해서는 많은 방법이 있는데요(체리픽을 고민중이시죠?), 체리픽은 나중에 더 살펴보기로 하고, 우선은 위의 방법으로 해결해보세요."]}},{type:"ModalAlert",options:{markdowns:["최종적으로, 목표 결과를 눈여겨 보세요 -- 우리가 커밋을 두 번 옮겼기 때문에, 두 커밋 모두 따옴표 표시가 붙어있습니다. 정정한(amend) 커밋은 따옴표가 추가로 하나 더 붙어있습니다."]}}]}}}
},{}],85:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%7D%2C%22newImage%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22newImage%22%7D%2C%22caption%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22caption%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout master;git cherry-pick C2;git commit --amend;git cherry-pick C3",disabledMap:{"git revert":!0},startTree:'{"branches":{"master":{"target":"C1","id":"master"},"newImage":{"target":"C2","id":"newImage"},"caption":{"target":"C3","id":"caption"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"caption","id":"HEAD"}}',compareOnlyMasterHashAgnosticWithAsserts:!0,goalAsserts:{master:[function(a){return a.C2>a.C3},function(a){return a.C2>a.C1}]},name:{ko:"커밋 갖고 놀기 #2",en_US:"Juggling Commits #2",fr_FR:"Jongler avec les commits #2",es_AR:"Haciendo malabares con los commits #2",pt_BR:"Malabarismo com commits #2",de_DE:"Jonglieren mit Commits Teil 2",ja:"コミットをやりくりする その2",zh_CN:"提交交换戏法 #2",zh_TW:"commit 的戲法 #2"},hint:{en_US:"Don't forget to forward master to the updated changes!",fr_FR:"N'oubliez pas de forwarder la branch master dans la nouvelle branch",es_AR:"¡No te olvides de avanzar master a los cambios actualizados!",pt_BR:"Não se esqueça de avançar a referência do master para as mudanças efetuadas!",de_DE:"Vergiss nicht den master auf die aktuelle Version vorzuspulen",ja:"masterのポインタを先に進めることを忘れずに！",ko:"master를 변경 완료한 커밋으로 이동(forward)시키는 것을 잊지 마세요!",zh_CN:"别忘记了将 master 快进到最新的更新上！",zh_TW:"別忘記了將 master 推到最新的 commit 上面！"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Juggling Commits #2","","*If you haven't completed Juggling Commits #1 (the previous level), please do so before continuing*","","As you saw in the last level, we used `rebase -i` to reorder the commits. Once the commit we wanted to change was on top, we could easily --amend it and re-order back to our preferred order.","","The only issue here is that there is a lot of reordering going on, which can introduce rebase conflicts. Let's look at another method with `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Remember that git cherry-pick will plop down a commit from anywhere in the tree onto HEAD (as long as that commit isn't an ancestor of HEAD).","","Here's a small refresher demo:"],afterMarkdowns:["Nice! Let's move on"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["So in this level, let's accomplish the same objective of amending `C2` once but avoid using `rebase -i`. I'll leave it up to you to figure it out! :D","","Remember, the exact number of apostrophe's (') on the commit are not important, only the relative differences. For example, I will give credit to a tree that matches the goal tree but has one extra apostrophe everywhere"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Jongler avec les commits #2","","*Si vous n'avez pas fait le défi Jongler avec les commits #1 (le niveau précédent), vous devriez le faire avant de continuer*","","Comme vu dans le niveau précédent, nous utilisons `rebase -i` pour réordonner les commits. Une fois que le commit à modifier est celui à la tête, nous pouvons facilement faire un --amend et réordonner dans l'ordre voulu.","","La difficulté ici est qu'il y a beaucoup de changements, ce qui peut introduire des conflits de rebase. Essayons avec l'autre méthode `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["N'oubliez pas que git cherry-pick va prendre un commit de n'importe où dans l'arbre de git et le mettre devant HEAD (sauf s'il est un ancêtre de HEAD).","","Un petit rappel :"],afterMarkdowns:["Bien ! continuons."],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["Dans ce niveau, nous voulons modifier `C2` sans utiliser `rebase -i`. À vous maintenant de trouver comment ! :D","","Petit rappel, le nombre exact d'apostrophes (') sur le commit n'est pas important. Par exemple, nous donnerons les points à une structure qui colle au résultat mais qui a une apostrophe en trop partout."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Haciendo malabares con los commits #2","","*Si no completaste Haciendo malabares con los commits #1 (el nivel anterior), hacelo antes de continuar*","","Como viste en el último nivel, usamos `rebase -i` para reordenar los commits. Una vez que el commit que queríamos cambiar estaba arriba de todo, pudimos `--amend`earlo fácilmente y reordenarlo a como queríamos.","","El único problema con esto es que hay mucho reordenamiento, que puede generar conflictos al rebasear. Veamos otro método usando `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acordate de que git cherry-pick va a traer un commit de cualquier parte del árbol sobre HEAD (siempre que ese otro commit no sea un ancestro de HEAD).","","Una pequeña demo para refrescar la idea:"],afterMarkdowns:["¡Bien! Sigamos..."],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["Entonces, en este nivel vamos a lograr el mismo objetivo de corregir `C2`, pero sin usar `rebase -i`. Te dejo a vos el darte cuenta cómo :D","","Acordate, la cantidad exacta de apóstrofes (') en el commit no es importante, sólo la diferencia relativa. Por ejemplo, le voy a dar puntaje a un árbol que matchee el objetivo pero cuyos commits tengan todos un apóstrofe extra"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Malabarismo com commits #2","","*Caso você não tenha completado o nível anterior (Malabarismo com commits #1), por favor faça-o antes de continuar*","","Como você viu no nível anterior, usamos `rebase -i` para reordenar os commits. Uma vez que o commit que queríamos mudar estava no topo, pudemos facilmente usar o `--amend` e depois reordená-lo de volta para obter nossa ordem preferida.","","O único problema aqui é que há muita reordenação ocorrendo, o que pode introduzir conflitos de rebase. Vamos dar uma olhada em outro método, usando o `git cherry-pick`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lembre-se que o git cherry-pick copiará um commit de qualquer lugar na árvore sob o HEAD (desde que esse commit não seja um ancestral do HEAD).","","Aqui está uma demonstração para refrescar sua memória:"],afterMarkdowns:["Ótimo! Vamos em frente"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:['Então, neste nível, vamos alcançar o mesmo objetivo de fazer "amend" no `C2`, mas evitaremos usar o `rebase -i`. Agora vou deixar com você a tarefa de descobrir como fazer! :D',"","Lembre-se, o número exato de apóstrofos (') nos commits não é importante, apenas as diferenças relativas. Por exemplo, darei todos os pontos nesta tarefa se você obtiver o mesmo resultado da árvore da visualização de objetivo com um apóstrofo extra em todos os commits"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Jonglieren mit Commits Teil 2","",'Du solltest "Jonglieren mit Commits" (den vorherigen Level) bestanden haben, bevor du dich an diesem hier versuchst.',"","Wie du im letzten Level gesehen hast haben wir `git rebase -i` genutzt, um die Commits neu anzuordnen. Sobald der Commit, den wir ändern wollte, ganz oben war, konnten wir das auch einfach mit `git commit --amend` tun. Danach haben wir die alte Reihenfolge wiederhergestellt.","","Das einzige Problem ist hier, dass da eine Menge Umsortieren stattfindet, was zu Rebase-Konflikten führen kann. Schauen wir uns also eine Methode mit `git cherry-pick` an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wie du dich erinnerst macht `git cherry-pick` eine Kopie des angegebenen Commits und fügt sie an `HEAD` an (es sei denn der Commit ist ein Vorgänger von `HEAD`).","","Hier eine kleine Demo zur Erinnerung:"],afterMarkdowns:["Schick! Und weiter geht's."],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["In diesem Level geht es also auch um das Ziel den Commit `C2` zu modifizieren, aber ohne `git rebase -i` zu benutzen. Ich überlass es dir herauszufinden, wie das gehen soll. :D","","Nicht vergessen, die genaue Anzahl von Kopien (d.h. Apostrophs) ist nicht ausschlaggebend, nur die Differenz. Der Level ist zum Beispiel auch gelöst, wenn dein fertiger Baum dieselbe Struktur wie der Ziel-Baum hat, aber *überall* ein Apostroph mehr aufweist."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## コミットをやりくりする その2","","*注意 この一つ前のレベル「コミットをやりくりする」をクリアしていない人は、まずそちらの問題をクリアしてきてください*","","前回見てきたように、コミット順序の変更のために、私たちは`rebase -i`コマンドを利用しました。ツリーの先頭に変更対象のコミットがあれば、--amendオプションを使うことで容易に変更を書きかえて、元の順序に戻すことができます。","","この場合に心配なことが一つだけあって、それは複数回の順序の変更が行われるので、rebaseのコンフリクト（衝突）が起こりうることです。こういうケースへの対策として、`git cherry-pick`を使った別の解決法について考えてみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git cherry-pickを使うと、ツリーの中から複数のコミットを選んで、HEADの下に新しく作ることができましたね。","","簡単なデモを見てみましょう："],afterMarkdowns:["できました！次へ進みましょう"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルでは、`C2`をamendすることで前回と同じ目的を達成しましょう。但し`rebase -i`は使わずにクリアしてください。どんな方法で進めるかはあなたにおまかせします！:D"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 提交变换戏法 #2","","*假如你还没有完成提交变换戏法 #1（前一关），这关不让玩哦！*","","如你在上一关所见，我们使用 `rebase -i` 来重排那些提交。只要把我们想要的提交挪到最顶端，我们就可以很容易地改变它，然后把它们重新排成我们想要的顺序。","","但唯一的问题就是这样做就要排很多次，有可能造成衍合冲突（rebase conflicts）。下面就看看用另外一种方法 `git cherry-pick` 是怎么做的吧。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["要在心理牢记 cherry-pick 可以从提交树的任何地方拿一个提交来放在 HEAD 上（尽管那个提交不在上游）。","","下面是一个小小的演示："],command:"git cherry-pick C2",afterMarkdowns:["好滴咧，我们继续"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["那么这关呢，和上一关一样要改变提交 `C2`，但你要避免使用 `rebase -i`。自己想想要怎么解决吧，骚年！ :D"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## commit 的戲法 #2","","*假如你還沒有完成 commit 的戲法 #1（前面那一個關卡），請先完成之後再來這一關！*","","如你在上一個關卡所看到的，我們使用 `rebase -i` 來重新排列那些 commit。只要把我們想要修改的 commit 移到最前面，我們就可以很容易地重新修改它，然後再把它們重新排成我們想要的順序。","","但唯一的問題就是這樣做就要排很多次，有可能造成 rebase conflict。下面就看看用另外一種方法 `git cherry-pick` 是怎麼做的吧！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["要記住喔！ cherry-pick 可以從 commit tree 的任何地方拿一個 commit 來放在 HEAD 上（只要那個 commit 不是 HEAD 的 parent）。","","下面是一個簡單清楚的 demo："],command:"git cherry-pick C2",afterMarkdowns:["太棒了，我們繼續吧！"],beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["在這一關和上一關一樣要去修改一個 commit 叫做`C2`，但你要避免使用 `rebase -i`。自己想想看要怎麼解決吧！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 커밋 갖고 놀기 #2","","*만약 이전 레벨의 커밋 갖고 놀기 #1을 풀지 않으셨다면, 계속하기에 앞서서 꼭 풀어보세요*","","이전 레벨에서 보셨듯이 `rebase -i` 명령으로 커밋의 순서를 바꿀 수 있습니다. 정정할 커밋이 바로 직전(top)에 있으면 간단히 --amend로 수정할 수 있고, 그리고 나서 다시 원하는 순서로 되돌려 놓으면 됩니다.","","이번에 한가지 문제는 순서를 꽤 많이 바꿔야한다는 점인데요, 그러다가 리베이스중에 충돌이 날 수 있습니다. 이번에는 다른 방법인 `git cherry-pick`으로 해결해 봅시다."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git cherry-pick으로 HEAD에다 어떤 커밋이든 떨어 뜨려 놓을 수 있다고 알려드린것 기억나세요? (단, 그 커밋이 현재 가리키고 있는 커밋이 아니어야합니다)","","간단한 데모로 다시 알려드리겠습니다:"],afterMarkdowns:["좋아요! 계속할게요"],command:"git cherry-pick C2",beforeCommand:"git checkout -b bugFix; git commit; git checkout master; git commit"}},{type:"ModalAlert",options:{markdowns:["그럼 이번 레벨에서는 아까와 마찬가지로 `C2` 커밋의 내용을 정정하되, `rebase -i`를 쓰지 말고 해보세요. ^.~"]}}]}}}},{}],86:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C5","id":"master","remoteTrackingBranchID":null},"side":{"target":"C3","id":"side","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C2","C4"],"id":"C5"}},"tags":{"v1":{"target":"C2","id":"v1","type":"tag"},"v0":{"target":"C1","id":"v0","type":"tag"}},"HEAD":{"target":"C2","id":"HEAD"}}',solutionCommand:"git tag v1 side~1;git tag v0 master~2;git checkout v1",startTree:'{"branches":{"master":{"target":"C5","id":"master","remoteTrackingBranchID":null},"side":{"target":"C3","id":"side","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C2","C4"],"id":"C5"}},"tags":{},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Git Tags",de_DE:"Git Tags",ja:"Gitのタグ",es_AR:"Tags en git",pt_BR:"Tags no Git",fr_FR:"Git Tags",zh_CN:"Git Tags",zh_TW:"git tag"},hint:{en_US:"you can either check out the commit directly or simply checkout the tag!",fr_FR:"Vous pouvez faire le checkout sur le commit ou sur le tag !",de_DE:"Du kannst den Checkout entweder direkt auf den Commit oder das Tag machen.",ja:"コミットを直接チェックアウトできますが、簡単にタグでチェックアウトすることも可能!",es_AR:"Podés checkoutear directamente el commit, ¡o simplemente el tag!",pt_BR:"Você pode fazer checkout diretamente no commit ou na tag correspondente!",zh_TW:"你可以直接 checkout 到 commit 上，或是簡單的 checkout 到 tag 上",zh_CN:"你可以直接 checkout 到 commit 上，或是简单的 checkout 到 tag 上"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Tags","","As you have learned from previous lessons, branches are easy to move around and often refer to different commits as work is completed on them. Branches are easily mutated, often temporary, and always changing.","","If that's the case, you may be wondering if there's a way to *permanently* mark historical points in your project's history. For things like major releases and big merges, is there any way to mark these commits with something more permanent than a branch?",""]}},{type:"ModalAlert",options:{markdowns:['You bet there is! Git tags support this exact use case -- they (somewhat) permanently mark certain commits as "milestones" that you can then reference like a branch.',"",'More importantly though, they never move as more commits are created. You can\'t "check out" a tag and then complete work on that tag -- tags exist as anchors in the commit tree that designate certain spots.',"","Let's see what tags look like in practice."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's try making a tag at `C1` which is our version 1 prototype"],afterMarkdowns:["There! Quite easy. We named the tag `v1` and referenced the commit `C1` explicitly. If you leave the commit off, git will just use whatever `HEAD` is at"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["For this level just create the tags in the goal visualization and then check `v1` out. Notice how you go into detached `HEAD` state -- this is because you can't commit directly onto the `v1` tag.","","In the next level we'll examine a more interesting use case for tags."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Tags","","Comme apris dans les niveaux précédents, les branches sont faciles à manipuler et réfèrent aux commits qui ont été fait pour compléter le travail fait sur celles-ci. Les branches sont donc constamment en mouvement.","","Dans ce cas, vous vous demandez peut-être s'il y a un moyen d'ajouter une marque *permanente* dans l'historique de votre projet. Pour des commits comme des release majeures ou d'importants merge, existe-t-il une façon plus stable qu'une branche de garder l'état d'une branche à un instant précis ?",""]}},{type:"ModalAlert",options:{markdowns:['Vous l\'avez deviné ! Git tags offre cette fonctionnalité -- les tags marquent à jamais certains commits comme "milestone" auxquels vous pouvez vous référez comme à des branches.',"","Encore plus important, il sont définitifs. Vous ne pouvez donc pas rajouter de commit dans un tag -- les tags sont un peu comme un pointeur définitif dans l'arbre des commits.","","Voyons les tags en pratique."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Essayons de faire un tag sur C1 (qui représente la version 1 de notre prototype)"],afterMarkdowns:["Voila, facile non ? Nous nommons le tag `v1` et il pointe vers le commit  `C1`. Si vous ne spécifiez pas le commit, le tag pointera là où se trouve `HEAD`."],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Pour ce niveau, créez simplement les tags visibles dans les objectifs puis faites un checkout sur le tag `v1`. Remarquez comment vous vous retrouvez dans l'état `HEAD` détachée -- c'est parce que vous ne pouvez pas commiter sur le tag `v1`.","","Dans les niveaux suivants vous verrez un cas plus intéressant d'utilisation des tags."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git tag","","就像你之前學到的一樣，branch 很容易被移動，而且當有新的 commit 時，又會再移動，branch 經常指向不同的 commit，branch 很容易改變。","","你可能會有疑問，有沒有什麼方法可以*永遠*有一個指向 commit 的記號，例如，表示重大的軟體釋出，或者是修正很大的 bug，有沒有其它比 branch 更好的方法，可以永遠地指向這些 commit？",""]}},{type:"ModalAlert",options:{markdowns:['你說對了！git tag 可以解決這個問題，它們可以永遠地指向某個特定的 commit，就像是表示一個"里程碑"一樣。',"",'更重要的是，當有新的 commit 時，它們也不會移動，你不可以 "checkout" 到 tag 上面 commit，tag 的存在就像是一個在 commit tree 上的表示特定訊息的一個錨。',"","讓我們來實際看一下 tag 長什麼樣子..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們試著建立一個 tag，指向 commit `C1`，表示這是我們第一個版本。"],afterMarkdowns:["看吧！非常容易，我們命名這個 tag 叫做 `v1`，並且讓它指向 commit `C1`，如果你離開了該 commit，git 會根據 `HEAD` 所指向的位置才分辨。"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["在這個關卡中，建立一個如視覺化目標裡面的 tag，然後 checkout 到 `v1` 上面，要注意你會進到分離 `HEAD` 的狀態，這是因為你不能夠直接在 `v1` 上面做 commit。","","在下個關卡中我們會介紹更多 tag 的應用..."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## git tag","","就像你之前学到的一样，branch 很容易被移动，而且当有新的 commit 时，又会再移动，branch 经常指向不同的 commit，branch 很容易改变。","","你可能会有疑问，有没有什么方法可以*永远*有一个指向 commit 的记号，例如，表示重大的软体释出，或者是修正很大的 bug，有没有其它比 branch 更好的方法，可以永远地指向这些 commit？",""]}},{type:"ModalAlert",options:{markdowns:['你说对了！git tag 可以解决这个问题，它们可以永远地指向某个特定的 commit，就像是表示一个"里程碑"一样。',"",'更重要的是，当有新的 commit 时，它们也不会移动，你不可以 "checkout" 到 tag 上面 commit，tag 的存在就像是一个在 commit tree 上的表示特定讯息的一个锚。',"","让我们来实际看一下 tag 长什么样子..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["让我们试着建立一个 tag，指向 commit `C1`，表示这是我们第一个版本。"],afterMarkdowns:["看吧！非常容易，我们命名这个 tag 叫做`v1`，并且让它指向 commit `C1`，如果你离开了该 commit，git 会根据 `HEAD` 所指向的位置才分辨。"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["在这个关卡中，建立一个如视觉化目标里面的 tag，然后 checkout 到 `v1` 上面，要注意你会进到分离 `HEAD` 的状态，这是因为你不能够直接在`v1` 上面做 commit。","","在下个关卡中我们会介绍更多 tag 的应用..."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tags en git","","Como aprendiste en lecciones anteriores, las ramas pueden moverse fácilmente, y en general van referenciando distintos commits a medida que el trabajo se va completando en ellas. Las ramas cambian fácilmente, suelen ser temporales, y siempre cambiantes.","","Si ese es el caso, te podrías estar preguntando si hay una manera de marcar *permanentemente* puntos en la historia de tu proyecto. Para cosas como releases mayores o grandes merges, ¿hay algún modo de marcar esos commits con algo más permanente que un branch?",""]}},{type:"ModalAlert",options:{markdowns:['¡Seguro que hay! Los tags de git soportan exactamente este caso de uso -- marcan (bastante) permanentemente determinados commits como "hitos" que podés referenciar como a un branch.',"",'Aún más importante, los tags no avanzan cuando se crean nuevos commits. No podés "checkoutear" un tag y completar el trabajo en ese tag - los tags son marcas fijas en el árbol de commits que designan ciertos puntos.',"","Veamos cómo se ven los tags en práctica..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Creemos un tag en `C1`, que es nuestro prototipo de la versión 1"],afterMarkdowns:["¡Ahí está! Bastante simple. Nombramos al tag `v1` y referenciamos explícitamente al commit `C1`. Si no especificás el commit, git va a usar al apuntado por `HEAD`"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Para este nivel, simplemente creá los tags en la visualización final y después checkouteá `v1`. Notá cómo entrás en el estado detached -- esto es porque no podés commitear directamente sobre el tag `v1`.","","En el próximo nivel vamos a examinar un caso de uso más interesante para los tags."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Tags no Git","","Como você aprendeu nas lições anteriores, ramos são fáceis de mover e geralmente vão se referindo a diferentes commits conforme você vai trabalhando no código. Ramos são facilmente mutáveis, frequentemente temporários, e estão sempre mudando.","","Se este é o caso, você pode estar se perguntando se não existe uma forma de marcar *permanentemente* pontos históricos do projeto. Para coisas como grandes releases ou grandes merges, existe alguma forma de marcar commits com algo mais permanente que um ramo?",""]}},{type:"ModalAlert",options:{markdowns:['Você acertou a aposta, existe sim! As tags do Git foram criadas exatamente para esse caso de uso -- elas marcam de forma (relativamente) permanente certos commits como se fossem "pedras de kilometragem" ("milestones") em uma estrada, e você pode referenciá-las exatamente como faz com ramos.',"",'O mais importante, no entanto, é que elas nunca se movem sozinhas quando novos commits são criados. Você pode fazer "checkout" em uma tag e então completar trabalho nessa tag -- tags existem como âncoras na árvore de commits que estão atreladas a certos pontos.',"","Vejamos como as tags se comportam na prática."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Criemos uma tag em `C1`, que é nosso protótipo da versão 1"],afterMarkdowns:["Aqui! Bem fácil. Nós chamamos a tag de `v1` e referenciamos o commit `C1` explicitamente. Se você chamar o comando sem especificar um commit, o git vai usar seja lá qual commit para o qual o `HEAD` estiver apontando"],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:['Para completar esta tarefa, simplesmente crie as tags mostradas na visualização do objetivo, e então faça checkout em `v1`. Veja que você vai para o estado "Detached HEAD" -- isso é devido ao fato de que você não pode commitar diretamente na tag `v1`.',"","No próximo nível, examinaremos mais um caso de uso interessante para as tags."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Tags","","Wie du aus den vorhergehenden Levels weißt sind Branches einfach durch die Gegend zu schieben und zeigen of auf verschiedene Commits, während die Arbeit in ihnen fortschreitet. Ein Branch wird oft verändert, manchmal nur temporär, und ist ständig in Bewegung.","","Da das so ist fragst du dich vielleicht, ob es nicht eine Möglichkeit gibt, eine bestimmte Stelle in deiner Projekt-History *permanent* zu kennzeichnen. Kann man nicht zum Beispiel für große Releases und Meilensteine nicht einen Commit mit etwas festerem kennzeichnen, als mit einem Branch-Namen?",""]}},{type:"ModalAlert",options:{markdowns:["Aber klar! In Git gibt es genau zu diesem Zweck Tags -- sie kennzeichnen einen Commit (ziemlich) permanent als Meilenstein oder ähnliches, und man kann sie ansprechen wie Branch-Namen.","","Noch viel wichtiger, Tags verändern nicht ihre Position wenn man Commits hinzufügt. Du kannst ein Tag nicht in diesem Sinne auschecken und dann Modifikationen darauf committen. Tags sind Anker im Commit-Baum, die bestimmte Stellen anzeigen.","","Lass uns anschauen wie Tags in der Praxis funktionieren."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lass uns ein Tag bei `C1` anlegen und damit die Version 1 unseres Prototyps markieren."],afterMarkdowns:["Peng! Ziemlich einfach. Wir haben das Tag `v1` genannt und lassen es auf `C1` zeigen. Wenn du den Commit weglässt wir das Tag für den Commit erzeugt, auf den `HEAD` zeigt."],command:"git tag v1 C1",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:['Um diesen Level zu schaffen, erstelle einfach die Tags wie sie in der Zielbeschreibung stehen und mach dann einen Checkout auf `v1`. Beachte wie du dabei in den "Detached HEAD" Zustand gehst -- das liegt daran, dass du keine Commits direkt auf das `v1` Tag machen kannst.',"","Im nächsten Level schauen wir uns dann interessantere Anwendungsfälle für Tags an."]}}]}}}},{}],87:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C3%22%2C%22id%22%3A%22bugFix%22%7D%2C%22side%22%3A%7B%22target%22%3A%22C5%22%2C%22id%22%3A%22side%22%7D%2C%22another%22%3A%7B%22target%22%3A%22C7%22%2C%22id%22%3A%22another%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C6%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git cherry-pick C3 C4 C7",compareOnlyMasterHashAgnostic:!0,disabledMap:{"git rebase":!0},startTree:'{"branches":{"master":{"target":"C1","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"side":{"target":"C5","id":"side"},"another":{"target":"C7","id":"another"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C1"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{fr_FR:"Introduction à cherry-pick",en_US:"Cherry-pick Intro",de_DE:"Einführung Cherry-picking",ja:"cherry-pick入門",es_AR:"Introducción a cherry-pick",pt_BR:"Introdução ao cherry-pick",zh_CN:"介绍 Cherry-pick",zh_TW:"介紹 cherry-pick"},hint:{fr_FR:"git cherry-pick suivis par les noms de commits",en_US:"git cherry-pick followed by commit names!",de_DE:"git cherry-pick gefolgt von Commit-Namen.",ja:"git cherry-pickの後にコミット名を追加",es_AR:"git cherry-pick seguido de los nombres de los commits",pt_BR:"git cherry-pick seguido dos nomes dos commits",zh_CN:"git cherry-pick 后面跟着 commit 的名字",zh_TW:"git cherry-pick 後面要接著 commit 的名稱"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving Work Around","","So far we've covered the basics of git -- committing, branching, and moving around in the source tree. Just these concepts are enough to leverage 90% of the power of git repositories and cover the main needs of developers.","",'That remaining 10%, however, can be quite useful during complex workflows (or when you\'ve gotten yourself into a bind). The next concept we\'re going to cover is "moving work around" -- in other words, it\'s a way for developers to say "I want this work here and that work there" in precise, eloquent, flexible ways.',"","This may seem like a lot, but it's a simple concept."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","The first command in this series is called `git cherry-pick`. It takes on the following form:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","It's a very straightforward way of saying that you would like to copy a series of commits below your current location (`HEAD`). I personally love `cherry-pick` because there is very little magic involved and it's easy to understand.","","Let's see a demo!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here's a repository where we have some work in branch `side` that we want to copy to `master`. This could be accomplished through a rebase (which we have already learned), but let's see how cherry-pick performs."],afterMarkdowns:["That's it! We wanted commits `C2` and `C4` and git plopped them down right below us. Simple as that!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["To complete this level, simply copy some work from the three branches shown into master. You can see which commits we want by looking at the goal visualization.",""]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Déplacer votre travail","","Nous avons maintenant pratiqué les bases de git -- commits, branches, et déplacements dans l'arbre des commits. Ces seuls concepts sont suffisants pour utiliser 90% du pouvoir des dépôt git et satisfaire les principaux besoins des développeurs.","",'Les 10% restants, cependant, peuvent être assez utiles pour systèmes assez complexes (ou quand vous vous êtes mis tout seul dans le pétrin). Le prochain concept que nous allons aborder est "le déplacement de travail" (moving work around) -- en d\'autres termes, c\'est une façon des développeurs de dire  "Je veux ce travail ici et cet autre là.".',"","Cela peut sembler compliqué, mais c'est un concept simple."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","La première commande de cette série est `git cherry-pick`. Elle a le prototype suivant :","","* `git cherry-pick <Commit1> <Commit2> <...>`","","C'est une manière simple de dire qu'on voudrait copier une série de commits en-dessous de notre emplacement actuel (`HEAD`). Personnellement, j'adore `cherry-pick` parce qu'il y a un petit peu de magie dedans, et parce que c'est facile à comprendre.","","Faisons une démonstration !",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ici le dépôt que nous avons contient du travail dans la branche `side`, que nous voulons copier dans `master`. Cela pourrait être fait avec un rebase (que nous avons déjà appris), mais voyons comment cherry-pick fonctionne."],afterMarkdowns:["Voilà ! Nous voulions les commits `C2` et `C4` et git les a fait apparaître juste sous nos jambes. Aussi simple que ça !"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, copiez simplement le travail désigné dans la branche master. Vous pouvez voir les commits que nous souhaitons avoir en regardant dans la fenêtre d'objectif.",""]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moviendo el trabajo por ahí","","Hasta ahora cubrimos lo básico de git -- commitear, branchear, y movernos por el árbol de commits. Estos conceptos alcanzan para aprovechar el 90% del poder de los repositorios de git y cubrir las necesidades principales de los desarrolladores.","",'El 10% restante, sin embargo, puede ser bastante útil en flujos de trabajo complejos (o cuando te metiste en algún problema complicado). El próximo concepto que vamos a cubrir es el de "mover el trabajo por ahí" -- en otras palabras, una forma que tienen los desarrolladores de decir "Quiero este trabajo allá y este otro allá" de una manera precisa, elocuente y flexible.',"","Puede parecer un montón, pero es un concepto bastante simple."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","El primer comando en esta serie se llama `git cherry-pick`. Tiene la siguiente forma:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Es una manera bastante directa de decir que querés copiar una serie de commits sobre tu ubicación actual (`HEAD`). Personalmente amo `cherry-pick` porque hay muy poca magia involucrada y es bastante simple de entender.","","¡Veamos una demo!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acá tenemos un repositorio con algo de trabajo en la rama `side` que queremos copiar a `master`. Podríamos lograrlo con un rebase (y ya aprendimos cómo), pero veamos cómo se comporta cherry-pick."],afterMarkdowns:["¡Eso es todo! Queríamos los commits `C2` y `C4` y git los aplicó justo donde estábamos. ¡Tan simple como eso!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente copiá algo de trabajo desde otras tres ramas a master. Podés ver qué commits queremos en la visualización del objetivo.",""]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Movendo trabalho por aí","","Por enquanto nós abordamos o básico do Git -- commitar, criar ramos, e mover-se pela árvore. Apenas esses conceitos já são suficientes para utilizar 90% do poder dos repositórios Git, e cobrem as principais necessidades dos desenvolvedores.","",'Os 10% restantes, entretanto, podem ser extremamente úteis em fluxos de trabalho complexos (ou quando você estiver em uma enrascada). O próximo conceito que vamos abordar é "movendo trabalho por aí" -- em outras palavras, veremos as formas como o desenvolvedor pode dizer "eu quero este trabalho aqui, e aquele ali" de formas precisas, eloquentes e flexíveis.',"","Isso pode parecer muito, mas os conceitos são simples."]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","O primeiro comando desta série é o `git cherry-pick`. Ele é chamado da seguinte forma:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Trata-se de uma forma bastante direta de dizer que você gostaria de copiar uma série de commits abaixo do seu local atual (`HEAD`). Eu pessoalmente amo o  `cherry-pick` porque há muito pouca mágica envolvida e é fácil de entender o funcionamento.","","Vejamos uma demonstração!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aqui está um repositório onde temos algum trabalho no ramo `side` que desejamos copiar para o `master`. Isso poderia ser obtido por meio de um rebase (que já aprendemos), mas vamos ver como o cherry-pick se sai."],afterMarkdowns:["É isso! Queríamos os commits `C2` e `C4` e o git os inseriu logo abaixo de nós. Simples assim!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, simplesmente copie algum trabalho dos outros três ramos para o master. Você pode ver quais commits queremos copiar na visualização do objetivo.",""]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["移動 commit","","目前為止我們已經講了 git 的基礎，這些基礎包括 commit、branch 以及在 commit tree 中移動，只要有這些概念你就能發揮 git 90% 的功力，而且對於程式設計師來說，這樣就很夠了。","",'而剩下的 10%，在很複雜的專案上面，是非常有用的（或者當你陷入困惑時），我們下一個要講的概念是 "移動 commit"，換句話說，當你會這個非常有彈性的招數之後，你就可以說"我想要把這個 commit 放這裡，而那個 commit 放在那裡"。',"","這看起來很複雜，但其實它很簡單。"]}},{type:"ModalAlert",options:{markdowns:["## git cherry-pick","","我們要講的第一個指令叫作 `git cherry-pick`，它的用法如下：","","* `git cherry-pick <Commit1> <Commit2> <...>`","","當你想要複製幾個 commit 並且接在你目前的位置（`HEAD`）下面的時候，這會是一個非常直接的方式。我個人非常喜歡用 `cherry-pick`，因為它並不複雜，很容易就可以了解。","","讓我們來看一個例子！",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["這裡有一個 repo，在 `side` branch 中，我們有一些 commit 想要複製到 `master` branch 上，這可以透過一個 rebase 來完成（我們之前已經學到了），但是讓我們看看 `git cherry-pick` 怎麼做。"],afterMarkdowns:["就是那樣！我們複製了 `C2` 以及 `C4` 並且把它們放到我們的後面，很簡單吧！"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，只需要從三個 branch 複製幾個 commit 到 `master` 下面，你可以從視覺化的目標看到我們需要哪些 commit。",""]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 转移工作区","","到现在我们已经学习了git的基础命令 -- commit, branch, checkout. 这些概念实现了git 90% 的功能, 同样也满足了开发者的主要需求 ","","然而, 剩余的10% 可能在处理复杂的工作流时(或者当你陷入困惑时), 非常的重要. 我们会在下一个概念中涉及'转移工作区', 换句话说, 这是开发者表达'我想要把这个工作放这里, 那个工作也放这里', 精确的说, 这是很灵活的方式    ","","看起来内容很多, 其实概念相当简单"]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","本系列的第一个命令是`git cherry-pick`, 命令形式为: ","","* `git cherry-pick <Commit1> <Commit2> <...>`","","这是一种很直接的推进方式 -- 如果你想将一些提交复制到你当前的位置`HEAD`下面, 我个人喜欢`cherry-pick` 的原因是, 其概念非常简单 ",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["现在有一个仓库, 我们想将`side`分支下的工作复制到`master`分支, 我们可以通过`rebase`完成这一点(已经学过了哈), 但是这里我们想通过`cherry-pick`来完成."],afterMarkdowns:["这是它啦, 我们需要的是提交对象`C2` 和 `C4` ,所以 git 将被它们抓取到当前分支下了. 就是这么简单!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["请完成这节测试, 只需要简单的将分支的工作复制到 master.  如果想看我们所需要的提交对象, 你可以打开虚拟目标窗口(`show goal`)",""]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Inhalte verschieben","","Bis jetzt haben wir uns die Grundlagen von Git angeschaut -- comitten, verzweigen und sich im Commit-Baum bewegen. Nur damit lässt sich schon 90% der Macht von Git-Repositories nutzen und die meisten Anforderungen von Entwicklern erfüllen.","",'Die übrigen 10% jedoch können in komplexeren Abläufen sehr hilfreich sein (oder wenn man sich in eine schwierige Lage manövriert hat). Das nächste was wir uns anschauen, ist, Inhalte durch den Commit-Baum zu schieben. Es gibt dem Entwickler die Möglichkeit in präziser, eloquenter Manier zu sagen "Ich will diese Inhalte hier und diese dort haben".',"","Das klingt vielleicht nach einer Menge, aber es ist sehr einfach."]}},{type:"ModalAlert",options:{markdowns:["## git cherry-pick","","Der erste Befehl in dieser Serie ist `git cherry-pick`. Er sieht so aus:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","Er ist eine einfache Möglichkeit um auszudrücken, dass du eine Folge von Commits unter deinen aktuellen Checkout (also `HEAD`) hängen möchtest. Ich persönlich liebe `cherry-pick`, weil es wenig Magic enthält und einfach zu verstehen ist.","","Schauen wir's uns mal an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir ein Repository mit einigem Zeugs im Branch `side`, das wir in den Branch `master` kopieren wollen. Das könnten wir mit einem Rebase machen (wie bereits gesehen), aber schauen wir mal wie das mit `cherry-pick` geht."],afterMarkdowns:["Das war's! Wir wollten die commits `C2` und `C4` und Git hat die einfach unter unseren aktuellen Checkout kopiert. So einfach ist das."],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur einige Commits aus den drei gezeigten Branches in den `master` kopieren. Der Zielbaum zeigt dir, welche.",""]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## コードの移動","","今まででは、gitの基本をひたすら見てきました -- コミット、ブランチ、そしてソースツリーの中でいろいろなポジションへのアクセス。これらの概念だけで、gitレポジトリの力を90%使いこなすことができ、開発者の主なニーズを満たしています。","","しかし最後の10%はより複雑なワークフローやちょっとトラブった時にとても役に立つこともある。これから取り上げる次の課題は「コードの移動」– つまり開発者が、このコードをここに置き、そのコードをそこに置きたい、と安易、かつ具体的に表す方法です。","","ちょっと複雑に聞こえるかもしれませんが、概念は簡単です。"]}},{type:"ModalAlert",options:{markdowns:["## Git Cherry-pick","","このシリーズの一つ目のコマンドは、`git cherry-pick`。次の形になります:","","* `git cherry-pick <Commit1> <Commit2> <...>`","","現在の位置(`HEAD`)より下の一連のコミットをコピーしたいという意を単純に表す方法です。分かりにくいところが少ないので、個人的に私がとても好きなコマンドです。","","デモを見ていきましょう!",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["このレポジトリには、現在`side`ブランチから`master`にコピーしたいコードがあります。この前学んできたrebaseコマンドでは実現可能ですが、cherry-pickの動作を見ていきましょう。"],afterMarkdowns:["それだけで終わりです! コミット`C2` と `C4`を取得したかったーそしてgitが現在の位置の直下に落としました。単純ですね!"],command:"git cherry-pick C2 C4",beforeCommand:"git checkout -b side; git commit; git commit; git commit; git checkout master; git commit;"}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするには、３つのブランチからmasterにコードをコピーしてください。どのコミットを取得するかについてはゴールのビジュアライズをみてください。",""]}}]}}}
},{}],88:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"C4","id":"HEAD"}}',solutionCommand:"git checkout C4",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Detach yo' HEAD",es_AR:"Desatacheá tu HEAD",pt_BR:"Solte a sua cabeça",fr_FR:"Détachez votre HEAD",zh_CN:"分离 HEAD",zh_TW:"分離 HEAD",de_DE:"Den Kopf abtrennen",ja:"HEADの分離"},hint:{en_US:"Use the label (hash) on the commit for help!",es_AR:"¡Usá la etiqueta (hash) sobre el commit para ayudarte!",pt_BR:"Use o identificador (hash) sobre o commit para te ajudar!",de_DE:"Benutze den Bezeichner (den Hash) des Commits.",ja:"コミットのラベル（hash）を使用",fr_FR:"Utiiser le label (identifiant) du commit pour aider !",zh_TW:"使用 commit 上的標籤（hash）來幫助你！",zh_CN:"使用提交记录上的标签(hash)来求助！"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving around in Git","","Before we get to some of the more advanced features of Git, it's important to understand different ways to move through the commit tree that represents your project.","","Once you're comfortable moving around, your powers with other git commands will be amplified!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","","First we have to talk about \"HEAD\". HEAD is the symbolic name for the currently checked out commit -- it's essentially what commit you're working on top of.","","HEAD always points to the most recent commit which is reflected in the working tree. Most git commands which make changes to the working tree will start by changing HEAD.","","Normally HEAD points to a branch name (like bugFix). When you commit, the status of bugFix is altered and this change is visible through HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this in action. Here we will reveal HEAD before and after a commit."],afterMarkdowns:["See! HEAD was hiding underneath our `master` branch all along."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Detaching HEAD","","Detaching HEAD just means attaching it to a commit instead of a branch. This is what it looks like beforehand:","","HEAD -> master -> C1",""],afterMarkdowns:["And now it's","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["To complete this level, let's detach HEAD from `bugFix` and attach it to the commit instead.","","Specify this commit by its hash. The hash for each commit is displayed on the circle that represents the commit."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moviéndose por ahí con Git","","Antes de meternos en algunas de las funcionalidades más avanzadas de git, es importante entender las distintas maneras de moverse por el árbol de commits que representa tu proyecto.","","Una vez que estés cómodo moviendote por ahí, tus poderes con los otros comandos de git ¡van a amplificarse!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'Primero tenemos que hablar de "HEAD". HEAD es el nombre simbólico del commit actualmente checkouteado -- es, básicamente, el commit sobre el que estás trabajando.',"","HEAD siempre apunta al commit más reciente, reflejado en el árbol de commits. La mayoría de los comandos de git que hacen cambios al árbol de commits empiezan modificando HEAD.","","Normalmente HEAD apunta al nombre de una rama (como bugFix). Cuando commiteás, el estado de bugFix se altera y este cambio es visible a través de HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamoslo en acción. Acá vamos a ver a HEAD antes y después de un commit."],afterMarkdowns:["¡Ves! HEAD estuvo oculta bajo nuestra rama `master` todo este tiempo."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Detacheando HEAD","","Detachear (_des-adjuntar_) HEAD simplemente significa adjuntarla a un commit en lugar de a un branch. Así es como se ve de antemano:","","HEAD -> master -> C1",""],afterMarkdowns:["Y así queda ahora:","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, detacheemos HEAD de `bugFix` y ataccheemosla al commit, en cambio.","","Especificá este commit por su hash. El hash de cada commit se muestra en el círculo que lo representa."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Movendo-se no Git","","Antes de seguirmos para algumas funcionalidades mais avançadas do Git, é importante entender as diferentes formas de se mover através da árvore de commits que representa o seu projeto.","","Uma vez que você estiver confortável em se mover ao redor, seus poderes utilizando outros comandos do Git serão amplificados!","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'Primeiro temos que conversar sobre a "cabeça" ("HEAD"). HEAD é um nome simbólico para o commit atualmente ativo (que sofreu checkout por último) -- é essencialmente o commit sobre o qual você está trabalhando no momento.',"","O HEAD sempre aponta para o commit mais recentemente copiado sobre a árvore de trabalho (arquivos do projeto). A maioria dos comandos do git que realizam mudanças sobre a árvore de trabalho começarão mudando o HEAD.","","Normalmente o HEAD aponta para o nome de um ramo (por exemplo, bugFix). Quando você commita, o status do bugFix é alterado e essa mudança ocorre também sobre o HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos isto em ação. Aqui vamos mostrar o HEAD antes e depois de um commit."],afterMarkdowns:["Veja! O HEAD estava se escondendo ao lado do nosso `master` esse tempo todo."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Soltando a cabeça","",'Soltar o HEAD significa anexá-lo a um commit em vez de anexá-lo a um ramo. Antes do estado solto ("detached"), é assim como se parece:',"","HEAD -> master -> C1",""],afterMarkdowns:["E agora é","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, vamos soltar o HEAD do `bugFix` e em vez disso anexá-lo ao commit.","","Especifique o commit por meio do hash correspondente. O hash de cada commit é mostrado dentro do círculo que representa o commit (a letra C seguida de um número)."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Se déplacer dans Git","","Avant que nous découvrions quelques unes des fonctionnalités les plus avancées de Git, il est important de comprendre les différents manières de se déplacer dans l'arbre des commits qui représente votre projet.","","Une fois que ces déplacements seront aisés, votre puissance avec les autres commandes de git sera amplifiée !","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'Premièrement nous avons parlé de "HEAD". HEAD est le nom symbolique pour le commit sur lequel nous nous situons actuellement -- plus simplement c\'est le commit sur lequel nous travaillons.',"","HEAD pointe toujours sur le commit le plus récent dans l'arbre des commits. La plupart des commandes git qui modifient l'arbre des commits vont commencer par modifier HEAD.","","Normalement HEAD pointe sur le nom d'une branche (comme bugFix). Quand vous effectuez un commit, le statut de bugFix est modifié et ce changement est visible par le biais de HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons cela en action. Ici nous allons indiquer où se situe HEAD avant et après un commit."],afterMarkdowns:["Vous voyez ! HEAD était caché en dessous de la branche `master` tout le long."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### Détacher HEAD","","Détacher HEAD signifie simplement que l'on attache HEAD à un commit au lieu d'une branche. Voilà à quoi cela ressemble actuellement :","","HEAD -> master -> C1",""],afterMarkdowns:["Et maintenant c'est","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Pour terminer ce niveau, détacher HEAD de `bugFix` et attachez-le plutôt au commit.","","Spécifiez le commit par son identifiant (hash). Le hash de chaque commit est affiché dans le rond qui représente le commit."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Navigation durch Git","","Bevor wir uns einige fortgeschrittene Konzepte in Git ansehen ist es wichtig, verschiedene Wege zum Navigieren durch den Commit-Baum, der das Projekt enthält, zu kennen.","","Sobald du das drauf hast, vergrößern sich deine Möglichkeiten in allen anderen Git-Befehlen.","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","","Erst mal müssen wir über `HEAD` reden. `HEAD` ist ein Alias für den Commit, der gerade ausgecheckt ist -- es ist im Prinzip der Commit, an den du deinen nächsten Commit hängst.","","`HEAD` zeigt immer auf den neuesten Commit. Die meisten Git-Befehle, die den Baum verändern, fangen damit an dass sie `HEAD` verschieben.","","Normalerweise zeigt `HEAD` auf einen Branch-Namen (z.B. `bugFix`). Wenn du einen Commit machst, wird `bugFix` auf diesen Commit geschoben, und `HEAD` (da es auf `bugFix` zeigt) automatisch auch."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns das mal in Aktion an. Wir werden hier `HEAD` vor und nach dem Commit anzeigen."],afterMarkdowns:["Siehst du? `HEAD` war die ganze Zeit unter `master` versteckt."],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### HEAD abkoppeln","",'`HEAD` abzukoppeln bedeutet, es direkt an einen bestimmten Commit zu hängen, anstatt an einen Branch. Wir gelangen dadurch in den "detached HEAD state". So sieht\'s vorher aus:',"","`HEAD` -> `master` -> `C1`",""],afterMarkdowns:["Und jetzt:","","`HEAD` -> `C1`"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Um diesen Level abzuschließen, lass uns mal `HEAD` von `bugFix` abkoppeln und an den Commit hängen.","","Gib den Commit mit seinem Hash an. Der Hash jedes Commits steht in dem Kreis, der den Commit darstellt."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 在Git中前后移动","","在接触Git的更多高级主题之前，我们先学习用不同的方法在代表你的项目的提交记录树上前后移动。","","一旦能够熟练地在Git中前进后退，你使用其他git命令的威力也会被放大！",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'我们首先看一下"HEAD". HEAD是当前提交记录的符号名称 -- 其实就是你正在其基础进行工作的提交记录。',"","HEAD总是指向最近一次提交记录，表现为当前工作树。大多数修改工作树的git命令都开始于改变HEAD指向。","","HEAD通常指向分支名（比如bugFix）。你提交时，改变了bugFix的状态，这一变化通过HEAD变得可见。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在实例中看一下。我们将会观察提交前后HEAD的位置。"],afterMarkdowns:["看! HEAD一直藏在`master`分支后面。"],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### 分离 HEAD","","分离HEAD就是让其指向一个提交记录而不是分支名。这是命令执行之前的样子： ","","HEAD -> master -> C1",""],afterMarkdowns:["现在变成了","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["想完成此关，从`bugFix`分离出HEAD并让其指向一个提交记录。","","通过hash值指定提交记录。每个提交记录的hash值显示在代表提交记录的圆圈中。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 在 git 中前後移動","","在接觸 git 的更多進階的主題之前，我們先學習用不同的方法在你的 project 中的 commit tree 上面移動。","","一旦能夠熟練地在 commit tree 中隨意地移動，你使用其它的 git 指令也會更厲害！",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'我們首先看一下 "HEAD"，HEAD 是一個 reference，它是指向目前所 checkout 的 commit，基本上，其實就是你目前所在的 commit。',"","在 commit tree 中，HEAD 總是指向最近的一次commit。大部份 git 的指令如果要修改 commit tree 的狀態的話，都會先改變 HEAD 所指向的 commit。","","HEAD 通常指向一個 branch 的名稱（比如 bugFix）。當你 commit 的時候，改變了 bugFix 的狀態，這一個變化可以從 HEAD 的改變中看到。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在實際的例子中。我們將會觀察 commit 前後 HEAD 的位置。"],afterMarkdowns:["看吧！HEAD 一直藏在 `master` 分支的後面。"],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### 分離 HEAD","","分離 HEAD 就是讓其指向一個 commit 而不是 branch 的名稱。這是指令執行之前的樣子：","","HEAD -> master -> C1",""],afterMarkdowns:["現在變成了","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["想要完成這一個關卡，從 `bugFix` 分離出 HEAD 並且讓它指向一個 commit。","","通過 hash 值可以指定 commit。每個 commit 的 hash 值顯示在各自的圓圈中。"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Moving around in Git","","Gitの上級機能に進む前に、自分のプロジェクトを表すコミットツリーの中で任意の位置へ移動する様々な方法を知っておく必要があります。","","移動方法が身につけば、他のgitコマンドをもよりうまく扱えるようになるでしょう！","","","","",""]}},{type:"ModalAlert",options:{markdowns:["## HEAD","",'まずは"HEAD"から始めましょう。HEADとは現在チェックアウトされているコミットを指す単語ですーようするに今作業中のコミットを表します。',"","HEADはいつも、作業中のツリーに反映されている最新のコミットを指します。作業ツリーへ変更を加える多くのgitコマンドはまずHEADから処理を始めます。","","HEADは普段、ブランチ名（例えば、bugFixなど）を指します。コミットすれば、bugFixの状態が変更され、その変更がHEADから確認できるようになります。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["実際の動作を見てみましょう。ここでは、コミットの前と後のHEADの状態を確認します。"],afterMarkdowns:["ほら、HEADが元から`master`ブランチの下に隠れていたんですね！"],command:"git checkout C1; git checkout master; git commit; git checkout C2",beforeCommand:""}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["### HEADの分離","","HEADの分離とは単に、ブランチではなく特定のコミットにHEADを紐づけることです。実行前の状態は次のようです:","","HEAD -> master -> C1",""],afterMarkdowns:["そして実行後はこう:","","HEAD -> C1"],command:"git checkout C1",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするには、HEADを`bugFix`から分離し、その代わりに特定のコミットに紐づけましょう。","","このコミットをハッシュで指定します。コミットのハッシュはそのコミットを表す丸の上に表示されています。"]}}]}}}},{}],89:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22master%22%7D%2C%22overHere%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22overHere%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase -i overHere --solution-ordering C3,C5,C4",compareOnlyMasterHashAgnostic:!0,disabledMap:{"git cherry-pick":!0},startTree:'{"branches":{"master":{"target":"C5","id":"master"},"overHere":{"target":"C1","id":"overHere"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"}}',hint:{en_US:"you can use either branches or relative refs (HEAD~) to specify the rebase target",es_AR:"podés usar tanto ramas como referencias relativas (HEAD~) para especificar el objetivo del rebase",pt_BR:"Você pode usar ou ramos ou referências relativas (HEAD~) para especificar o alvo do rebase",de_DE:"Du kannst entweder Branches oder relative Ref-Angaben (z.B. HEAD~) benutzen, um das Ziel des Rebase anzugeben.",fr_FR:"Vous pouvez utiliser soit les branches, soit les références relatives (HEAD~) pour spéficier la cible à rebaser",zh_CN:"你可以使用 branch 或者是相对位置（HEAD~）來指定 rebase 的目标",zh_TW:"你可以指定 branch 或者是相對位置（HEAD~）來表示 rebase 的目標"},name:{en_US:"Interactive Rebase Intro",es_AR:"Introducción al rebase interactivo",pt_BR:"Introdução ao rebase interativo",de_DE:"Einführung Interactive Rebase",ja:"インタラクティブrebase入門",fr_FR:"Introduction à rebase",zh_CN:"Rebase 交互命令介绍 ",zh_TW:"介紹互動式的 rebase"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick is great when you know which commits you want (_and_ you know their corresponding hashes) -- it's hard to beat the simplicity it provides.","","But what about the situation where you don't know what commits you want? Thankfully git has you covered there as well! We can use interactive rebasing for this -- it's the best way to review a series of commits you're about to rebase.","","Let's dive into the details..."]}},{type:"ModalAlert",options:{markdowns:["All interactive rebase means is using the `rebase` command with the `-i` option.","","If you include this option, git will open up a UI to show you which commits are about to be copied below the target of the rebase. It also shows their commit hashes and messages, which is great for getting a bearing on what's what.","",'For "real" git, the UI window means opening up a file in a text editor like `vim`. For our purposes, I\'ve built a small dialog window that behaves the same way.']}},{type:"ModalAlert",options:{markdowns:["When the interactive rebase dialog opens, you have the ability to do 3 things:","","* You can reorder commits simply by changing their order in the UI (in our window this means dragging and dropping with the mouse).","* You can choose to completely omit some commits. This is designated by `pick` -- toggling `pick` off means you want to drop the commit.","* Lastly, you can squash commits. Unfortunately our levels don't support this for a few logistical reasons, so I'll skip over the details of this. Long story short, though -- it allows you to combine commits.","","Great! Let's see an example."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["When you hit the button, an interactive rebase window will appear. Reorder some commits around (or feel free to unpick some) and see the result!"],afterMarkdowns:["Boom! Git copied down commits in the exact same way you specified through the UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["To finish this level, do an interactive rebase and achieve the order shown in the goal visualization. Remember you can always `undo` or `reset` to fix mistakes :D"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","Git cherry-pick est pratique quand vous savez exactement quels commits vous voulez (_et_ que vous connaissez leurs identifiants) -- il est difficile de battre la simplicité qu'il procure.","","Mais que faire quand vous ne connaissez pas les identifiants des commits ? Heureusement git a pensé à vous dans pour ce cas-là ! Nous pouvons utiliser un rebase interactif pour cela -- c'est la meilleure façon de reconsidérer une série de commits que vous vous apprêtez à rebaser.","","Allons un peu plus dans les détails ..."]}},{type:"ModalAlert",options:{markdowns:["Tout rebase interactif signifie utiliser la commande `rebase` avec l'option `-i`.","","Si vous mettez cette option, git va ouvrir une interface graphique pour vous montrer quels commits vont être copiés en dessous de la cible sur laquelle vous rebasez. Elle vous montre aussi les identifiants et commentaires des commits, ce qui est pratique pour s'orienter parmi les commits.","","Pour le \"vrai\" git, l'interface graphique correspond en fait à ouvrir un fichier dans un éditeur de texte comme `vim`. Pour notre exemple, j'ai construit une petite fenêtre de dialogue qui se comporte de la même façon."]}},{type:"ModalAlert",options:{markdowns:["Quand le rebase interactif s'ouvre, vous avez la possibilité de faire 3 choses :","","* Vous pouvez réarranger les commits simplement en changeant leur ordre dans l'interface graphique (dans notre fenêtre de dialogue, cela signifie déplacer les objets dedans avec la souris -- drag and drop).","* Vous pouvez omettre certains commits. Cela est désigné par  `pick` -- cliquer sur `pick` désélectionne/resélectionne le commit.","* Enfin, vous pouvez écraser des commits. Malheureusement notre niveau ne supporte pas cette option, nous allons donc sauter les détails concernant cette possibilité. Pour faire court, cela vous permet de mélanger des commits.","","Super ! Voyons un exemple."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Quand vous activez le bouton, une fenêtre de rebase interactif va s'ouvrir. Reordonnez quelques commits (ou supprimez-en certains) et regardez le résultat !"],afterMarkdowns:["Boum ! Git a copié les commits de la même manière que vous l'aviez spécifié."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, faites un rebase interactif et atteignez l'ordre indiqué dans le fenêtre d'objectif. Souvenez-vous que vous pouvez toujours exécuter les commandes `undo` ou `reset` pour réparer vos erreurs :D"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git interactive rebase","","當你知道你要複製哪些 commit（而且你也知道他們所對應的 hash 值），那麼 `git cherry-pick`  很適合你。","","但是如果你不知道你要的是哪些 commit 呢？ 很幸運的是，git 也有考慮到這個問題喔！我們可以用互動式的 rebase 來做到，當你想要檢查你想要的 commit 的時候，這會是最好的方法。","","讓我們來看一下這些細節..."]}},{type:"ModalAlert",options:{markdowns:["互動式的 rebase 相當於使用 rebase 這個指令的時候，後面加上一個 `-i` 的選項。","","如果你有包含了這個選項，git 就會打開一個 UI，讓你知道說有哪些 commit 會被複製下來，它也會告訴你它們的 hash 值以及可以讓你知道它們是什麼的訊息。","",'在"實務上"，UI 會利用一個編輯器（例如 vim）打開一個檔案，對於我們來說，我已經設計了一個有同樣功能的對話視窗。']}},{type:"ModalAlert",options:{markdowns:["當互動式的 rebase 的對話視窗打開之後，你就可以做到三件事情：","","* 你可以藉由改變這些 commit 在 UI 的位置（在我們的視窗中，可以透過滑鼠去拖拉），來重新排序它們的順序。","* 你可以選擇完全忽略掉某些 commit，可以用滑鼠按一下，使它變暗，就表示你要忽略掉該 commit。","* 最後, 你可以把 commit 合併在一起，但基於某些理由，在我們的關卡裡面並沒有這個功能。","","太棒了！讓我們來看一個例子！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["當你按下按鈕的時候，一個互動式的 rebase 的視窗就會跳出來，重新排序一些 commit（大膽忽略掉某些 commit），然後看一下結果吧！"],afterMarkdowns:["看吧！ git 根據你所選擇的 commit，把它們複製了下來。"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，使用互動式的 rebase，並且完成視覺化目標所表示 commit 的順序，記住！你可以經常使用 `undo` 或者 `reset` 來修正你的一些錯誤:D"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Interactive Rebase","","如果你知道你所需要的提交对象(相应的hash), 那用Git cherry-pick 就非常方便了 -- 很难有简单的方式了","","但是如果你不清楚你想要的提交对象的hash呢? 幸好git 帮你想到了这一点, 我们可以利用交互rebase -- 如果你想衍合一系列的提交, 这就是最方便的方法了","","让我们看看细节.."]}},{type:"ModalAlert",options:{markdowns:["交互式rebase 指的是rebase 后跟一个参数: `-i`","","如果你包含了这个选项, git 会开启一个UI 并 展示出将要被复制到目标的提交对象, 它也会显示它们的提交hash 和 信息","","真实的git , UI 窗口指的是在类似于vim的文本编辑器中打开一个文件. 考虑到我们的目标, 我建立了一个小型的会话窗口以完成相同的事儿."]}},{type:"ModalAlert",options:{markdowns:["当rebase会话窗口打开时, 你能做3件事:","","* 你可以在UI中做 提交对象的排序(在我们的窗口中, 这意味着你可以拖放完成这点)","* 你可以忽略某些提交 -- pick 会变暗","* 最后, 你可以合并提交. 遗憾的是我们的课程不支持此功能.","","好! 看看例子"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["当你点这个按钮时, 一个交互式的rebase窗口就会出现. 对提交对象做个排序, 再看看结果"],afterMarkdowns:["按照你指定的方式, git 克隆了这些提交"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成本节, 做一个交互式的rebase , 实现虚拟目标窗口中提示的提交顺序. 记住,  你随时都可以用`undo`, `reset`修复你的错误"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## git rebase interactivo","","git cherry-pick es genial cuando sabés cuáles commits querés (_y_ sabés sus hashes) -- es dificil superar la simpleza que provee.","","Pero ¿qué pasa cuando no sabés qué commits querés? Por suerte ¡git te cubre en esta situación, también! Podemos usar el rebase interactivo para esto -- es la mejor manera de revisar una serie de commits que estás por rebasear.","","Entremos en los detalles..."]}},{type:"ModalAlert",options:{markdowns:["Todo rebase interactivo significa usar el comando `rebase` con la opción `-i`.","","Si incluís esta opción, git abrirá una UI para mostrarte qué commits están a punto de ser copiados sobre el objetivo del rebase. También muestra sus hashes y mensajes, que ayuda mucho para saber qué es cada commit.","",'Para el git "de verdad", la UI signfica abrir un archivo en un editor de textos como `vim`. Para nuestro propósito, hice una pequeña interfaz que se comporta de ese mismo modo.']}},{type:"ModalAlert",options:{markdowns:["Cuando el diálogo de rebase interactivo se abre, tenés la capacidad de hacer 3 cosas:","","* Podés reordenar los commits con solamente cambiar su orden en la UI (en nuestra ventana, eso significa hacer drag & drop con el mouse).","* Podés elegir ignorar completamente algunos commits. Esto se designa con `pick` -- no hacerle `pick` a algún commit significa que querés ignorarlo.","* Finalmente, podés _squashear_ commits. Desafortunadamente, nuestros niveles no soportan esto por cuestiones logísticas, por lo que voy a ahorrarte los detalles. Haciéndola corta, te permite combinar varios commits en uno solo.","","¡Genial! Veamos un ejemplo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cuando apretes el botón, va a aparecer una ventana de rebase interactivo. Reordená los commits (sentite libre de ignorar alguno, también) ¡y mirá el resultado!"],afterMarkdowns:["¡Boom! Git copió los commits exactamente de la misma manera que lo especificaste en la UI"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar el nivel, hacé un rebase interactivo y alcanzá el orden que se muestra en la visualización objetivo. Acordate que siempre podés hacer `undo` y `reset` para arreglar errores :D"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Rebase Interativo do Git","","O cherry-pick é ótimo quando você sabe de antemão quais commits você quer (_e_ você sabe os hashes correspondentes) -- é difícil bater a simplicidade que ele oferece.","","Mas e quando você não sabe quais commits você quer? Felizmente o git pode te ajudar nesta situação também! Podemos usar o rebase interativo para isso -- trata-se da melhor forma de rever uma série de commits sobre os quais você está prestes a fazer um rebase.","","Mergulhemos nos detalhes..."]}},{type:"ModalAlert",options:{markdowns:["O rebase interativo é simplesmente o comando `rebase` com a opção `-i`.","","Se você incluir essa opção, o git abrirá uma interface para mostrar quais commits estão prestes a serem copiados abaixo do alvo do rebase. Ele também mostra os hashes e as mensagens dos commits, o que é ótimo para ter noção do que é o que.","",'No git "de verdade", a interface nada mais é que um arquivo aberto em um editor de texto (por exemplo o `vim`). Para os nossos propósitos, eu montei uma pequena janela que se comporta da mesma forma.']}},{type:"ModalAlert",options:{markdowns:["Quando a janela de rebase interativo abrir, você pode fazer 3 coisas diferentes:","","* Você pode reordenar os commits simplesmente mudando sua ordem na interface (na nossa janela isso significa arrastar e soltar com o mouse).","* Você pode escolher simplesmente omitir alguns commits. Para isso, clique no botão `pick` -- deixar o `pick` desligado significa que você quer descartar o commit.",'* Por fim, você pode "esmagar" (fazer squash) nos commits. Infelizmente, nosso tutorial não será capaz de cobrir essa funcionalidade por alguns motivos logísticos, então vamos pular os detalhes disto. Em resumo, no entanto, o squash permite que você combine commits.',"","Ótimo! Vejamos um exemplo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Quando você clicar o botão, uma janela de rebase interativo se abrirá. Reordene alguns commits da forma como você preferir (ou sinta-se livre para desmarcar o `pick` de alguns) e veja o resultado!"],afterMarkdowns:["Boom! O Git copiou alguns commits exatamente da mesma forma que você os especificou na janela"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para finalizar este nível, faça um rebase interativo e obtenha a ordem mostrada na visualização do objetivo. Lembre-se que você pode usar os comandos `undo` ou `reset` para corrigir erros :D"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Interaktiver Rebase","","Cherry-pick ist großartig wenn du genau weißt, welche Commits du willst (_und_ ihre jeweiligen Hashes kennst) -- es ist dann schwer an Einfachheit zu überbieten.","","Aber wie sieht es aus, wenn du die Commits nicht genau kennst, die du brauchst? Zum Glück bietet Git auch dafür eine Lösung an. Das können wir mit interaktivem Rebase machen -- die beste Art sich eine Serie von Commits in einem Rebase genau anzusehen.","","Schauen wir uns die Details an ..."]}},{type:"ModalAlert",options:{markdowns:["Interaktives Rebase bedeutet einfach nur, dass man dem `rebase` Befehl die Option `-i` hinzufügt.","","Wenn du das machst, zeigt Git dir jeden einzelnen Commit, der durch den Rebase kopiert werden würde. Es zeigt dir die Hashes und Kommentare, was gut ist um einen Überblick zu bekommen.","","In echtem Git besteht dieser Dialog daraus, die Commits in einem Text-Editor angezeigt zu bekommen. Für unsere Zwecke hab ich ein kleines Dialog-Fenster gebaut, dass sich ähnlich verhält."]}},{type:"ModalAlert",options:{markdowns:["Wenn sich der Dialog für den interaktiven Rebase öffnet, kannst du drei Dinge tun:","","* Du kannst die Reihenfolge der Commits durch Ziehen und Ablegen ändern.","* Du kannst Git sagen, einen Commit beim Rebase zu ignorieren -- im Dialog durch die Schaltfläche `pick` dargestellt.","* Außerdem kannst du Commit zusammenfassen (squash). Leider wird das hier nicht unterstützt, aber in echtem Git fasst es Commits zu einem zusammen.","","Super! Schauen wir uns ein Beispiel an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn du die Schaltfläche anklickst wird sich der Rebase-Dialog öffnen. Veränder die Reihenfolge der Commits oder klick bei einigen auf `pick` und schau dir das Ergebnis an."],afterMarkdowns:["Bämm! Git hat die Commits genau so kopiert, wie du es ausgewählt hast."],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level zu schaffen mach einen interaktiven Rebase, um genau doie Reihenfolge zu erzeugen die im Ziel-Baum angezeigt wird. Denk daran, dass du jederzeit mit `undo` oder `reset` Fehler rückgängig machen kannst. :D"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git インタラクティブrebase","","どのコミットを操りたいか（そしてそれを指定するハッシュ）がわかる時にGit cherry-pickはとても便利で、その簡単さはとてもありがたいです。 ","","しかし、どのコミットを操りたいかがわからない時はどうでしょう？ありがたいことに、そんな時にぴったりのコマンドがgitにその備わっています。このためにgitのインタラクティブrebaseを使えます。rebaseしたい一連のコミットを一括で見るベストな方法です。","","具体的に見てみましょう..."]}},{type:"ModalAlert",options:{markdowns:["インタラクティブrebaseとは単に、`rebase`コマンドに`-i`オプションを合わせて使うことです。","","このオプションをつければ、gitがインタフェースを開き、どのコミットがrebase対象の下にコピーされるかを確認できます。それらのコミットのハッシュやメッセージも表示され、rebaseの概要を一眼で見るのに便利です。","",'"ホンモノ"のgitでは、その「インターフェース」とは`vim`などのテキストエディタの中でファイルが開くだけです。ここでコンセプトを見せるために同じような動作をする小さなダイアログウィンドウを作りました。']}},{type:"ModalAlert",options:{markdowns:["インタラクティブrebaseダイアログが開くと、３つの操作から選べます:","","* UIウィンドウのなかで順番を調整するだけでコミットの順番を変えられます（こちらのダイアログでは、マウスでドラッグアンドドロップで操作します）。","* 特定のコミットを丸ごと除くこともできます。除きたいコミットを指定するには`pick`をオフにします。","* 最後に、コミットを組み合わせられます。技術的に制限があるため、あいにくこちらのレベルには出てきませんがのでその詳細の説明を省きますが、短く言いますと、複数のコミットを一つにまとめることができる機能です。","","さて、例を見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["ボタンを押せば、インタラクティブrebaseウィンドウが現れます。コミットの順番を変更したり、`pick`を外したりしてみて、その結果を見てみましょう！"],afterMarkdowns:["よっしゃー。gitがUIで指定されたようにコミットをコピーしました！"],command:"git rebase -i HEAD~4 --aboveAll",beforeCommand:"git commit; git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするにはインタラクティブrebaseを実行し、ゴールのビジュアライズに表示されている順番を実現しましょう。ミスがあれば`undo`や`reset`で修正できるのをお忘れなく。"]}}]}}}
},{}],90:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"C3","id":"HEAD"}}',solutionCommand:"git checkout bugFix^",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C4","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Relative Refs (^)",fr_FR:"Références relatives (^)",ja:"相対リファレンス (^)",zh_CN:"相对引用(^)",zh_TW:"相對引用（^）",es_AR:"Referencias relativas (^)",pt_BR:"Referências relativas (^)",de_DE:"Relative Referenzen (^)"},hint:{en_US:"Remember the Caret (^) operator!",fr_FR:"Rappelez-vous de l'opérateur circonflexe (^)",de_DE:"Denk an den Dach-Operator (^)!",es_AR:"¡No te olvides del operador ^!",pt_BR:"Não se esqueça do operador circunflexo (^)",zh_CN:"记住插入(^)操作符!",zh_TW:"不要忘記插入（^）符號！"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Relative Refs","","Moving around in Git by specifying commit hashes can get a bit tedious. In the real world you won't have a nice commit tree visualization next to your terminal, so you'll have to use `git log` to see hashes.","","Furthermore, hashes are usually a lot longer in the real Git world as well. For instance, the hash of the commit that introduced the previous level is `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Doesn't exactly roll off the tongue...","","The upside is that Git is smart about hashes. It only requires you to specify enough characters of the hash until it uniquely identifies the commit. So I can type `fed2` instead of the long string above."]}},{type:"ModalAlert",options:{markdowns:["Like I said, specifying commits by their hash isn't the most convenient thing ever, which is why Git has relative refs. They are awesome!","","With relative refs, you can start somewhere memorable (like the branch `bugFix` or `HEAD`) and work from there.","","Relative commits are powerful, but we will introduce two simple ones here:","","* Moving upwards one commit at a time with `^`","* Moving upwards a number of times with `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's look at the Caret (^) operator first. Each time you append that to a ref name, you are telling Git to find the parent of the specified commit.","",'So saying `master^` is equivalent to "the first parent of `master`".',"","`master^^` is the grandparent (second-generation ancestor) of `master`","","Let's check out the commit above master here"],afterMarkdowns:["Boom! Done. Way easier than typing the commit hash"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["You can also reference `HEAD` as a relative ref. Let's use that a couple of times to move upwards in the commit tree"],afterMarkdowns:["Easy! We can travel backwards in time with `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["To complete this level, check out the parent commit of `bugFix`. This will detach `HEAD`.","","You can specify the hash if you want, but try using relative refs instead!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Références relatives","","Se déplacer dans Git en spécifiant des identifiants de commits (hashes) peut être un peu agaçant. Dans le monde réel vous n'aurez pas une vue sur un joli arbre des commits à côté de votre terminal, ainsi vous aurez à utiliser `git log` pour connaître les identifiants.","","De plus, les identifiants sont plus longs dans le vrai monde de Git qu'ici. Par exemple, l'identifiant du commit introduit au précédent niveau était `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Difficilement mémorisable ...","","Le côté positif est que Git est intelligent avec les identifiants. Vous avez seulement à spécifier les premiers caractères de l'identifiant jusqu'à ce qu'il reconnaisse exactement le commit. Ainsi je peux taper `fed2` au lieu de la longue chaîne ci-dessus."]}},{type:"ModalAlert",options:{markdowns:["Comme je l'ai dit, spécifier un commit par son identifiant n'est pas très convénient, c'est pourquoi Git a des références relatives. Elles sont géniales !","","Avec les références relatives vous pouvez commencer par vous placer à un endroit mémorisable (comme la branche `bugFix` ou `HEAD`) et travailler depuis ici.","","Les commits relatifs sont puissants, et on va en introduire deux simples ici :","","* Revenir d'un commit en arrière avec `^`","* Revenir de plusieurs en arrière avec `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Regardons l'opérateur circonflexe (^) d'abord. Chaque fois que vous le faites suivre un nom de référence, vous êtes en train de demander à Git de trouver le parent du commit spécifié.","",'Ainsi, `master^` est équivalent à "le premier parent de `master`".',"","`master^^` est le grand-parent (ancêtre de seconde génération) de `master`","","Faisons un checkout du commit avant master."],afterMarkdowns:["Boum ! Fini. Bien plus facile qu'écrire l'identifiant du commit."],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vous pouvez aussi utiliser `HEAD` comme une référence relative. Utilisons cela plusieurs fois pour remonter l'arbre des commits."],afterMarkdowns:["Facile ! Nous pouvons voyager dans le temps avec `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Pour compléter ce niveau, faites un checkout du commit parent de `bugFix`. Cela va détacher `HEAD`.","","Vous pouvez spécifier l'identifiant du commit si vous voulez, mais essayez plutôt d'utiliser les références relatives !"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Relative Referenzen","","Es kann etwas mühselig werden, sich in einem Commit-Baum mittels Angabe der Hashes zu bewegen. Im echten Leben hat man normalerweise keine hübsche Visualisierung des Baumes neben seinem Terminal, also benutzt man `git log` um die Hashes zu sehen.","","Außerdem sind die echten Hashes sehr viel länger und nicht fortlaufend nummeriert. Beispielsweise heißt der Hash, mit dem ich den letzten Level committet habe, in echt `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Nicht gerade einprägsam ...","","Zum Glück ist Git intelligent wenn es um die Hashes geht. Du musst nur soviele Zeichen eines Hashes angeben, bis der Hash eindeutig ist. Ich kann also `fed2` eingeben anstatt die komplette Zeichenkette tippen zu müssen."]}},{type:"ModalAlert",options:{markdowns:["Wie ich schon sagte: Commits über ihren Hash zu referenzieren ist nicht gerade der bequemste Weg. Weshalb es in Git relative Referenzen gibt. Welche super sind!","","Mit relativen Referenzen kann man bei einem leicht zu merkenden Bezeichner anfangen (zum Beispiel dem Branch-Namen `bugFix` oder der Referenz `HEAD`) und sich von dort vorarbeiten.","","Relative Referenzierung von Commits kann komplex sein, aber wir starten mit zwei einfachen Beispielen:","","* Geh einen Commit zurück mit `^`","* Geh eine bestimmte Anzahl von Commits zurück mit `~<Anzahl>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns zuerst den Dach-Operator (`^`) an. Jedes mal wenn du ihn hinter einen Referenz-Namen setzt, sagst du Git damit, dass es zum Vorgänger des angegebenen Commits gehen soll.","",'Das heißt `master^` ist gleichbedeutend mit "direkter Vorgänder des Commits, auf den `master` zeigt".',"","`master^^` ist also der Vorgänger des Vorgängers von `master`.","","Wir checken jetzt mal den Commit vor `master` aus:"],afterMarkdowns:["Bämm! Fertig. Einfacher, als den Commit-Hash zu tippen (oder zu kopieren)."],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Du kannst auch `HEAD` als Basis für relative Referenzen benutzen. Lass uns das ein paar Mal verwenden, um uns im Commit-Baum nach oben zu bewegen."],afterMarkdowns:["Das war einfach. Wir reisen mit `HEAD^` in der Zeit zurück."],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level abzuschließen musst du den direkten Vorgänger von `bugFix` auschecken. Dadurch wirst du `HEAD` von `bugFix` abkoppeln.","","Du kannst natürlich den Hash angeben, aber versuch doch relative Referenzen zu benutzen!"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Referencias relativas","","Moverse por git usando los hashes de los commits puede volverse un tanto tedioso. En el mundo real no vas a tener una visualización de commits tan linda en la terminal, así que vas a tener que usar `git log` para ver los hashes.","","Peor aún, los hashes en general son mucho más largos en el git real, también. Por ejemplo, el hash del commit que introduje en el nivel anterior es `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. No es algo particularmente fácil de nombrar...","","Lo copado es que git es bastante astuto con los hashes. Sólo requiere que especifiques una cantidad de caracteres suficientes para identificar unívocamente al commit. Entonces, yo podría simplemente tipear `fed2` en lugar de esa cadena larga de arriba."]}},{type:"ModalAlert",options:{markdowns:["Como ya dije, especificar los commits por su hash no es la manera más conveniente, y por eso git tiene referencias relativas. ¡Son geniales!","","Con las referencias relativas podés arrancar de algún lugar recordable (como la rama `bugFix`, o `HEAD`) y manejarte desde ahí.","","Los commits relativos son poderosos, pero ahora vamos a presentar sólo dos formas simples:","","* Moverse un commit atrás con `^`","* Moverse una cantidad de commits atrás con `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos el operador ^ primero. Cada vez que le agregás eso al nombre de una referencia, le estás diciendo a git que use el padre del commit especificado.","",'Entonces, decir `master^` es equivalente a "el primer padre de `master`".',"","`master^^` es el _abuelo_ (segunda generación de ancestros) de `master`","","Veamos el commit que está antes de master acá"],afterMarkdowns:["¡Boom! Ahí está. Mucho más simple que tipear el hash de ese commit"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["También podés referenciar a `HEAD` como una referencia relativa. Usémoslo un par de veces para movernos hacia atrás en nuestro árbol"],afterMarkdowns:["¡Fácil! Podemos volver en el tiempo con `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, checkouteá el padre del commit de `bugFix`. Esto va a detachear a `HEAD`.","","Podés especificar el hash si querés, pero mejor ¡tratá de usar la referencia relativa!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Referências relativas","","Mover-se pela árvore do Git especificando o hash do commit pode se tornar um pouco entediante. No mundo real, você não terá à sua disposição essa bonita visualização da árvore ao lado do seu terminal, então você terá de usar o comando `git log` para ver os hashes.","","Além disso, os hashes são geralmente muito maiores no mundo real. Por exemplo, o hash do commit que introduziu o nível de exercícios anterior é `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`. Não é algo exatamente fácil de lembrar.","","O que salva é que o Git é inteligente com os hashes. Ele só exige que você especifique a quantidade de caracteres do hash suficiente para identificar unicamente o commit. Então eu posso digitar apenas `fed2` em vez da grande string acima."]}},{type:"ModalAlert",options:{markdowns:["Como eu disse, especificar commits pelo hash não é a sempre o mais conveniente, e é por isso que o Git suporta referências relativas. Elas são fantásticas!","","Com referências relativas, você pode começar a partir de um ponto fácil de lembrar (como o ramo `bugFix` ou o `HEAD`) e referenciar a partir dali.","","Commits relativos são poderosos, mas vamos introduzir apenas dois tipos simples aqui:","","* Mover para cima um commit por vez com `^`","* Mover para cima um número de vezes com `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos dar uma olhada no operador circunflexo (^) primeiro. Cada vez que você adicioná-lo a um nome de referência, você está dizendo ao Git para encontrar o pai do commit especificado.","",'Então, dizer `master^` é equivalente a "o primeiro pai do `master`".',"","`master^^` é o avô (ancestral de segunda geração) do `master`","","Vamos fazer checkout do commit logo acima do master"],afterMarkdowns:["Boom! Pronto. Muito mais fácil que digitar o hash do commit"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Você também pode usar o `HEAD` como parte de uma referência relativa. Vamos usar isso para nos mover para cima algumas vezes na árvore de commits"],afterMarkdowns:["Fácil! Podemos viajar para trás no tempo com `HEAD^`"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar esse nível, faça checkout do commit pai de `bugFix`. Isso soltará o `HEAD`.","","Você pode especificar o hash se quiser, mas tente usar referências relativas em vez disso!"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 相对引用","","用指定提交记录hash值的方式在Git中移动会变得比较乏味。在现实中，你不会有漂亮的可视化的提交记录树放在终端旁边，所以你不得不用`git log`来查看hash值。","","另外，hash值在真实的Git环境中也会更长。举个例子，前一关的介绍中的提交记录的hash值是`fed2da64c0efc5293610bdd892f82a58e8cbc5d8`。不要把舌头闪了...","","好的一面是，Git对hash的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。所以，我可以仅输入`fed2`而不是上面的一长串字符。"]}},{type:"ModalAlert",options:{markdowns:["我说过，通过hash指定提交记录不是很方便，所以Git引入了相对引用。这个就很牛掰了!","","使用相对引用，你可以从一个易于记忆的地方（比如分支名`bugFix`或`HEAD`）开始工作。","","相对引用非常给力，这里我介绍两个简单的用法：","","* 使用`^`向上移动1个提交记录","* 使用`~<num>`向上移动多个提交记录"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["首先看看插入(^)操作符。把插入符跟在引用名后面，表示让Git寻找指定提交记录的父提交。","",'所以`master^`相当于"`master`的父提交"。',"","`master^^`是`master`的父父提交（上上代祖先）","","切换到master的父提交"],afterMarkdowns:["唰！搞定。这种方式比输入提交记录的hash值简单多了！"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你也可以`HEAD`把用作相对引用。以下命令使用`HEAD`在提交树中向上移动几次。"],afterMarkdowns:["简单！我们可以一直使用`HEAD^`向上移动。"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成此关，切换到`bugFix`的父提交。这会分离出`HEAD`.","","如果你愿意的话，使用hash值也可以过关，但为何不试试使用相对引用呢？"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 相對引用","","如果要在 git 中移動，透過指定 commit 的 hash 值的方式會變得比較麻煩。在實際例子中，你的終端機上面不會出現漂亮且具備視覺效果的 commit tree，所以你不得不用 `git log` 來查詢 hash 值。","","另外，hash 值的長度在真實的 git 環境中很長。舉個例子，前一個關卡的介紹中的 commit 的 hash 值是 `fed2da64c0efc5293610bdd892f82a58e8cbc5d8`。舌頭不要打結了...","","幸運的是，git 對於處理 hash 值很有一套。你只需要提供能夠唯一辨識出該 commit 的前幾個字元就可以了。所以，我可以只輸入 `fed2` 而不是上面的一長串字元。"]}},{type:"ModalAlert",options:{markdowns:["我說過，透過 hash 值來指定 commit 不是很方便，所以 git 加入了相對引用。這個就很厲害了!","","使用相對引用，你可以從一個易於記憶的地方（比如說 branch 名稱 `bugFix` 或 `HEAD`）開始工作。","","相對引用非常好用，這裡我介紹兩個簡單的用法：","","* 使用 `^` 向上移動一個 commit","* 使用 `~<num>` 向上移動多個 commit"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["首先看看插入（^）這一個符號。把這個符號接在某一個 reference 後面，就表示你告訴 git 去找到該 reference 所指向的 commit 的 parent commit。","",'所以 `master^` 相當於 "`master` 的 parent commit"。',""," `master^^` 是 `master` 的 grandparent commit（往前推兩代）","","切換到 master的 parent commit"],afterMarkdowns:["看吧！完成了。這種方式比輸入代表 commit 的 hash 值簡單多了！"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你也可以把 `HEAD` 當作相對引用。以下指令使用 `HEAD` 在 commit tree 中向上移動數次。"],afterMarkdowns:["簡單吧！我們可以一直使用 `HEAD^` 向上移動。"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這一關，切換到 `bugFix` 的 parent commit。這會分離出 `HEAD`。","","如果你願意的話，透過直接指定 hash 值的方式也可以過關，但是還是試試看相對引用吧！"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 相対リファレンス","","コミットのハッシュを利用してgitの中で移動するのも少し疲れる時もあります。現実の世界では、このチュートリアルのようにターミナルの隣に見やすいツリーのビジュアライズがないので、ハッシュを見るには`git log`を使う必要があります。","","その上、実際のハッシュはこちらで見たものよりずっと長いです。例えば、先ほどのレベルの紹介のコミットハッシュは`fed2da64c0efc5293610bdd892f82a58e8cbc5d8`です。少し覚えにくいですね...","","そのため、gitでは手短くコミットを指定する方法があります。ユニークな存在だと確認できるだけのハッシュの字数を入力すれば良いですー上記の長い文字列の代わりに`fed2`を入力するだけで済みます。"]}},{type:"ModalAlert",options:{markdowns:["先ほど言いましたように、ハッシュでコミットを指定するのがめんどくさくなる時もあるので、gitには相対リファレンスという素晴らしい機能があります。","","相対リファレンスを使うことで、覚えやすい位置（例えば`bugFix`ブランチや`HEAD`）から始め、そのところから相対的な位置を指定できます。","","相対コミットは強力ですが、ここでは二つをご紹介します:","","* 一つずつ上へ移動させる`^`（カレット）","* 複数回上へ移動させる `~<num>`"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["まずはカレット(^)から始めましょう。リファレンス名にカレットを追加すると、指定コミットの親コミットを見つけるようにとgitに命令を出しています。","",'なので `master^`と記述すれば、"`master`の一個上の親"、という意味になります。',"","そして`master^^`とはその親の一つの上のコミット(２代目の先祖)を指します。","","masterの上のコミットをここで見てみましょう"],afterMarkdowns:["やりました！コミットハッシュを書くよりずっと簡単ですね。"],command:"git checkout master^",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`HEAD`を相対リファレンスとして参照することもできます。 ここで数回そのコマンドを使い、コミットツリーの中で上へと移動しましょう。"],afterMarkdowns:["簡単ですね!`HEAD^`で時間を巻き戻せます。"],command:"git checkout C3; git checkout HEAD^; git checkout HEAD^; git checkout HEAD^",beforeCommand:"git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするには、`bugFix`の親コミットをチェックアウトしてください。その操作により`HEAD`が分離されます。","","ハッシュを使用してもいいですが、その代わりに相対リファレンスをトライしてみましょう！"]}}]}}}},{}],91:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master"},"bugFix":{"target":"C0","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"C1","id":"HEAD"}}',solutionCommand:"git branch -f master C6;git checkout HEAD~1;git branch -f bugFix HEAD~1",startTree:'{"branches":{"master":{"target":"C4","id":"master"},"bugFix":{"target":"C5","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C3"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"C2","id":"HEAD"}}',hint:{en_US:"You'll need to use at least one direct reference (hash) to complete this level",fr_FR:"Vous aurez besoin d'utiliser au moins une référence directe (hash) pour compléter ce niveau.",zh_CN:"这一关至少要用到一次直接引用(hash)",zh_TW:"這一關至少要用到一次直接參考（hash）",es_AR:"Vas a necesitar usar al menos una referencia directa (hash) para completar este nivel",pt_BR:"Você precisará usar pelo menos uma referência direta (hash) para completar este nível",de_DE:"Du musst mindestens einen Hash benutzen, um dieses Level zu schaffen",ja:"このレベルをクリアするには少なくとも一つの直接リファレンス（hash）を使用する必要があります"},name:{en_US:"Relative Refs #2 (~)",de_DE:"Relative Referenzen #2 (~)",ja:"相対リファレンス　その２ (~)",es_AR:"Referencias relativas #2 (~)",pt_BR:"Referências relativas #2 (~)",fr_FR:"Références relatives #2 (~)",zh_CN:"相对引用2(~)",zh_TW:"相對引用二（~）"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:['### The "~" operator',"","Say you want to move a lot of levels up in the commit tree. It might be tedious to type `^` several times, so Git also has the tilde (~) operator.","","","The tilde operator (optionally) takes in a trailing number that specifies the number of parents you would like to ascend. Let's see it in action"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's specify a number of commits back with `~`."],afterMarkdowns:["Boom! So concise -- relative refs are great."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","You're an expert on relative refs now, so let's actually *use* them for something.","","One of the most common ways I use relative refs is to move branches around. You can directly reassign a branch to a commit with the `-f` option. So something like:","","`git branch -f master HEAD~3`","","Moves (by force) the master branch to three parents behind HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see that previous command in action"],afterMarkdowns:["There we go! Relative refs gave us a concise way to refer to `C1` and branch forcing (`-f`) gave us a way to quickly move a branch to that location"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Now that you have seen relative refs and branch forcing in combination, lets use them to solve the next level.","","To complete this level, move `HEAD`, `master`, and `bugFix` to their goal destinations shown."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:['### El operador "~"',"","Digamos que querés moverte un montón de niveles atrás en tu árbol de commits. Podría ser tedioso tipear `^` muchas veces, por lo que git tiene el operador ~.","","","El operador ~ (opcionalmente) toma una cantidad que especifica la cantidad de padres que querés volver hacia atrás. Veámoslo en acción"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Especifiquemos una cantidad de commits hacia atrás con `~`."],afterMarkdowns:["¡Boom! Bien conciso -- las referencias relativas la rompen."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Forzando los branches","","Ahora que sos un experto en las referencias relativas, *usémoslas* para algo.","","Una de las formas más comunes en que uso las referencias relativas es para mover las ramas. Podés reasignar directamente una rama a un commit usando la opción `-f`. Así que algo como:","","`git branch -f master HEAD~3`","","Mueve (forzadamente) la rama master tres padres atrás de HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos ese comando previo en acción"],afterMarkdowns:["¡Ahí vamos! Las referencias relativas nos dieron una manera concisa de referenciar a `C1`, y forzar la rama (`-f`) nos dio una manera rápida de mover la rama a esa ubicación"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Ahora que viste las referencias relativas y el forzar ramas combinados, usémoslos para resolver el siguiente nivel.","","Para completar este nivel, mové `HEAD`, `master` y `bugFix` a sus destinos finales."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:['### O operador "~"',"","Digamos que você queira se mover vários níveis para cima na árvore de commits. Pode ser entediante digitar `^` várias vezes, e por isso o Git possui também o operador til (`~`).","","","Um número pode ser passado (opcionalmente) após o operador til, especificando o número de ancestrais que você deseja subir. Vamos vê-lo em ação"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos especificar um número de commits para trás com `~`."],afterMarkdowns:["Boom! Tão conciso -- referências relativas são incríveis."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Forçando os ramos","","Agora que você é um especialista em referências relativas, vamos *usá-las* de fato para alguma coisa.","","Uma das situações mais comuns na qual eu uso referências relativas é quando quero trocar ramos de lugar. Você pode redefinir diretamente o commit para o qual um ramo aponta com a opção `-f`. Desta forma, o seguinte comando:","","`git branch -f master HEAD~3`","","Move (à força) o ramo master 3 ancestrais acima do HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos o comando anterior em ação"],afterMarkdowns:["Aqui vamos nós! As referências relativas nos deram uma forma concisa de nos referirmos ao `C1`, e a movimentação de ramos (com `-f`) nos deu uma forma de apontar rapidamente um ramo para esse local"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Agora que você viu referências relativas e movimentação de ramos combinadas, vamos usá-las para resolver o próximo nível.","","Para completar este nível, mova o `HEAD` e os ramos `master` e `bugFix` para os destinos mostrados no objetivo."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:['### L\'opérateur "~"',"","Disons que vous souhaitez remonter beaucoup de niveaux dans l'arbre des commits. Cela peut être ennuyeux d'utiliser `^` plusieurs fois, ainsi Git a aussi l'opérateur tilde (~).","","","L'opérateur tilde prend optionnellement à sa suite un nombre qui spécifie le nombre de parents que vous souhaitez remonter. Voyons cela en action"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Spécifions le nombre de commits en arrière avec `~`."],afterMarkdowns:["Boum! Tellement rapide -- les références relatives sont géniales."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Forcer les branches","","Vous êtes maintenant un expert des références relatives, alors servons-nous en.","","L'une des principales façons dont j'utilise les références relatives est pour réorganiser les branches. Vous pouvez directement réassigner les branches à un commit avec l'option `-f`. Ainsi quelque chose comme :","","`git branch -f master HEAD~3`","","bouge (de force) la branche master à trois parents derrière HEAD."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons l'effet de la précédente commande"],afterMarkdowns:["On y est ! Les références relatives nous donne une méthode concise pour référencer `C1` et le forçage de branche (`-f`) nous donne une méthode rapide pour bouger une branche à cette emplacement."],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Maintenant que vous avez vu les références relatives et le forçage de branche, utilisons-les pour résoudre le niveau suivant.","","Pour compléter ce niveau, bouger `HEAD`, `master`, et `bugFix` à leurs destinations désignées."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:['### Der "~"-Operator',"","Nehem wir an du willst viele Schritte im Commit-Baum zurückgehen. Dann wird es schnell mühsam immer wieder `^` einzugeben; deswegen gibt es in Git den Tilde-Operator `~`.","","Der Tilde-Operator akzeptiert optional eine Zahl, mit der du angeben kannst vieviele Vorgänger zu zurückgehen willst. Keine Anzahl anzugeben bewirkt dasselbe wie `~1`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Geben wir mit `~` an wiviele Commits wir zurückgehen wollen"],afterMarkdowns:["Peng! So einfach -- relative Referenzen sind super."],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Erzwungene Branches","","Du bist jetzt Experte in Sachen relative Referenzen, also lass sie uns mal richtig einsetzen.","","Das Verschieben von Branches ist einer der häufigsten Anwendungsfälle dafür. Du kannst einen Branchnamen direkt auf einen bestimmten Commit setzen (_ohne_ ihne vorher ausgecheckt haben zu müssen!) indem du den Parameter `-f` benutzt. So in etwa:","","`git branch -f master HEAD~3`","","Das bewegt (erzwungenermaßen) den `master` auf den Commit drei Vorgänger vor `HEAD`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns das mal in Aktion an:"],afterMarkdowns:["Das war's schon! Relative Referenzen ermüglichen es uns den Commit `C1` sehr einfach anzugeben und `git branch -f` ermöglicht es uns, den Branch sehr schnell auf diesen Commit zu setzen."],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["Jetzt wo du relative Referenzen und erzwungenes Branching in Kombination gesehen hast können wir damit den nächsten Level bewältigen.","","Bewege `HEAD`, `master` und `bugFix` an die jeweils angegebenen Positionen, um diesen Level abzuschließen."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:['### The "~" operator',"","假设需要在提交树中向上移动很多步。使用多个`^`非常无聊，所以Git也引入了波浪(~)操作符。","","","波浪操作符后面可以（可选地）跟一个数字，指定向上移动多少次。看个例子"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用`~`一次后退多步."],afterMarkdowns:["唰！如此简洁--相对引用就是好啊！"],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","你现在是相对引用的高手了，现在*用*他来实际做点事情。","","我使用相对引用最多的就是移动分支。你可以使用`-f`选项把直接让分支指向另一个提交。举个例子:","","`git branch -f master HEAD~3`","","（强制）移动master指向HEAD的第3级父提交。"]}},{type:"ModalAlert",options:{markdowns:["要完成此关，移动`HEAD`，`master`和`bugFix`到目标所示的位置。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:['### "~" 符號',"","假設需要在 commit tree 中向上移動多個 commit。使用太多 `^` 會非常討人厭，所以 git 也加入了波浪（~）符號。","","","波浪符號後面可以選擇一個數字（你也可以不選擇），該數字可以告訴 Git 我要向上移動多少個 commit 。舉個例子"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["使用 `~` 一次往上移動多個 commit。"],afterMarkdowns:["哇！太簡潔了 -- 相對引用真的很好用！"],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["### Branch forcing","","你現在是相對引用的高手了，現在用它來實際做點事情。","","我使用相對引用最多的就是移動分支。你可以使用 `-f` 選項直接讓分支指向另一個 commit。舉個例子:","","`git branch -f master HEAD~3`","","（強制）移動 master 指向從 HEAD 往上數的第三個 parent commit。"]}},{type:"ModalAlert",options:{markdowns:["要完成這一關，移動 `HEAD`，`master` 和 `bugFix` 到目標所示的位置。"]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:['###"~" 演算子',"","コミットツリーの中で複数の段階上へ移動したいとします。毎回毎回`^`と打つのは面倒くさくなるかもしれませんので、gitにはチルダの演算子も備わっています。","","","チルダ演算子のあとには、上へ移動したい親コミットの数を表す数字もオプションでつけられます。実際の動作を見てみましょう。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["遡る前のコミット数を`~`で指定しましょう。"],afterMarkdowns:["よっしゃ！効率が良いですねー相対リファレンスはなんと便利です。"],command:"git checkout HEAD~4",beforeCommand:"git commit; git commit; git commit"}},{type:"ModalAlert",options:{markdowns:["###ブランチの強制","","今はあなたも相対リファレンスの達人なので、実践的な使い方を覚えましょう。","","相対リファレンスのよくある使い方としてあるのは、ブランチの移動です。`-f`オプションを使ってブランチを直接コミットに関連付けられます。次のようになります","","`git branch -f master HEAD~3`","","masterブランチを（強制的に）HEADより親三代前へと移動します。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["先ほどのコマンドの動作を見てみましょう。"],afterMarkdowns:["できました！相対リファレンスを使うことで、手短く`C1`を指定することができ、`-f`でブランチを強制的にそこへ移動することができました。"],command:"git branch -f master HEAD~3",beforeCommand:"git commit; git commit; git commit; git checkout -b bugFix"}},{type:"ModalAlert",options:{markdowns:["相対リファレンスとブランチの強制関連付けを見ましたので、いまここでそれらの方法を使ってみましょう。","","このレベルをクリアするには`HEAD`、`master`、`bugFix`をゴールで指定されている目的位置まで移動してください。"]}}]}}}},{}],92:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%7D%2C%22pushed%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22pushed%22%7D%2C%22local%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22local%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C2%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22pushed%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git reset HEAD~1;git checkout pushed;git revert HEAD",compareOnlyBranches:!0,startTree:'{"branches":{"master":{"target":"C1","id":"master"},"pushed":{"target":"C2","id":"pushed"},"local":{"target":"C3","id":"local"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"local","id":"HEAD"}}',name:{en_US:"Reversing Changes in Git",de_DE:"Änderungen in Git rückgängig machen",ja:"変更を元に戻す",fr_FR:"Annuler des changements avec Git",es_AR:"Revirtiendo cambios en git",pt_BR:"Revertendo mudanças no Git",ko:"Git에서 작업 되돌리기",zh_CN:"在 Git 中撤销更改",zh_TW:"在 git 中取消修改 "},hint:{en_US:"Notice that revert and reset take different arguments.",de_DE:"Beachte, dass revert und reset unterschiedliche Argumente benötigen",fr_FR:"Notez que `revert` et `reset` n'ont pas les mêmes arguments.",es_AR:"Notá que revert y reset toman parámetros distintos",pt_BR:"Lembre que revert e reset recebem parâmetros diferentes",zh_CN:"注意 revert 和 reset 使用不同的参数。",zh_TW:"注意 revert 和 reset 使用不同的參數。",ko:"",ja:"revertとresetとで引数が異なることに注意。"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Reversing Changes in Git","","There are many ways to reverse changes in Git. And just like committing, reversing changes in Git has both a low-level component (staging individual files or chunks) and a high-level component (how the changes are actually reversed). Our application will focus on the latter.","","There are two primary ways to undo changes in Git -- one is using `git reset` and the other is using `git revert`. We will look at each of these in the next dialog",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` reverts changes by moving a branch reference backwards in time to an older commit. In this sense you can think of it as "rewriting history;" `git reset` will move a branch backwards as if the commit had never been made in the first place.',"","Let's see what that looks like:"],afterMarkdowns:["Nice! Git simply moved the master branch reference back to `C1`; now our local repository is in a state as if `C2` had never happened"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'While reseting works great for local branches on your own machine, its method of "rewriting history" doesn\'t work for remote branches that others are using.',"","In order to reverse changes and *share* those reversed changes with others, we need to use `git revert`. Let's see it in action"],afterMarkdowns:["Weird, a new commit plopped down below the commit we wanted to reverse. That's because this new commit `C2'` introduces *changes* -- it just happens to introduce changes that exactly reverses the commit of `C2`.","","With reverting, you can push out your changes to share with others."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["To complete this level, reverse the two most recent commits on both `local` and `pushed`.","","Keep in mind that `pushed` is a remote branch and `local` is a local branch -- that should help you choose your methods."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Revirtiendo cambios en git","","Hay varias maneras de revertir cambios en git. Y, tal como al commitear, revertir cambios en git tiene tanto un componente de bajo nivel (indexar archivos o fragmentos individualmente) como un componente de alto nivel (cómo son efectivamente revertidos los cambios). Nuestra aplicación se va a concentrar en esto último.","","Hay dos formas principales de deshacer cambios en git -- uno es usando `git reset` y el otro es usando `git revert`. Vamos a ver cada uno de esos a continuación",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` revierte los cambios moviendo la referencia de una rama hacia atrás en el tiempo a un commit anterior. En este sentido podés pensarlo como "reescribir la historia". `git reset` va a mover la rama hacia atrás, como si el commit nunca se hubiera hecho.',"","Veamos cómo es eso:"],afterMarkdowns:["¡Genial! git simplemente movió la referencia de la rama master atrás hacia `C1`. Ahora tu repositorio local está en un estado como si `C2` nunca hubiera ocurrido"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Mientras que resetear los cambios funciona genial para ramas locales en tu máquina, su método de "reescribir la historia" no funciona para ramas remotas que otros están usando.',"","Para revertir cambios y *compartir* esa _revertida_ con otros, necesitamos usar `git revert`. Veámoslo en acción"],afterMarkdowns:["Extraño. Hay un nuevo commit aplicado sobre el que queríamos revertir. Eso es porque este nuevo commit `C2'` introduce *cambios* - sólo que esos cambios son exactamente los necesarios para revertir los que introdujo `C2`.","","Cuando usás revert, podés pushear ese cambio para compartirlo con otros."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, revertí los dos commits más recientes, tanto en `local` como en `pushed`.","","Tené en cuenta que `pushed` es una rama remota y `local` es una rama local -- eso debería ayudarte a elegir qué métodos usar."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Revertendo Mudanças no Git","","Existem várias maneiras de reverter mudanças no Git. E assim como o ato de commitar, reverter mudanças no Git também tem um componente de baixo nível (a preparação, ou staging, de arquivos ou trechos de arquivos individuais) e um componente de alto nível (como as mudanças são, de fato, revertidas). Aqui vamos focar neste último ponto.","","Há duas maneiras principais de desfazer mudanças no Git -- uma delas é usando `git reset`, e a outra é usando `git revert`. Vamos olhar cada uma delas na próxima janela",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'O comando `git reset` reverte mudanças movendo para trás no tempo (para um commit mais antigo) a referência do ramo. Desta forma, você pode pensar nessa operação como uma "reescrita do histórico"; o `git reset` vai mover o ramo para trás como se o commit nunca tivesse existido.',"","Vejamos como funciona:"],afterMarkdowns:["Legal! O Git simplesmente moveu a referência do ramo master de volta para `C1`; agora o nosso repositório local está em um estado como se o `C2` nunca tivesse acontecido"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Embora o reset funcione muito bem em ramos locais no seu próprio computador, o método utilizado de "reescrever o histórico" não funciona com ramos remotos que outras pessoas estejam usando.',"","Para reverter mudanças e conseguir *compartilhar* essas mudanças com os outros, precisamos usar o `git revert`. Vejamo-lo em ação"],afterMarkdowns:["Estranho, um novo commit surgiu abaixo do commit que queríamos reverter. Isso é porque o novo commit `C2'` introduz *mudanças* -- acontece que as mudanças que ele introduz revertem exatamente aquelas do commit `C2`.","","Com o `revert`, você pode fazer `push` das suas mudanças para compartilhá-las com os outros."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, reverta os dois commits mais recentes tanto em `local` como em `pushed`.","","Tenha em mente que `pushed` é um ramo remoto, e `local` é um ramo local -- isso deve ajudá-lo a escolher o método apropriado."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Änderungen in Git rückgängig machen","","Es gibt viele Möglichkeiten, Änderungen in Git zurückzunehmen. Und ebenso wie das Committen hat auch das rückgängig Machen eine Basis-Komponente (Dateien und Inhalte vormerken) und einen übergeordneten Aspekt (wie die Änderungen tatsächlich zurückgenommen werden). Diese Applikation beschäftigt sich wiederum mit den übergeordneten Vorgängen.","","Es gibt grundsätzlich zwei Arten in Git etwas rückgängig zu machen -- einerseits `git reset` und andererseit `git revert`. Wir schauen uns beide mal an.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` nimm Änderungen zurück, indem es eine Branch-Referenz auf einen anderen Commit setzt. Es ist ein bisschen (aber nicht wirklich) wie "Geschichte umschreiben"; `git reset` bewegt einen Branch auf einen anderen Commit, als hätte er nie anders ausgesehen.',"","Schauen wir, wie das aussieht:"],afterMarkdowns:["Schick! Git hat den `master` einfach auf `C1` gesetzt; unser lokales Repository sieht nun so aus, als hätte `C2` nie stattgefunden."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","",'Obwohl `git reset` super im lokalen Kontext funktioniert, ist der Ansatz vom "Umschreiben" der Commit-Geschichte nicht geeignet für Branches, die auf einem Server liegen und auch von anderen benutzt werden.',"","Um Änderungen rückgängig zu machen und das mit anderen zu *teilen* müssen wir `git revert` benutzen. Schauen wir uns das in Aktion an."],afterMarkdowns:["Komisch, es ist ein neuer Commit entstanden. Das liegt daran, dass `C2'` genau die *Änderungen* enthält, die die Änderungen aus `C2` aufheben.","","Durch Reverten kannst du das Zurücknehmen von Änderungen mit anderen teilen."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level abzuschließen musst du sowohl auf `local` also auch auf `pushed` jeweils die zwei letzten Commits zurücknehmen.","","Vergiss nicht, dass `pushed` auch auf einem Server liegt und `local` ein rein lokaler Branch ist -- das sollte dir helfen, die richtige Methode zu wählen."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## 変更を元に戻す","","Gitでは変更を元に戻す方法がたくさんあります。コミットと同じように、低レベルな動作（ファイル別だったりファイルの中の一部だったり）も高レベルな動作（変更のまとまりのキャンセル）もできます。このアプリケーションでは後者の方法について紹介します。","","基本的なアンドゥの方法が2つあります - 一つは`git reset`を使う方法で、もう1つは`git revert`を使う方法です。次のダイアログで一つ一つを見ていきます。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset`はブランチのポインタを後方に移動することで変更のキャンセルを実現します。履歴を上書きするような動作だと思うと良いでしょうか：`git reset`はそもそも前のコミットなんかなかったかのように、ブランチのポインタを元に戻してくれます。","","どういう感じか見てみましょう。"],afterMarkdowns:["いいですね！Gitは単純にmasterブランチへのポインタを`C1`へ戻しました。これでこのローカルリポジトリにはまるで`C2`なんて無かったかのように変更をキャンセルできました。"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","自分のマシン上のブランチではさっきの`git reset`でうまくいきましたが、この「履歴を上書きする」手段は、他の人も使っているリモートにあるリポジトリに対しては使うことができません。","","変更を巻き戻して他の人とそれを共有するためには、`git revert`を使う必要があります。今度はこれを見てみましょう。"],afterMarkdowns:["あれ、おかしいな。巻き戻したいと思ってたコミットの下に新しいコミットが出来上がってしまったみたいです。なぜか。これは、この新しい`C2'`コミットは`C2`へ戻すのに必要な内容を確かに変更して巻き戻していたのです。","","こんな風にして、巻き戻した内容を他人と共有するためにはrevertを使います。"],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["この章の仕上げに、`local`と`pushed`の両方の直近のコミットを巻き戻してみましょう。","","`pushed`はリモートのブランチで、`local`はローカルであることに注意。正しくコマンドを使い分けましょう。"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Annuler des changements avec Git","","Il y a de nombreuses façons d'annuler des changement avec Git. De même que pour les commits, annuler des changements avec Git a à la fois un aspect bas-niveau (gestion des fichiers et morceaux de fichiers) et un aspect de plus haut niveau (comment les changements sont effectivement annulés). Nous allons nous intéresser à ce dernier point.","","Il y a principalement deux façons d'annuler des changements avec Git -- l'une est `git reset` et l'autre est `git revert`. Nous allons maintenant voir chacune de ces façons.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","","`git reset` annule des changements en déplaçant la référence en arrière dans le temps sur un commit plus ancien. En ce sens, on peut considérer cela comme une façon de \"réécrire l'histoire\"; `git reset` fait remonter une branche en arrière comme si le(s) commit(s) n'avait jamais eu lieu.","","Regardons à quoi cela ressemble :"],afterMarkdowns:["Bravo ! Git a simplement déplacé la référence de la branche master en la faisant revenir sur `C1`; désormais notre dépôt est dans le même état que si `C2` n'avait jamais eu lieu"],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","Bien que le reset marche parfaitement pour les branches locales sur notre propre machine, cette façon de \"réécrire l'histoire\" ne marche pas avec les banches distantes (remote) que d'autres personnes utilisent.","","Pour pouvoir annuler des changements et *partager* ces annulations avec d'autres, nous devons utiliser `git revert`. Regardons comment cela fonctionne"],afterMarkdowns:["Étrangement, un nouveau commit est apparu en bas sous le commit que nous voulions annuler. C'est parce que ce nouveau commit `C2'` introduit des *modifications* -- celles qui correspondent justement à l'annulation de celles du commit `C2`.","","Avec revert, vous pouvez diffuser (push) vos modifications et les partager avec tout le monde."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["Pour accomplir ce niveau, annulez les deux derniers commits à la fois sur `local` et sur `pushed`.","","Ayez à l'esprit que `pushed` est une branche distante et `local` est une branche locale -- cela devrait vous guider dans le choix de la méthode à employer."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 撤销 Git 里面的变动","","在 Git 里撤销修改的方法很多。和 commit 一样，在 Git 里撤销变动同时具有底层部分（暂存一些独立的文件或者片段）和高层部分（具体到变动是究竟怎么被撤销的）。我们这个应用主要关注后者。","","在 Git 里主要用两种方法来撤销变动 —— 一种是 `git reset`，另外一种是 `git revert`。让我们在下一个窗口逐一了解它们。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset`把分支记录回退到上一个提交记录来实现撤销改动。你可以认为这是在"重写历史"。`git reset`往回移动分支，原来指向的提交记录好像重来没有提交过一样。',"","让我们看看具体的操作："],command:"git reset HEAD~1",afterMarkdowns:["漂亮! Git把 master 分支的指向简单地移回到`C1`；现在我们的本地代码库处于没有提交过`C2`的状态了。"],beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","虽然在你的本地分支中使用`git reset`很方便，但是这种“改写历史”的方法对别人的远端分支是无效的哦！","","为了撤销更改并*传播*给别人，我们需要使用`git revert`。举个例子"],command:"git revert HEAD",afterMarkdowns:["怪哉！在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录`C2'`引入了*更改*——刚好是用来撤销 `C2` 这个提交的。","","借助 revert，现在可以把你的更改传递给别人啦。"],beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["要完成此关，分别撤销`local`分支和`pushed`分支上的最近一次提交。","","记住 `pushed` 是一个远程分支，`local` 是一个本地分支 —— 有了这么明显的提示应该知道用哪种方法了吧？"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 取消 git 的修改","","在 git 裡面取消修改的方法很多。和 commit 一樣，在 git 裡面取消修改同時具有底層的部份（暫存一些獨立的文件或者片段）和高層的部份（修改是如何被取消）。我們主要講的重點是後者。","","在 git 裡主要用兩種方法來取消修改，一種是 `git reset`，另外一種是 `git revert`。讓我們在下一個對話視窗中逐一瞭解它們。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Reset","",'`git reset` 把分支的參考點退回到上一個 commit 來取消修改。你可以認為這是在"重寫歷史"。`git reset` 往回移動 branch，原來的 branch 所指向的 commit 好像從來沒有存在過一樣。',"","讓我們來看看要怎麼操作："],command:"git reset HEAD~1",afterMarkdowns:["太好了! Git 把 master branch 簡單地移回到 `C1`；現在在我們的 local 已經退回到沒有 commit 過 `C2` 的狀態了。"],beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git Revert","","雖然在你的 local branch 中使用 `git reset` 很方便，但是這種「改寫歷史」的方法對別人的 remote branch 是無效的哦！","","為了取消修改並且把這個狀態*分享*給別人，我們需要使用 `git revert`。舉個例子"],command:"git revert HEAD",afterMarkdowns:["很奇怪吧！在我們要取消的 commit 後面居然多了一個新的 commit！這是因為新的 commit `C2'` 引入了*修改*——用來表示我們取消 `C2` 這個 commit 的修改。","","多虧了 revert，現在可以把你的修改分享給別人啦。"],beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這一關，分別取消 `local` branch 和 `pushed` branch 上的最近的一次 commit。","","記住 `pushed` 是一個 remote branch，`local` 是一個 local branch，有了這麼明顯的提示應該知道要用哪種方法了吧？"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git에서 작업 되돌리기","","Git에는 작업한 것을 되돌리는 여러가지 방법이 있습니다. 변경내역을 되돌리는 것도 커밋과 마찬가지로 낮은 수준의 일(개별 파일이나 묶음을 스테이징 하는 것)과 높은 수준의 일(실제 변경이 복구되는 방법)이 있는데요, 여기서는 후자에 집중해 알려드릴게요.","","Git에서 변경한 내용을 되돌리는 방법은 크게 두가지가 있습니다 -- 하나는 `git reset`을 쓰는거고, 다른 하나는 `git revert`를 사용하는 것입니다. 다음 화면에서 하나씩 알아보겠습니다.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git 리셋(reset)","",'`git reset`은 브랜치로 하여금 예전의 커밋을 가리키도록 이동시키는 방식으로 변경 내용을 되돌립니다. 이런 관점에서 "히스토리를 고쳐쓴다"라고 말할 수 있습니다. 즉, `git reset`은 마치 애초에 커밋하지 않은 것처럼 예전 커밋으로 브랜치를 옮기는 것입니다.',"","어떤 그림인지 한번 보죠:"],afterMarkdowns:["그림에서처럼 master 브랜치가 가리키던 커밋을 `C1`로 다시 옮겼습니다; 이러면 로컬 저장소에는 마치 `C2`커밋이 아예 없었던 것과 마찬가지 상태가 됩니다."],command:"git reset HEAD~1",beforeCommand:"git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["## Git 리버트(revert)","",'각자의 컴퓨터에서 작업하는 로컬 브랜치의 경우 리셋(reset)을 잘 쓸 수 있습니다만, "히스토리를 고쳐쓴다"는 점 때문에 다른 사람이 작업하는 리모트 브랜치에는 쓸 수 없습니다.',"","변경분을 되돌리고, 이 되돌린 내용을 다른 사람들과 *공유하기* 위해서는, `git revert`를 써야합니다. 예제로 살펴볼게요."],afterMarkdowns:["어색하게도, 우리가 되돌리려고한 커밋의 아래에 새로운 커밋이 생겼습니다. `C2`라는 새로운 커밋에 *변경내용*이 기록되는데요, 이 변경내역이 정확히 `C2` 커밋 내용의 반대되는 내용입니다.","","리버트를 하면 다른 사람들에게도 변경 내역을 밀어(push) 보낼 수 있습니다."],command:"git revert HEAD",beforeCommand:"git commit"}},{type:"ModalAlert",options:{markdowns:["이 레벨을 통과하려면, `local` 브랜치와 `pushed` 브랜치에 있는 최근 두 번의 커밋을 되돌려 보세요.","","`pushed`는 리모트 브랜치이고, `local`은 로컬 브랜치임을 신경쓰셔서 작업하세요 -- 어떤 방법을 선택하실지 떠오르시죠?"]}}]}}}
},{}],93:[function(a,b,c){c.level={compareOnlyMasterHashAgnostic:!0,disabledMap:{"git revert":!0,"git cherry-pick":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%7D%2C%22bugFix%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22bugFix%22%7D%2C%22side%22%3A%7B%22target%22%3A%22C6%27%22%2C%22id%22%3A%22side%22%7D%2C%22another%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22another%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git rebase master bugFix;git rebase bugFix side;git rebase side another;git rebase another master",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"side":{"target":"C6","id":"side"},"another":{"target":"C7","id":"another"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C0"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C5"],"id":"C7"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Rebasing over 9000 times",de_DE:"10000 Rebases unter dem `HEAD`",es_AR:"Rebaseando más de 9000 veces",pt_BR:"Fazendo mais de 9000 rebases",fr_FR:"Rebaser plus de 1000 fois",ko:"9천번이 넘는 리베이스",ja:"9000回以上のrebase",zh_CN:"N次Rebase",zh_TW:"N次Rebase"},hint:{en_US:"Remember, the most efficient way might be to only update master at the end...",de_DE:"Nicht vergessen: die effizienteste Möglichkeit könnte sein, schließlich einfach nur den master zu aktualisieren ...",es_AR:"Acordate, la manera más eficiente podría ser actualizar master sólo al final...",pt_BR:"Lembre-se, a forma mais eficiente pode ser atualizar o master por último...",fr_FR:"Rappelez-vous, la façon la plus efficace peut être de mettre à jour master seulement à la fin ...",ja:"最も効率的なやり方はmasterを最後に更新するだけかもしれない・・・",ko:"아마도 master를 마지막에 업데이트하는 것이 가장 효율적인 방법일 것입니다...",zh_CN:"记住，最后更新master分支可能是最高效的方法。",zh_TW:"要記住喔! 把 master branch 留到最後更新可能是最有效率的方法。"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebasing Multiple Branches","","Man, we have a lot of branches going on here! Let's rebase all the work from these branches onto master.","","Upper management is making this a bit trickier though -- they want the commits to all be in sequential order. So this means that our final tree should have `C7'` at the bottom, `C6'` above that, and so on, all in order.","","If you mess up along the way, feel free to use `reset` to start over again. Be sure to check out our solution and see if you can do it in fewer commands!"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebaseando múltiples ramas","","Man, ¡hay un montón de ramas acá! Rebaseemos todo el trabajo de esas ramas sobre master.","","La gente de administración nos está haciendo las cosas un poco complicadas, igual -- quieren que nuestros commits estén todos en orden secuencial. Esto significa que nuestro árbol final tendría que tener `C7` al final, `C6` antes de ese, y así siguiendo, todos en orden.","","Si hacés líos en el camino, sentite libre de usar `reset` para empezar de nuevo. ¡Asegurate de verificar tu solución y ver si podés hacerla en alguna cantidad menor de commandos!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Fazendo rebase em múltiplos ramos","","Cara, temos um monte de ramos aqui! Vamos fazer um rebase de todo o trabalho contido nesses ramos para o master.","","No entanto, a cúpula da administração está tornando as coisas mais difíceis -- eles querem que os commits estejam todos em ordem sequencial. Isso significa que a nossa árvore final precisa ter o `C7'` por último, `C6'` acima disso, e assim por diante, tudo ordenado.","","Se você fizer besteira, sinta-se livre para usar o comando `reset` para recomeçar do zero. Depois lembre de olhar nossa solução do gabarito para ver se consegue resolver a tarefa usando menos comandos!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rebaser plusieurs branches","","Dis-donc, nous avons beaucoup de branches par ici ! Rebasons tout le travail de ces branches dans master.","","Les patrons rendent cela encore plus compliqué -- ils veulent que les commits soient fait de manière séquentielle. Cela signifie donc que dans votre arbre final `C7'` est tout en bas, `C6'` juste au-dessus, et ainsi de suite, tout dans cet ordre.","","Si vous faites une erreur en chemin, n'hésitez pas à utiliser `reset` pour recommencer. Pensez à comparer votre solution à la notre et voyez si vous pouvez le faire en moins de commandes !"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Mehrere Branches rebasen","","Wow, wir haben hier ja eine Menge Branches! Lass uns mal die ganze Arbeit, die in diesen Branches steckt, auf den `master` packen, um sie auf Stand zu bringen.","","Die Führungsetage macht die Sache allerdings etwas trickreicher -- die möchten, dass alle Commits in aufsteigender Reihenfolge geordnet sind. Das heißt unser fertiger Baum sollte `C7` ganz unten haben, darüber `C6` und so weiter und so fort.","","Upper management is making this a bit trickier though -- they want the commits to all be in sequential order. So this means that our final tree should have `C7'` at the bottom, `C6'` above that, etc etc, etc all in order.","Wenn du irgendwo einen Fehler machst, benutz ruhig `reset` um wieder von vorne anzufangen oder `undo` um einen Schrit zurückzugehen. Schau dir die Lösung an und versuch es in weniger Schritten hinzubekommen, als die."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["### 複数のブランチをリベースする","","さあ、いくつものブランチが出てきます。このブランチたち全てをmasterブランチにリベースしましょう。","","おエライさん方が今回の仕事を少しトリッキーにしてくれました ― コミットはすべて一列のシーケンシャルな状態にしてほしいそうです。つまり私たちが作るリポジトリの最終的なツリーの状態は、`C7'`が最後に来て、`C6'`がその一つ上に来て、、と順に積み重なるイメージです。","","試行錯誤してツリーが汚くなってきたら、`reset`コマンドを使ってツリーの状態を初期化してください。模範解答をチェックして、それよりも簡単なコマンドで済ませられるかどうか、を考えるのも忘れずに！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 多分支衍合","","呐，现在我们有很多分支啦！让我们rebase这些分支的工作到 master 分支上吧。","","但是你的头头找了点麻烦 —— 他们希望得到有序的提交历史，也就是我们最终的结果是 `C7'` 在最底部，`C6'` 在它上面，以此类推。","","假如你搞砸了，没所谓的（虽然我不会告诉你用 `reset` 可以重新开始）。记得看看我们提供的答案，看你能否使用更少的命令完成任务！"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["### rebase 多個 branch","","嗨！現在我們有很多 branch 了啦！讓我們做一下 rebase，將這些分支接到 master branch 上吧。","","但是你的主管找了點麻煩，他們希望得到有序的 commit history，也就是我們最終的結果是 `C7'` 在最下面，`C6'` 在它上面，以此類推。","","假如你搞砸了，沒有關係啦！你用 `reset` 就可以重新開始！記得看看我們提供的答案，看你是否能夠使用更少的指令完成這一關！"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["### 여러 브랜치를 리베이스(rebase)하기 ","","음, 여기 꽤 여러개의 브랜치가 있습니다! 이 브랜치들의 모든 작업내역을 master에 리베이스 해볼까요?","","윗선에서 일을 복잡하게 만드네요 -- 그 분들이 이 모든 커밋들을 순서에 맞게 정렬하라고 합니다. 그럼 결국 우리의 최종 목표 트리는 제일 아래에 `C7'` 커밋, 그 위에 `C6'` 커밋, 또 그 위에 순서대로 보여합니다.","","만일 작업중에 내용이 꼬인다면, `reset`이라고 쳐서 처음부터 다시 시작할 수 있습니다. 모범 답안을 확인해 보시고, 혹시 더 적은 수의 커맨드로 해결할 수 있는지 알아보세요!"]}}]}}}},{}],94:[function(a,b,c){c.level={compareAllBranchesHashAgnostic:!0,disabledMap:{"git revert":!0},goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C5%22%2C%22id%22%3A%22master%22%7D%2C%22one%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22one%22%7D%2C%22two%22%3A%7B%22target%22%3A%22C2%27%27%22%2C%22id%22%3A%22two%22%7D%2C%22three%22%3A%7B%22target%22%3A%22C2%22%2C%22id%22%3A%22three%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C4%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C4%27%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C4%27%27%22%7D%2C%22C3%27%27%22%3A%7B%22parents%22%3A%5B%22C4%27%27%22%5D%2C%22id%22%3A%22C3%27%27%22%7D%2C%22C2%27%27%22%3A%7B%22parents%22%3A%5B%22C3%27%27%22%5D%2C%22id%22%3A%22C2%27%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22two%22%2C%22id%22%3A%22HEAD%22%7D%7D",solutionCommand:"git checkout one; git cherry-pick C4 C3 C2; git checkout two; git cherry-pick C5 C4 C3 C2; git branch -f three C2",startTree:'{"branches":{"master":{"target":"C5","id":"master"},"one":{"target":"C1","id":"one"},"two":{"target":"C1","id":"two"},"three":{"target":"C1","id":"three"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{ko:"브랜치 스파게티",en_US:"Branch Spaghetti",fr_FR:"Branche spaghetti",de_DE:"Branch-Spaghetti",es_AR:"Enslada de branches",pt_BR:"Espaguete de ramos",ja:"ブランチスパゲッティ",zh_CN:"分支浆糊",zh_TW:"branch 漿糊"},hint:{en_US:"Make sure to do everything in the proper order! Branch one first, then two, then three",fr_FR:"Faites attention à tout faire dans le bon ordre ! La branche one d'abord, puis la seconde, puis la troisième",de_DE:"Stelle sicher, dass du alles in der richtigen Reihenfolge machst! Branche erst one, dann two, dann three.",es_AR:"¡Asegurate de hacer las cosas en el orden correcto! Brancheá `one` primero, después `two`, y después `three`.",pt_BR:"Certifique-se de fazer tudo na ordem correta! Crie o ramo `one` primeiro, depois `two`, depois `three`.",ja:"全て正しい順番で処理すること！oneが最初で、次がtwo、最後にthreeを片付ける。",ko:"이 문제를 해결하는 방법은 여러가지가 있습니다! 체리픽(cherry-pick)이 가장 쉽지만 오래걸리는 방법이고, 리베이스(rebase -i)가 빠른 방법입니다",zh_CN:"确保你是按照正确的顺序来操作！先操作分支 `one`, 然后 `two`, 最后才是 `three`",zh_TW:"確認你是按照正確的順序來操作！先操作 branch  `one`, 然後 `two`, 最後才是 `three`"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","WOAHHHhhh Nelly! We have quite the goal to reach in this level.","","Here we have `master` that is a few commits ahead of branches `one` `two` and `three`. For whatever reason, we need to update these three other branches with modified versions of the last few commits on master.","","Branch `one` needs a re-ordering and a deletion of `C5`. `two` needs pure reordering, and `three` only needs one commit!","","We will let you figure out how to solve this one -- make sure to check out our solution afterwards with `show solution`. "]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branche spaghetti","","WOAHHHhhh ! Nous avons pas mal d'objectifs dans ce niveau.","","Actuellement nous avons `master` qui se situe quelques commits devant les branches `one` `two` et `three`. Pour une raison quelconque, nous avons besoin de mettre ces trois branches à jour avec les modifications des derniers commits sur master.","","La branche `one` a besoin d'une réorganisation et de la suppression de `C5`. `two` doit simplement être reordonnée, et `three` ne nécessite qu'un commit !","","Nous vous laissons imaginer la solution pour ce niveau -- comparer avec notre solution après-coup avec la commande `show solution`. "]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ensalada de branches","","¡WOAHHHhhh Nelly! Tenemos un _pequeño_ objetivo al que llegar en este nivel.","","Tenemos un `master` que está algunos commits adelante de `one`, `two` y `three`. Por alguna razón, necesitamos actualizar esas tres ramas con versiones modificadas de los últimos commits de master.","","La rama `one` necesita reordenarse, y eliminar `C5`. `two` necesita sólo reordenamiento, y `three` ¡sólo necesita un commit!","","Te vamos a dejar darte cuenta cómo resolver este -- asegurate de mirar la solución, después, usando `show solution`. "]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Espaguete de ramos","","Uhuuuuu Nelly! Temos um belo de um objetivo para alcançar neste nível.","","Temos aqui um `master` que está alguns commits atrás dos ramos `one`, `two` e `three`. Seja lá por qual razão, precisamos atualizar esses três outros ramos com versões modificadas dos últimos commits do master.","","O ramo `one` precisa de uma reordenação e da exclusão do `C5`. O `two` precisa apenas de reordenação. O `three` precisa de um único commit!","","Vamos deixar você descobrir como resolver esta tarefa -- mas não deixe de ver a nossa solução depois com o comando `show solution`. "]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch-Spaghetti","","Puh! Wir haben ein ganz schön schweres Ziel für dieses Level.","","Wir haben hier einen `master`, der ein paar Commits weiter ist als die Branche `one`, `two` und `three`. Aus welchem Grund auch immer müssen wir diese drei anderen Branches mit modifizierten Versionen der paar letzten Commits von `master` aktualisieren.","","Branch `one` benötigt eine Umsortierung und `C5` muss gelöscht werden. `two` muss nur umsortiert werden und `three` braucht nur einen Commit!","","Ich lass dich diese Aufgabe selbst lösen -- schau dir hinterher auf jeden Fall die Lösung mit `show solution` an."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## ブランチスパゲッティ","","なんということでしょう。今回のレベルクリアのために、やることがたくさんあります。","","いま`master`が指しているコミットの数個前のコミットに、ブランチ`one`、`two`それから`three`があります。何か事情があって、これらの3つのブランチをmasterが指している最新の状態に更新したいケースを考えます。","","ブランチ`one`に対しては、順序の変更と`C5`の削除が必要です。`two`では順序の変更のみ、`three`に対しては1回だけコミットすればOKです。","","`show solution`コマンドで模範解答を確認できますから、こちらも利用してください。 "]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","哇塞大神！这关我们要来点不同的！","","现在我们的 `master` 分支是比 `one` `two` 和 `three` 要多几个提交。出于某种原因，我们需要把其他三个分支更新到 master 分支上新近的几个不同提交上。（update these three other brances with modified versions of the last few commits on master）","","分支 `one` 需要重新排序和撤销， `two` 需要完全重排，而 `three` 只需要提交一次。","","慢慢摸索会找到答案的 —— 你完事记得用 `show solution` 看看我们的答案哦。"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branch Spaghetti","","哇塞大神！這關我們要來點不同的！","","現在我們的 `master` branch 是比 `one` `two` 和 `three` 這三個 branch 多了幾個 commit。由於某種原因，我們需要將 master 所新增的幾個 commit 套用到其它三個 branch 上面。","","`one` branch 需要重新排序和取消 `C5` 這一個 commit， `two` 需要完全重排，而 `three` 只需要再一個 commit。","","我們會讓你知道如何解決這個問題，之後請記得用 `show solution` 看看我們的答案喔。"]}}]},ko:{childViews:[{type:"ModalAlert",options:{markdowns:["## 브랜치 스파게티","","음, 이번에는 만만치 않습니다!","","여기 `master` 브랜치의 몇 번 이전 커밋에 `one`, `two`,`three` 총 3개의 브랜치가 있습니다. 어떤 이유인지는 몰라도, master의 최근 커밋 몇 개를 나머지 세 개의 브랜치에 반영하려고 합니다.","","`one` 브랜치는 순서를 바꾸고 `C5`커밋을 삭제하고, `two`브랜치는 순서만 바꾸며, `three`브랜치는 하나의 커밋만 가져옵시다!","","자유롭게 이 문제를 풀어보시고 나서 `show solution`명령어로 모범 답안을 확인해보세요."]}}]}}}},{}],95:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git clone",name:{en_US:"Clone Intro",fr_FR:"Introduction à clone",de_DE:"Clone Einführung",ja:"Clone入門",es_AR:"Introducción a clone",pt_BR:"Introdução à clonagem",zh_CN:"介绍 Clone",zh_TW:"介紹 clone"},hint:{en_US:"Just git clone!",fr_FR:"Simplement git clone !",de_DE:"Einfach git clone ausführen!",ja:"単にgit clone!",zh_CN:"只要 git clone!",es_AR:"Simplemente hacé git clone!",pt_BR:"Basta fazer um git clone!",zh_TW:"只要 git clone 就好了"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Remote repositories aren't actually that complicated. In today's world of cloud computing it's easy to think that there's a lot of magic behind git remotes, but they are actually just copies of your repository on another computer. You can typically talk to this other computer through the Internet, which allows you to transfer commits back and forth.","","That being said, remote repositories have a bunch of great properties:","","- First and foremost, remotes serve as a great backup! Local git repositories have the ability to restore files to a previous state (as you know), but all that information is stored locally. By having copies of your git repository on other computers, you can lose all your local data and still pick up where you left off.","","- More importantly, remotes make coding social! Now that a copy of your project is hosted elsewhere, your friends can contribute to your project (or pull in your latest changes) very easily.","","It's become very popular to use websites that visualize activity around remote repos (like [Github](https://github.com/) or [Phabricator](http://phabricator.org/)), but remote repositories _always_ serve as the underlying backbone for these tools. So it's important to understand them!"]}},{type:"ModalAlert",options:{markdowns:["## Our Command to create remotes","","Up until this point, Learn Git Branching has focused on teaching the basics of _local_ repository work (branching, merging, rebasing, etc). However now that we want to learn about remote repository work, we need a command to set up the environment for those lessons. `git clone` will be that command","","Technically, `git clone` in the real world is the command you'll use to create _local_ copies of remote repositories (from github for example). We use this command a bit differently in Learn Git Branching though -- `git clone` actually makes a remote repository out of your local one. Sure it's technically the opposite meaning of the real command, but it helps build the connection between cloning and remote repository work, so let's just run with it for now.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lets start slow and just look at what a remote repository looks like (in our visualization).",""],afterMarkdowns:["There it is! Now we have a remote repository of our project. It looks pretty similar except for some visual changes to make the distinction apparent -- in later levels you'll get to see how we share work across these repositories."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["To finish this level, simply `git clone` your existing repository. The real learning will come in following lessons."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Les dépôts distants (remote repositories) ne sont pas si compliqués que ça. Dans l'ère actuelle du cloud computing il est facile de croire qu'il y a un peu de magie derrière les branches distantes, mais elles sont en fait juste des copies de votre dépôt local sur un autre ordinateur. Vous pouvez donc vous connecter à cet ordinateur par Internet, ce qui vous permet de transférer les commits en retard et en avance.","","Cela dit, les branches distantes ont plusieurs propriétés puissantes :","","- Avant toute chose, le dépôt distant sert de sauvegarde ! Le dépôt local de git a la capacité de restaurer des fichiers à un état précédent (comme vous le savez), mais toutes les informations sont stockées localement. En ayant des copies de votre dépôt git sur d'autres ordinateurs, vous pouvez perdre vos données et toujours repartir de là où vous en étiez resté.","","- Plus important encore, les dépôts distants sociabilisent le projet ! Maintenant qu'il est hébergé quelque part ailleurs, vos amis peuvent y contribuer facilement (ou récupérer vos derniers changements).","","Il est devenu courant de visualiser l'activité sur dépôt distant via des sites internet (commen [Github](https://github.com/) ou [Phabricator](http://phabricator.org/)), mais les dépôts distants servent  _toujours_ de colonne vertébrale à ce système. C'est donc important de les comprendre !"]}},{type:"ModalAlert",options:{markdowns:["## Les commandes pour créer des dépôts distants","","Jusqu'à maintenant, Learn Git Branching s'est surtout concentré sur l'apprentissage des bases du travail sur un dépôt _local_ (branch, merge, rebase, etc). Cependant maintenant nous voulons savoir comment travailler sur les dépôts distants, nous avons besoin d'une commande pour l'environnement de ces leçons. `git clone` sera cette commande","","Techniquement, `git clone` dans le monde réel sera la commande que vous utiliserez pour créer des copies _locales_ des dépôts distants (de github par exemple). Nous utilisons cette commande un peu différemment dans Learn Git Branching car `git clone` crée ici un dépôt distant à partir de votre dépôt local. Il est certain qu'il s'agit donc du sens opposé de la commande originale, mais cela aide à construire la connexion entre le clonage et le travail sur le dépôt distant, travaillons donc avec cela pour l'instant.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Commençons doucement et regardons à quoi ressemble un dépôt distant (dans notre visualisation).",""],afterMarkdowns:["Nous y sommes ! Maintenant nous avons un dépôt distant de notre projet. Cela ressemble fortement à d'habitude, en dehors de quelques changements pour rendre compte des différences -- dans les niveaux suivants vous allez voir comment partager le travail entre ces dépôts."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, faites simplement un `git clone` du dépôt existant. Le réel apprentissage arrivera dans les prochaines leçons."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Los repositorios remotos no son _tan_ complicados. En el mundo actual de la computación en la nube es bastante facil pensar que hay un montón de magia detrás de los remotes de git, pero en realidad sólo son copias de tu repositorio en otra computadora. Típicamente vas a hablar con esta otra computadora a través de Internet, lo que permite transferir commits de un lado a otro.","","Habiendo dicho eso, los repositorios remotos tienen un par de propiedades copadas:","","- Primero y principal, los remotos ¡son un genial backup! Los repositorios locales de git tienen la habilidad de restaurar archivos a un estado previo (como ya sabés), pero toda esa información está almacenada localmente. Al tener copias de tu repositorio git en otras computadoras, podés perder todos tus datos locales y aún así retomar de donde habías dejado.","","- Más importante, ¡los remotos sociabilizan la programación! Ahora que hay una copia de tu proyecto hosteada en otro lugar, tus amigos pueden contribuir a tu proyecto (o bajarse los últimos cambios) de un modo muy sencillo.","","Se volvió bastante popular el uso de sitios web que muestran la actividad de los repositorios (como [Github](https://github.com/) or [Phabricator](http://phabricator.org/)), pero esos repositorios remotos _siempre_ sirven como el la base subyacente de esas herramientas. Así que ¡es importante entenderlos!"]}},{type:"ModalAlert",options:{markdowns:["## Nuestro comando para crear remotos","","Hasta este punto, Learn Git Branching se centró en eseñar las bases del trabajo _local_ con repositorios (branchear, mergear, rebasear, etc). Sin embargo, ahora que queremos aprender sobre el trabajo con repositorios remotos, necesitamos un comando para inicializar nuestro entorno para esas lecciones. Ese comando será `git clone`","","Técnicamente, `git clone` en el mundo real es el comando que usarías para crear copias _locales_ de un repositorio remoto (uno de GitHub, por ejemplo). Acá usamos este comando de un modo un tanto distinto, en cambio -- `git clone` va a crear un repositorio remoto a partir del tuyo local. Estamos de acuerdo en que es el significado técnicamente opuesto al del comando real, pero ayuda bastante a entender la conexión entre el clonado y el trabajo en un repositorio remoto, así que vamos a vivir con ello por ahora.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Comencemos despacio y simplemente veamos cómo se ve un repositorio remoto en nuestra visualización.",""],afterMarkdowns:["¡Ahí está! Ahora tenemos un repositorio remoto de nuestro proyecto. Parece bastante similar, salvando algunos cambios visuales para hacer evidente la distinción -- en niveles posteriores vas a ver cómo compartir trabajo entre estos repositorios."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente hacé `git clone` de tu repositorio existente. El verdadero aprendizaje viene en las próximas lecciones."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Remotos no Git","","Repositórios remotos não são algo muito complicado. Nos dias atuais de computação em nuvem, seria fácil pensar que existiria muita mágica por trás dos remotos do Git, mas não é o caso -- eles são na verdade apenas cópias do seu repositório em outro computador. Você pode geralmente comunicar-se com esse outro computador por meio da Internet, o que permite que você transfira commits de um lado para o outro.","","Tendo dito isto, repositórios remotos tem uma série de propriedades interessantes:","","- Primeiro e antes de tudo, repositórios remotos servem como um ótimo backup! Repositórios Git locais possuem a habilidade de restaurar um arquivo para um estado anterior (como você sabe), mas toda a informação está guardada localmente. Tendo cópias do seu repositório Git em outros computadores, mesmo se você perder todos os seus dados locais, ainda terá como recomeçar do mesmo ponto de onde você tinha parado.","","- Ainda mais importante, repositórios remotos tornam o desenvolvimento uma atividade social! Agora que uma cópia do seu projeto está hospedada em outro lugar, seus amigos podem contribuir para o seu projeto (ou obter as suas últimas alterações) de uma forma bastante simples.","","Está se tornando bastante popular o uso de websites para visualizar a atividade em repositórios (como o [Github](https://github.com/) ou o [Phabricator](http://phabricator.org/)), mas o recurso de repositórios remotos _sempre_ serve como mecanismo base para essas ferramentas. Então é importante entender como ele funciona!"]}},{type:"ModalAlert",options:{markdowns:["## Nosso comando para criar remotos","","Até este ponto, o Learn Git Branching focou em ensinar o básico a respeito de trabalho em repositórios _locais_ (branch, merge, rebase, etc). Entretanto, agora que queremos aprender como repositórios remotos funcionam, precisamos de um comando para configurar o ambiente para essas lições. Esse comando será o `git clone`.","","Tecnicamente, o `git clone` do mundo real é um comando que se usa para criar cópias _locais_  de repositório remotos (do GitHub para o seu computador, por exemplo). Todavia, por motivos logísticos, nós usaremos esse comando de uma forma um pouco diferente no Learn Git Branching -- aqui o `git clone` criará um repositório remoto a partir do repositório local. Certamente, esse comportamento é exatamente o oposto do comando real, mas apesar disso ele ajuda a formar a conexão mental entre a clonagem e a forma como repositórios remotos funcionam, então vamos usá-lo dessa forma mesmo por enquanto.",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos começar devagar e apenas olhar como um repositório remoto se parece na nossa visualização.",""],afterMarkdowns:["Aqui está ele! Agora temos um repositório remoto do nosso projeto. Ele é muito parecido exceto por algumas mudanças visuais para tornar a distinção factível -- nas tarefas a seguir veremos como compartilhar trabalho entre esses repositórios."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, simplesmente chame o comando `git clone`. Você aprenderá algo de verdade somente nas próximas lições."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","remote (遠端) repository 並不會很難了解. 藉由現在的雲端運算，可以很輕易地了解到在 git remote 裡面有很多有趣的事情，但它們其實其實就只是你的或者是其它電腦上的 repository 的副本。你可以輕易地透過網路去發送你的 commit 給其它的電腦。","","也就是說，remote repository 有很多有趣的地方：","","- 第一，remote 是用來備份的! 本地端的 git 有能力可以回復文件到前一個狀態 (你知道的)，但是全部的資訊還是儲存在本地端。如果你在其它的電腦上面有你的 git repository 的副本，則你可以在資料不小心遺失的時候進行救援備份","","- 更重要的是, remote 讓大家一起來 coding！現在你的 project 放在 remote 上面，你的朋友可以很容易地對你的 project 做出貢獻（或者是 pull 你最後的修改） 。","","使用網站去對 remote repository 做視覺化非常流行（例如 [Github](https://github.com/） 或者是 [Phabricator]（http://phabricator.org/）），但這背後最大的功臣是 remote repository，因此我們務必要了解它。"]}},{type:"ModalAlert",options:{markdowns:["## 我們去建立 remotes 的指令","","到目前為止，Learn Git Branching 著重在解釋本地端的工作（branching, merging, rebasing 以及其它指令）， 但是我們現在想要學習針對 remote 的指令，我們需要一個指令去建立環境，`git clone` 就是我們需要的指令","","技術上來說， `git clone` 表示你想要把遠端的 repository 複製一份下來放在本地端（ 例如從 github 複製）。 雖然 `git clone` 實際上是把遠端的 repository 複製下來放在本地端，在 Learn Git Branching 中，我們用的這個指令會有一點不同。雖然他跟真實的指令的意思相反，但是它可以建立起本地端以及遠端的一個連結，現在讓我們看看如何使用它吧。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們慢慢來，並且看看 remote repository 是長什麼樣子（在我們的視覺化圖形中）。",""],afterMarkdowns:["就是那樣！現在我們有了一個放置了我們 project 的 remote repository。除了一些視覺上的改變之外，它們看起來很像，在之後的關卡中你就會看到我們如何分享我們的工作到這些 repository 上面。"],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，只要打 `git clone，其它的學習會在後面的關卡中出現。"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","远程仓库并不复杂, 在如今的云计算的世界 很容易想到 git remotes背后有很多魔幻, 但是它们只是你的仓库到另个一台计算机上的拷贝. 你可以通过因特网与这台计算机通话 -- 传递后退和前进的提交对象","","话虽如些, 远程仓库却有一系列强大的属性","","- 首先, 远仓是一个强大的备份. 本地仓库也有恢复文件的能力, 但所有的信息都是保存在本地的. 即使你丢失了本地数据, 你仍可以通过远端仓库拷贝拿回你丢失的数据  ","","- 更重要的是, 远端让代码社交化了! 现在你的项目被拷贝到别的地方了, 你的朋友可以更容易的为你的项目做贡献(或者pull 最新的变更)","","现在使用网站来可视化远端仓库变得越发流行(像 [Github](https://github.com/) or [Phabricator](http://phabricator.org/)), 但远库是这些工具的基石, 理解其概念非常的重要!"]}},{type:"ModalAlert",options:{markdowns:["## 我们创建远端仓库的命令","","直到现在, 教学都聚焦于本地仓库的基本操作. 但我们现在需要学习远端仓库的操作 -- 我们需要一个配置这种环境的命令, 这个命令就是 `git clone`","技术上, `git clone` 在真实的环境下, 会在本地创建一个远端仓库的拷贝(比如从github.com). 在我们的教学中使用这个命令会有一些不同 -- 它会在远端创建一个你本地的拷贝. 这和真实命令的意思相反",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["让我们看看远端仓库的样子.",""],afterMarkdowns:["就是它了! 现在我们有了一个远端仓库. 除了视觉上的一点变化, 它们真的太像了 -- 在后面的课程中, 你会知道怎样在不同的仓库间分享工作. "],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["要完成本节, 简单的 `git clone` 下你的仓库. 后续的课程我们会正式的学习"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remotes","","Entfernte Repositorys sind nicht weiter kompliziert. In dieser Welt des Cloud Computings könnte man vielleicht glauben, dass hinter entfernten Git-Repositorys eine Menge Magie steckt, aber es sind einfach nur Kopien eines Repositorys auf einem anderen Rechner. Du kannst mit diesem Rechner typischerweise über das Internet kommunizieren, was es dir ermöglicht Commits hin und her zu schicken.","","Nichts desto weniger haben entfernte Repositorys eine Menge toller Eigenschaften:","","- Vor allem: sie sind ein super Backup! Lokale Git-Repositorys können deine Arbeitskopie ein jeden beliebigen früheren Zustand versetzen (wie du ja weißt), aber all diese Informationen liegen eben bei dir lokal. Wenn es Kopien von deinem Repository auf anderen Rechnern gibt, kannst du ruhig all deine Daten verlieren und trotzdem genau da weitermachen, wo du aufgehört hast.","","- Noch wichtiger: Remotes geben dem Entwickeln eine soziale Komponente! Wenn eine Kopie deines Projekts woanders liegt können deine Freunde sehr einfach etwas zu dem Projekt beitragen (oder sich deine neuesten Änderungen holen).","","Websites, die die Aktivitäten um diese entfernten Repositorys darstellen (wie [Github](https://github.com/) oder [Phabricator](http://phabricator.org/)) erfreuen sich zunehmender Beliebtheit, aber entfernte Repositorys sind _immer_ das Rückgrat für diese Werkzeuge. Deshalb ist es wichtig, sie zu verstehen."]}},{type:"ModalAlert",options:{markdowns:["## Der Befehl um ein Remote zu erstellen","","Bis jetzt hat sich Learn Git Branching darauf konzentriert, die Grundlagen der _lokalen_ Arbeit mit Repositorys zu vermitteln (Branche anlegen, zusammenführen, Rebasen etc). Jetzt wollen wir allerdings lernen mit entfernten Repositorys zu arbeiten und brauchen für die Level eine entsprechende Umgebung. Die schaffen wir mit `git clone`.","",'In der Realität ist `git clone` eigentlich der Befehl, mit dem du eine _lokale_ Kopie eines _entfernten_ Repositorys erstellst (das zum Beispiel auf Github liegt). Wir benutzen diesen Befehl in Learn Git Branching allerdings ein wenig anders -- hier macht `git clone` tatsächlich eine Kopie von deinem lokalen Repository auf einem "entfernten Server". Klar, das ist eigentlich genau das Gegenteil von dem was der echte Befehl macht, aber es hilft den Zusammenhang zwischen Cloning und der Arbeit mit entfernten Repositorys herzustellen, also machen wir\'s einfach so.',""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Fangen wir langsam an und schauen nur wie ein entferntes Repository in unserer Darstellung aussieht.",""],afterMarkdowns:["Da ist es! Jetzt haben wir ein entferntes Repository unseres Projektes. Es sieht so aus wie das lokale, nur mit ein paar Änderungen in der Darstellung -- in späteren Leveln wirst du sehen, wie man Änderungen zwischen den Repositorys austauschen kann."],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["Um diesen Level abzuschließen führ einfach `git clone` auf deinem bestehenden Repository aus. Alles weitere kommt in den nächsten Leveln."]}}]},ja:{childViews:[{type:"ModalAlert",options:{markdowns:["## Gitリモート","","リモートのレポジトリというのはそんなに複雑なものでもありません。クラウドコンピューティングが普及している現在の世界では、gitリモートの裏には何か不思議な仕組みが動いていると思いやすいのですが、実は別のコンピューター上に保存されているあなたのレポジトリーのコピーにすぎません。普通の場合では、インターネットを媒体に使いこの別のコンピューターと対話し、コミットを交互にやり取りすることができます。","","とはいえ、リモートレポジトリにはいくつかの素晴らしい特徴があります:","","- まず、リモートはバックアップの役割を果たします。ご存知の通り、ローカルのgitレポジトリは以前の状態にファイルを復帰する機能を持っているのですが、その情報はすべてローカルに保存されています。gitレポジトリを別のコンピューターにも保存することで、ローカルのデーターがすべて失われたとしても、保存状態からコーディングを続けられます。","","- それよりも大切に、リモートではコードをよりソーシャル的に公開できます!プロジェクトのコピーが別の場所に保存されているため、友達などが簡単にそのプロジェクトに参加したり最近の変更をpullしたりできます。","","最近ではリモートレポジトリに関するデーターをビジュアル的に表示するウェブサイト([Github](https://github.com/)や[Phabricator](http://phabricator.org/)など)の使用が人気を集めていますが、レモートレポジトリは_いつでも_そのウェブサイトの裏に使われています。なので理解する必要があります。"]}},{type:"ModalAlert",options:{markdowns:["## リモートを作成するコマンド","","今までLearn Git Branchingでは_ローカル_レポジトリの様々な作業（branch, merge, rebaseなど）に焦点を当ててきました。しかし、これからはリモートレポジトリの作業を学びますので、レッスンのために環境をセットアップする必要があります。そのコマンドは`git clone`になります。","","普通の場合では`git clone`はリモートレポジトリ（githubなどから）を_ローカル_にコピーする時に使います。しかしLearn Git Branchingでは少し違ったように使います -- ここでは`git clone`が_ローカルレポジトリ_をリモートにコピーします。本当のコマンドの逆の動作になっているのですが、このようにcloneとリモートレポジトリのつながりが見えてきますので今のところは例として使いましょう。",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["最初の一歩として、ビジュアライズでレモートレポジトリを見てみましょう。",""],afterMarkdowns:["できました! プロジェクトのリモートレポジトリが保存されました。結構似ているのですが、その違いを明らかにするために少しだけビジュアルを工夫しました -- これからのレベルではこれらのレポジトリの間で作業をどう共有するか見ていきます。"],command:"git clone",beforeCommand:""}},{type:"ModalAlert",options:{markdowns:["このレベルをクリアするには、`git clone`で既存のレポジトリのクローンを作成します。次のレッスンでより詳細に見ていきます。"]}}]}}}
},{}],96:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C5","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C3","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C4":{"parents":["C1"],"id":"C4"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C5":{"parents":["C3","C4"],"id":"C5"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git clone;git fakeTeamwork 2;git commit ;git pull",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Faking Teamwork",fr_FR:"Simulation du travail d'équipe",de_DE:"Teamarbeit simulieren",ja:"擬似チームワーク",es_AR:"Simulando el trabajo en equipo",pt_BR:"Simulando trabalho em equipe",zh_CN:"模拟团队合作",zh_TW:"模擬團隊合作"},hint:{en_US:"remember you can specify the number of commits to fake",fr_FR:"rappelez-vous que vous pouvez spécifier le nombre de commits à simuler",de_DE:"Nicht vergessen, du kannst angeben wieviele Commits simuliert werden sollen.",ja:"擬似で作成するコミット数を指定できるのをお忘れなく",es_AR:"Acordate que podés especificar cuántos commits simular",pt_BR:"Lembre-se que você pode especificar quantos commits quer simular",zh_CN:"记住为fake中的commit指定数量",zh_TW:"你要記得指定要送多少個 commit 出去"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simulating collaboration","","So here is the tricky thing -- for some of these upcoming lessons, we need to teach you how to pull down changes that were introduced in the remote.","",'That means we need to essentially "pretend" that the remote was updated by one of your coworkers / friends / collaborators, sometimes on a specific branch or a certain number of commits.',"","In order to do this, we introduced the aptly-named command `git fakeTeamwork`! It's pretty self explanatory, let's see a demo..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["The default behavior of `fakeTeamwork` is to simply plop down a commit on master"],afterMarkdowns:["There we go -- the remote was updated with a new commit, and we haven't downloaded that commit yet because we haven't run `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["You can also specify the number of commits or the branch by appending them to the command"],afterMarkdowns:["With one command we simulated a teammate pushing three commits to the `foo` branch on our remote"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["The upcoming levels are going to be pretty difficult, so we're asking more of you for this level.","","Go ahead and make a remote (with `git clone`), fake some changes on that remote, commit yourself, and then pull down those changes. It's like a few lessons in one!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simuler la collaboration","","C'est là que cela devient compliqué : pour certaines des leçons à venir, nous avons besoin de vous enseigner comment récupérer les changements effectués sur le dépôt distant.","",'Cela signifie que nous devons "prétendre" que le dépôt distant a été modifié par un collègue / ami / collaborateur, à quelque moment sur une branche spécifique ou sur un certain nombre de commits.',"","Pour faire cela, nous introduisons à point nommé la commande `git fakeTeamwork` ! Elle est assez significative, voyons une démo ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Le comportement par défaut de `fakeTeamwork` est de simplement faire apparaître un commit sur master"],afterMarkdowns:["Voilà : le dépôt distant a été mis-à-jour avec un nouveau commit, et nous n'avons pas encore téléchargé ce commit parce que nous n'avons pas exécuté la commande `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vous pouvez aussi spécifier le nombre de commits ou la branche en l'ajoutant à la fin de la commande."],afterMarkdowns:["Avec une seule commande, nous avons simulé un collègue ayant pushé 3 commits à la branche `foo` de notre dépôt distant"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Les niveaux suivants vont devenir assez difficiles, donc nous demandons un peu plus que cela dans ce niveau.","","Vous devrez créer un dépôt distant (avec `git clone`), simuler quelques changements sur ce dépôt, commit les vôtres, et enfin appliquer ces changements dans votre dépôt local (pull). C'est presque plusieurs leçons en une !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simulando la colaboración","","Entonces, hay algo medio tramposo acá -- para algunas de las lecciones siguientes, necesitamos explicarte cómo bajar cambios introducidos en el repositorio remoto.","",'Eso significa que escencialmente tenemos que "hacer de cuenta" que el repositorio remoto fue actualizado por alguún colega, amigo o colaborador tuyo, incluso a veces en alguna rama específica o una cantidad determinada de commits.',"","Para lograr esto, introdujimos el bien llamado comando ¡`git fakeTeamwork`! Es bastante auto-explicativo: simula trabajo de nuestros colegas. Veamos una demo..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["El comportamiento por default de `fakeTeamwork` es simplemente crear un commit en master"],afterMarkdowns:["Ahí está: el remoto se actualizó con un nuevo commit, y todavía no nos bajamos ese commit porque aún no hicimos `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["También podés especificar la cantidad de commits o la ramma agregándolos al comando"],afterMarkdowns:["Con un único comando simulamos que un compañero de equipo pusheó tres commits a la rama `foo` de nuestro remoto"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Los niveles siguientes van a ser algo difíciles, así que vamos a exigirte un poco más en este nivel.","","Animate y creá un remoto (con `git clone`), simulá algunos cambios en ese remoto, commiteá en tu repo local, y luego pulleate esos cambios. ¡Es como varias lecciones en una!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Simulando colaboração","","Neste ponto, temos uma pequena dificuldade -- para algumas das lições a seguir, precisaremos ensinar como fazer pull de mudanças que foram introduzidas no repositório remoto.","",'Isso significa que precisaremos essencialmente "fingir" que o repositório remoto foi atualizado por algum de seus colegas / amigos / colaboradores, algumas vezes em um ramo específico ou com um certo número de commits.',"","Para esta finalidade, criamos o comando fictício `git fakeTeamwork`! Ele é bastante auto-explicativo, vejamos uma demonstração..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["O comportamento padrão do `fakeTeamwork` é simplesmente fazer aparecer um commit no master"],afterMarkdowns:["Aqui vamos nos -- o repositório remoto foi atualizado com um novo commit, e ainda não baixamos esse commit porque não executamos um `git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Você também pode especificar o número de commits ou o ramo, anexando-os ao comando"],afterMarkdowns:["Com um único comando, nós simulamos um colega enviando 3 commits para o ramo `foo` do repositório remoto"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Os níveis posteriores serão mais difíceis, então estamos pedindo um pouco mais de você neste nível.","","Vá em frente e crie um repositório remoto (chamando `git clone`), simule algumas mudanças no repositório remoto, commite no repositório local, e então faça um pull das mudanças que haviam sido simuladas. É como se fossem várias lições em uma só!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 模擬合作","","接下來的課程有一個很難的事情，我們需要讓你學會如何 pull remote 上的更新。","",'這就表示我們必須要 "假裝" remote 被你其中一個同事/ 朋友/ 合作的人在某個特定的 branch 上面送了一些特定的 commit。',"","為了要做到這件事情,我們要介紹一個自己設計的指令 `git fakeTeamwork`！ 從字面上就可以很容易地看出來它在幹嘛，讓我們來看一個範例..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`fakeTeamwork` 的預設行為是在送一個 commit 給 master 分支"],afterMarkdowns:["我就說吧！remote 已經藉由一個新的 commit 而更新了，而且因為我們還沒有用 `git fetch`，所以表示我們還沒有下載該 commit。"],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你可以在命令的後面指定你要送幾個 commit 或是要送給哪個 branch。"],afterMarkdowns:["我們利用一個指令將三個 commit 送給在 remote 上面的 `foo` branch。"],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["接下來的關卡會很困難，所以我們在這個關卡中會問你更多問題。","","現在先把 remote 下載下來（利用 `git clone`），假裝送幾個 commit 給 remote 做更新，然後 pull 這些 commit 下來 。這就好像是幾個教學中的指令的總結！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 仿真协同","","这里有一件棘手的事 -- 接下来的课程中, 我们需要教你如果从远端拉取变更","","这意味着，我们需要假装你的同事、朋友、合作伙伴已经将远端更新到最新了，这些变更有时是一个特别的分支或者确定数目的提交. ","","为了做到这点, 我们引入一个自造命令`git fakeTeamwork`. 它是自解释的, 先看演示.."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["`fakeTeamwork` 默认行为就是在在远端master做一个提交."],afterMarkdowns:["成了-- 远端更新了一个新提交. 我们还没有下载它, 因为我们还没有使用`git fetch`."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["你可以指定提交的数量, 只需要在命令后接一个数字!"],afterMarkdowns:["通过一个命令，我们就模拟了队友push 3 个提交到远端的foo分支.  "],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["接下来的学习会相当的困难，所以在本节我们会询问你很多问题. ","","继续前进 -- 克隆一个远端，再提交一些修改，在你自己的分支上也做一些提交，再pull一下远端. 这看起来包含了好几节的课程."]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Zusammenarbeit simulieren","","Hier ist das Problem -- für einige der folgenden Level müssen wir lernen, wie man Änderungen vom entfernten Server holt.","",'Das heißt wir müssen im Grunde "so tun" also ob der Server von einem Kollegen / Freund / Mitarbeiter aktualisiert worden wäre, manchmal ein bestimmter Branch oder eine bestimmte Anzahl von Commits.',"","Um das zu tun führen wir den passend benannten Befehl `git fakeTeamwork` ein! Er ist ziemlich selbsterklärend, schauen wir uns ihn an ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Das normale Verhalten von `fakeTeamwork` ist es, einen Commit auf den entfernten `master` zu machen."],afterMarkdowns:["Da haben wir's -- der Server ist mit einem neuen Commit aktualisiert worden und wir haben ihn noch nicht lokal, weil wir nicht `git fetch` oder `git pull` ausgeführt haben."],command:"git fakeTeamwork",beforeCommand:"git clone"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Du kannst auch angeben wieviele Commits oder auf welchem Branch sie gemacht werden sollen, indem du das an den Befehl anhängst."],afterMarkdowns:["Mit einem Befehlt haben wir simuliert, dass ein Kollege drei Commits auf den  Branch `foo` gepackt hat."],command:"git fakeTeamwork foo 3",beforeCommand:"git branch foo; git clone"}},{type:"ModalAlert",options:{markdowns:["Die kommenden Level werden recht anspruchsvoll, daher verlangen wir auch in diesem Level schon etwas mehr.","","Leg los und erstelle ein Remote (mit `git clone`), simuliere ein paar Änderungen auf dem Server, committe lokal und dann zieh dir die Änderungen vom Server. Das ist wie mehrere Level in einem!"]}}]}}}},{}],97:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"o/master":{"target":"C5","id":"o/master"},"o/bugFix":{"target":"C7","id":"o/bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C6":{"parents":["C3"],"id":"C6"},"C5":{"parents":["C4"],"id":"C5"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"bugFix","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C5","id":"master"},"bugFix":{"target":"C7","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C3"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"bugFix","id":"HEAD"}}}',solutionCommand:"git fetch",startTree:'{"branches":{"master":{"target":"C2","id":"master"},"bugFix":{"target":"C3","id":"bugFix"},"o/master":{"target":"C2","id":"o/master"},"o/bugFix":{"target":"C3","id":"o/bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"bugFix","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C5","id":"master"},"bugFix":{"target":"C7","id":"bugFix"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2"],"id":"C4"},"C5":{"parents":["C4"],"id":"C5"},"C6":{"parents":["C3"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"bugFix","id":"HEAD"}}}',name:{en_US:"Git Fetchin'",fr_FR:"Git fetch",de_DE:"Git Fetch",ja:"Git Fetch",es_AR:"git fetch",pt_BR:"Git Fetch",zh_CN:"Git Fetch",zh_TW:"git fetch"},hint:{en_US:"just run git fetch!",fr_FR:"Exécuter juste git fetch",de_DE:"Einfach git fetch ausführen!",ja:"単にgit fetchを実行！",es_AR:"Simplemente ¡hacé git fetch!",pt_BR:"Simplesmente chame git fetch!",zh_CN:"只要运行 git fetch 命令!",zh_TW:"只要下 git fetch 指令"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Working with git remotes really just boils down to transferring data _to_ and _from_ other repositories. As long as we can send commits back and forth, we can share any type of update that is tracked by git (and thus share work, new files, new ideas, love letters, etc.).","","In this lesson we will learn how to fetch data _from_ a remote repository -- the command for this is conveniently named `git fetch`.","","You'll notice that as we update our representation of the remote repository, our _remote_ branches will update to reflect that new representation. This ties into the previous lesson on remote branches"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Before getting into the details of `git fetch`, let's see it in action! Here we have a remote repository that contains two commits that our local repository does not have."],afterMarkdowns:["There we go! Commits `C2` and `C3` were downloaded to our local repository, and our remote branch `o/master` was updated to reflect this."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### What fetch does","","`git fetch` performs two main steps, and two main steps only. It:","","* downloads the commits that the remote has but are missing from our local repository, and...","* updates where our remote branches point (for instance, `o/master`)","","`git fetch` essentially brings our _local_ representation of the remote repository into synchronization with what the _actual_ remote repository looks like (right now).","","If you remember from the previous lesson, we said that remote branches reflect the state of the remote repositories _since_ you last talked to those remotes. `git fetch` is the way you talk to these remotes! Hopefully the connection between remote branches and `git fetch` is apparent now.","","`git fetch` usually talks to the remote repository through the Internet (via a protocol like `http://` or `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### What fetch doesn't do","","`git fetch`, however, does not change anything about _your_ local state. It will not update your `master` branch or change anything about how your file system looks right now.","","This is important to understand because a lot of developers think that running `git fetch` will make their local work reflect the state of the remote. It may download all the necessary data to do that, but it does _not_ actually change any of your local files. We will learn commands in later lessons to do just that :D","","So at the end of the day, you can think of running `git fetch` as a download step."]}},{type:"ModalAlert",options:{markdowns:["To finish the level, simply `git fetch` and download all the commits!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Travailler avec les dépôts gits distants réduit vraiment les transferts de données _depuis_ et _vers_ les autres dépôts. Du moment que nous pouvons envoyer des commits en avance et en retard, nous pouvons partager tous les types de mise-à-jours qui sont gérées par git (et donc partager le travail, de nouveaux fichiers, de nouvelles idées, des lettres d'amour, etc.).","","Dans cette leçon nous allons apprendre comment rapporter (fetch) des données _depuis_ un dépôt distant vers le nôtre -- la commande pour cela est malignement dénommée `git fetch`.","","Vous allez remarquer qu'au moment où nous mettons à jour notre version du dépôt distant, nos branches _distantes_ vont se mettre à jour pour refléter cette nouvelle représentation. Cela est lié à la leçon précédente sur les branches distantes."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Avant d'aller dans les détails de `git fetch`, voyons-le en action ! Ici nous avons un dépôt distant qui contient deux commits que notre dépôt local n'a pas."],afterMarkdowns:["Voilà ! Les commits `C2` et `C3` ont été téléchargés dans notre dépôt local, et notre branche distante `o/master` a été mise à jour pour refléter cela."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### Ce que fetch fait","","`git fetch` procède en exactement deux principales étapes. Cela :","","* télécharge les commits que le dépôt distant possède mais qui ne sont pas dans le nôtre, et...","* met-à-jour nos branches distantes (par exemple, `o/master`).","","`git fetch` prend en fait notre représentation _locale_ du dépôt distant pour la synchroniser avec ce à quoi le dépôt distant ressemble _réellement_ (à ce moment-là).","","Si vous vous rappelez de la précédente leçon, nous avons dit que les branches distantes reflètent l'état du dépôt distant _depuis_ la dernière fois que vous avez parlé à ces branches distantes. `git fetch` est le moyen de parler à ces branches distantes ! Heureusement la relation entre `git fetch` et les branches distantes est maintenant apparue.","","`git fetch` contacte le dépôt distant par Internet (via un protocole comme `http://` ou `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### Ce que fetch ne fait pas","","`git fetch`, cependant, ne change rien à propos de _vôtre_ état local. Il ne va pas mettre à jour vôtre branche `master` ou changer quelque chose comme les fichiers la représentation des fichiers.","","C'est important à comprendre car un nombre important de développeurs pensent qu'exécuter `git fetch` va rendre leur dépôt local dans le même état que le distant. Cela peut télécharger toutes les données nécessaires pour faire cela, mais cela ne change en réalité _rien_ sur vos fichiers locaux. Nous allons apprendre des commandes dans les niveaux suivants pour faire cela uniquement :D","","Ainsi à la fin de la journée, vous pouvez penser à `git fetch` comme une étape de téléchargement."]}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, exécuter simplement `git fetch` et téléchargez tous les commits !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Trabajar con remotos en git en realidad se reduce a transferir datos _de_ y _hacia_ otros repositorios. Mientras podamos mandar commits de un lado al otro, podemos compartir cualquier tipo de actualización registrada por git (y, por ende, compartir trabajo, archivos nuevos, ideas nuevas, cartas de amor, etc).","","En esta lección aprenderemos cómo traer (hacer `fetch`) datos _desde_ un repositorio remoto - el comando para esto se llama, convenientemente, `git fetch`).","","Vas a notar que a medida que actualicemos nuestra representación de nuestro repositorio remoto, nuestras ramas _remotas_ van a actualizarse para reflejar esa nueva representación. Esto está ligado a la lección anterior sobre ramas remotas"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Antes de entrar en los detalles de `git fetch`, veámoslo en acción. Acá tenemos un repositorio remoto que contiene dos commits que nuestro repositorio local no tiene."],afterMarkdowns:["¡Ahí vamos! Bajamos los commits `C2` y `C3` a nuestro repositorio local, y nuestra rama remota `o/master` fue actualizada para reflejar este cambio."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### ¿Qué hace fetch?","","`git fetch` hace dos simples pasos, y sólo dos simples pasos:","","* baja los commits que el remoto tiene pero no están en nuestro repositorio local, y...","* actualiza a dónde apuntan nuestras ramas remotas (por ejemplo, `o/master`)","","`git fetch` escencialmente sincroniza nuestra representación _local_ del repositorio remoto con el _verdadero_ estado del repositorio remoto (en este momento).","","Si recordás la lección anterior, dijimos que las ramas remotas reflejan el estado de los repositorios remotos _desde_ la última vez que hablaste con ellos. ¡`git fetch` es la manera en que hablás con esos remotos! Espero que ahora esté clara la conexión entre las ramas remotas y `git fetch`.","","Usualmente, `git fetch` habla con el repositorio a través de internet (usando un protocolo como `http://` o `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### ¿Qué *no* hace fetch?","","Sin embargo, `git fetch` no modifica en absoluto _tu_ estado local. No va a actualizar tu rama `master` ni va a cambiar nada sobre cómo se ve tu sistema de archivos en este momento.","","Es importante entender esto, porque un montón de desarrolladores piensan que correr `git fetch` hará que su estado local refleje el estado del remoto. `git fetch` puede descargar los datos necesarios para hacerlo, pero *no* cambia ninguno de tus archivos locales. Vamos a aprender otros comandos para hacer eso más adelante :D","","Entonces, después de todo, podés pensar a `git fetch` como un paso de descarga."]}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente corré `git fetch` y bajate todos los commits"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","Trabalhar com remotos no Git, no final das contas, se resume a transferir dados _de_ e _para_ outros repositórios. Desde que possamos enviar commits para um lado e para o outro, poderemos compartilhar qualquer tipo de atualização que seja gerenciada pelo Git (e portanto compartilhar trabalho, novos arquivos, novas ideias, cartas de amor, etc).","","Nesta lição vamos aprender como baixar dados _de_ um repositório remoto -- o comando para isso é convenientemente chamado de `git fetch`.","","Você perceberá que conforme atualizarmos a representação do repositório remoto, nossos ramos _remotos_ atualizar-se-ão para refletir essa nova representação. Isso tem a ver com o que vimos na lição anterior sobre ramos remotos"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Antes de entrar nos detalhes do `git fetch`, vejamo-no em ação! Aqui temos um repositório remoto que contém dois commits que nosso repositório local não possui."],afterMarkdowns:["Lá vamos nós! Os commits `C2` e `C3` foram baixados para o nosso repositório local, e nosso ramo remoto `o/master` foi atualizado para refletir esse fato."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### O que o fetch faz","","O `git fetch` realiza dois passos principais, e somente estes dois passos principais. Ele:","","* Baixa os commits que o repositório remoto possui mas que estão faltando no repositório local, e...","* Atualiza a referência para a qual os ramos remotos (por exemplo, `o/master`) estão apontando","","O `git fetch` essencialmente faz com que nossa representação _local_ do repositório remoto fique sincronizada com a forma com que o repositório remoto _de fato_ se parece (naquele momento).","","Se você lembrar da lição anterior, nós dissemos que os ramos remotos refletem o estado dos repositórios remotos _desde a última vez_ na qual você falou com esses repositórios. O `git fetch` é a única forma de falar com esses repositórios remotos! Espero que a conexão entre os ramos remotos e o `git fetch` esteja clara agora.","","O `git fetch` geralmente conversa com o repositório remoto por meio da Internet (usando um protocolo como `http://` ou `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### O que o fetch NÃO faz","","O `git fetch`, no entanto, não muda nada do estado _local_ do repositório. Ele não atualiza o seu ramo `master` nem muda nada na forma como o seu sistema de arquivos está no momento.","","É importante entender isso, pois muitos desenvolvedores pensam que executar `git fetch` fará com que o trabalho local reflita o estado do repositório remoto. Ele pode até baixar todos os dados necessários para fazê-lo, mas ele _não_ muda de fato nenhum dos arquivos locais. Vamos aprender comandos para fazê-lo nas lições a seguir :D","","No final das contas, você pode pensar no `git fetch` como um passo de download."]}},{type:"ModalAlert",options:{markdowns:["Para terminar este nível, simplesmente execute `git fetch` e baixe todos os commits!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git fetch","","透過 git remote 其實就是把資料接收或傳送到其它的 repository，只要我們可以將資料傳進及傳出，我們就可以分享任何被 git 所追蹤的 repository 的更新（例如分享工作進度，新的檔案，新的想法，以及情書等等...）。","","在這個教學中，我們會學習到如何從 remote repository 來 fetch （抓取）資料，這個指令叫作 `git fetch`。","","你將會注意到當我們的 remote repository 更新的時候，相對應的 _remote_ branch 也會反應該更新，這個跟我們之前所提到的 remote branch 的特性是吻合的。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在講到 `git fetch` 的細節之前，我們要先來看一下例子！在這裡我們有一個新增了兩個 commit 的 remote repository，而且我們的 local repository 並沒有包含這兩個 commit。"],afterMarkdowns:["看吧！commit `C2` 以及 `C3` 已經被下載到我們的 local repository，而且我們的 remote branch `o/master` 也更新了。"],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### fetch 做了什麼","","`git fetch` 只有執行了兩個主要步驟，包含：","","* 下載 remote 有的 commit，但是在我們的 local repository 是沒有該 commit。還有...","* 更新我們 remote branch 所指向的地方（例如， `o/master`）","","基本上，`git fetch` 同步了我們的 local repository 以及 remote repository 的最新狀態。","","假如你還記得之前的教學的話，我們說過 remote branch 反應了 remote repository 的狀態，原因在於說你最後接觸的是這些 remote repository，而你就是利用 `git fetch` 來接觸這些 remote repository！現在 remote branch 跟 `git fetch` 的關係已經很明顯了。","","`git fetch` 通常是透過網路來跟 remote 溝通（透過一個 protocol （協定），例如 `http://` 或者是 `git://`）。",""]}},{type:"ModalAlert",options:{markdowns:["### fetch 沒有做的事情","","然而，`git fetch` 並不會影響到在你的 local repository 中的 `master` branch，他並不會將你的 `master` branch 更新到最新的狀態。","","這個觀念很重要，因為很多程式設計師以為 `git fetch` 可以讓他們在 local repository 上面的工作跟 remote repository 的工作可以同步。它是會下載同步所需的資料，但是不會更新任何的檔案，我們會在後面的教學中提到如何做到這件事情。:D","","因此，你可以把 `git fetch` 想成是在下載資料。"]}},{type:"ModalAlert",options:{markdowns:["要完成這一關，只要透過 `git fetch` 並且下載全部的 commit 即可！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","git remote可以归结为向其它仓库推送/拉取数据. 只要我们能回溯或前推提交, 我们就可以分享任何类型的被git跟踪的更新(工作, 新想法, 情书等等)","","本节课我们将学习 如何从远端仓库获取数据 -- 这个命令叫` git fetch`","","你会注意到当我们更新远端的仓库时, 我们的远端分支也会更新 并映射到最新的远端仓库."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在解释`git fetch`前, 我们看看实例. 这里我们有一个包含了两个新提交的远端仓库, 这两新提交不存在于本地"],afterMarkdowns:["就是这样了! `C2`,`C3`被下载到了本地仓库, 同时`o/master`被更新并映射到了这一变更 "],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### What fetch does","","`git fetch` 完成了两步:","","* 下载本地仓库未包含的提交对象","* 更新我们的远端分支点(如, `o/master`)","","`git fetch` 实际上将本地对远端的映射 做了同步更新","","如果你还记得之前的课程, 我们说过远端分支映射了远端仓库的状态(你最后与远端通信的那一刻), `git fetch` 是你与远端交流的方式!","","`git fetch` 通常通过互联网(像 `http://` or `git://`) 与远端仓库通信.",""]}},{type:"ModalAlert",options:{markdowns:["### fetch 不能做的事","","`git fetch`, 不能改变你的本地状态. 你不会更新你的`master` 或者 任何与文件系统相关的东西.","","所以, 你可以将`git fetch`的执行 视为下载"]}},{type:"ModalAlert",options:{markdowns:["要完成本节, 只需用`git fetch`下载所有的提交! "]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch","","In Git mit entfernten Repositorys zu arbeiten lässt sich wirklich auf das Hin- und Zurückübertragen von Daten reduzieren. Solange wir Commits hin und her schicken können, können wir jede Art Update teilen, das von Git getrackt wird (und somit Arbeit, neue Dateien, neue Ideen, Liebesbriefe etc. teilen).","","In diesem Level werden wir lernen, wie man Daten _von_ einem entfernten Repository holt -- der entsprechende Befehl heißt praktischerweise `git fetch`.","","Dir wird auffallen, dass mit der Aktualisierung unserer Darstellung des entfernten Repositorys die _Remote_ Branches auf den neuesten Stand gebracht werden. Das passt zum vorherigen Level über Remote Branches."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Bevor wir uns die Einzelheiten von `git fetch` ansehen wollen wir es mal in Aktion sehen. Wir haben hier ein entferntes Repository, das zwei Commits hat die in unserem lokalen Repository fehlen."],afterMarkdowns:["Das war's! Die Commits `C2` und `C3` wurden zu unserem Repository heruntergeladen und unser Remote Branch `o/master` wurde aktualisiert."],command:"git fetch",beforeCommand:"git clone; git fakeTeamwork 2"}},{type:"ModalAlert",options:{markdowns:["### Was Fetch tut","","`git fetch` führt genau zwei Schritte aus:","","* Es lädt die Commits herunter, die im lokalen Repository fehlen, und ...","* aktualisiert die Remote Branches wo nötig (zum Beispiel, `o/master`).","","`git fetch` synchronisiert im Prinzip unsere _lokale_ Abbildung des entfernten Repositorys mit dem wie das entfernte Repository _tatsächlich_ aussieht (in diesem Moment).","","Wie du dich vielleicht erinnerst, haben wir im letzten Level gesagt, dass die Remote Branches den Zustand der Branches auf dem entfernten Repository darstellen _seit_ du das letzte Mal dieses Repository angesprochen hast. `git fetch` ist die Methode mit der du das Repository ansprichst! Der Zusammenhang zwischen Remote Branches und `git fetch` ist damit hoffentlich klar.","","`git fetch` kommuniziert mit dem entfernten Repository in der Regel über das Internet (über ein Protokoll wie `http://` oder `git://`).",""]}},{type:"ModalAlert",options:{markdowns:["### Was Fetch nicht tut","","`git fetch` ändert allerdings überhaupt nichts an _deinen_ lokalen Branches. Es aktualisiert nicht deinen `master` oder ändert irgendetwas an deinem Checkout.","","Das ist wichtig zu wissen, denn eine Menge Entwickler glauben, wenn sie `git fetch` ausführen würden ihre lokalen Branches auf den Stand des entfernten Repositorys gebracht. Es lädt zwar alle Daten herunter, damit man diese Aktualisierung durchführen kann, aber es ändert _nichts_ an deinen lokalen Branches. Wir werden in späteren Level Befehle genau dafür kennenlernen. :D","","Am Ende des Tages kannst du dir `git fetch` also als den Donwload-Schritt vorstellen."]}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur `git fetch` ausführen, um alle Commits herunterzuladen!"]}}]}}}
},{}],98:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C7","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C3","C6"],"id":"C7"}},"HEAD":{"target":"foo","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C6","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"foo","id":"HEAD"}}}',solutionCommand:"git fetch origin master~1:foo;git fetch origin foo:master;git checkout foo;git merge master",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"C1","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C6","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"foo","id":"HEAD"}}}',name:{en_US:"Fetch arguments",fr_FR:"Arguments de fetch",zh_CN:"Fetch 的参数",zh_TW:"fetch 的參數",es_AR:"Parámetros de fetch",pt_BR:"Parâmetros do fetch",de_DE:"Optionen für Fetch",ja:"Fetchの引数"},hint:{en_US:'Pay attention how the commit ids may have swapped! You can read slides again with "help level"',fr_FR:'Faites attention à la façon dont les ids des commits ont été intervertis ! Vous pouvez lire une nouvelle fois les slides avec "help level"',zh_CN:"注意下提交对象的id是如何交换的! 你可以通过`help level`再次切到幻灯片!",zh_TW:"注意 commit 的 id 是怎麼被交換的！你可以透過 `help level` 來閱讀對話視窗！",es_AR:'¡Prestá atención a cómo podrían haberse invertido los ids de los commits! Podés volver a leer toda la lección usando "help level"',pt_BR:'Preste atenção em como os identificadores dos commits podem ter trocado! Você pode ler os slides novamente com "help level"',de_DE:'Beachte wie die Commit IDs getauscht wurden! Du kannst den Einführungsdialog mit "help level" erneut anzeigen',ja:"コミットIDの入れ替わりに注意！スライドを復習するには`help level`を実行"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git fetch arguments","","So we've just learned all about git push arguments, this cool `<place>` parameter, and even colon refspecs (`<source>:<destination>`). Can we use all this knowledge for `git fetch` as well?","","You betcha! The arguments for `git fetch` are actually *very, very* similar to those for `git push`. It's the same type of concepts but just applied in the opposite direction (since now you are downloading commits rather than uploading).","","Let's go over the concepts one at a time..."]}},{type:"ModalAlert",options:{markdowns:["### The `<place>` parameter","","If you specify a place with git fetch like in the following command:","","`git fetch origin foo`","","Git will go to the `foo` branch on the remote, grab all the commits that aren't present locally, and then plop them down onto the `o/foo` branch locally.","","Let's see this in action (just as a refresher)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["By specifying a place..."],afterMarkdowns:["We download only the commits from `foo` and place them on `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["You might be wondering -- why did git plop those commits onto the `o/foo` remote branch rather than just plopping them onto my local `foo` branch? I thought the `<place>` parameter is a place that exists both locally and on the remote?","","Well git makes a special exception in this case because you might have work on the `foo` branch that you don't want to mess up!! This ties into the earlier lesson on `git fetch` -- it doesn't update your local non-remote branches, it only downloads the commits (so you can inspect / merge them later).",""]}},{type:"ModalAlert",options:{markdowns:['"Well in that case, what happens if I explicitly define both the source and destination with `<source>:<destination>`?"',"","If you feel passionate enough to fetch commits *directly* onto a local branch, then yes you can specify that with a colon refspec. You can't fetch commits onto a branch that is checked out, but otherwise git will allow this.","","Here is the only catch though -- `<source>` is now a place on the *remote* and `<destination>` is a *local* place to put those commits. It's the exact opposite of git push, and that makes sense since we are transferring data in the opposite direction!","","That being said, developers rarely do this in practice. I'm introducing it mainly as a way to conceptualize how `fetch` and `push` are quite similar, just in opposite directions."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this craziness in action:"],afterMarkdowns:["Wow! See, git resolved `foo~1` as a place on the origin and then downloaded those commits to `bar` (which was a local branch). Notice how `foo` and `o/foo` were not updated since we specified a destination."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What if the destination doesn't exist before I run the command? Let's see the last slide but without `bar` existing beforehand."],afterMarkdowns:["See, it's JUST like git push. Git made the destination locally before fetching, just like git will make the destination on remote before pushing (if it doesn't exist)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["No args?","","If `git fetch` receives no arguments, it just downloads all the commits from the remote onto all the remote branches..."],afterMarkdowns:["Pretty simple, but worth going over just once."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ok, enough talking! To finish this level, fetch just the specified commits in the goal visualization. Get fancy with those commands!","","You will have to specify the source and destination for both fetch commands. Pay attention to the goal visualization since the IDs may be switched around!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Les arguments de git fetch","","Donc nous venons de tout apprendre sur les arguments de git push, le paramètre cool `<place>`, et même la ponctuation pour refspecs (`<source>:<destination>`). Pouvons-nous utiliser ces connaissances pour  `git fetch` aussi ?","","Vous l'avez parié ! Les arguments pour `git fetch` sont en fait *très, très* similaires à ceux de `git push`. Il s'agit du même type de concepts mais simplement appliqués dans une direction différente (puisque maintenant vous téléchargez des commits plutôt que les envoyer).","","Voyons ces concepts un par un..."]}},{type:"ModalAlert",options:{markdowns:["### Le paramètre `<place>`","","Si vous spécifiez un emplacement avec git fetch dans la commande suivante :","","`git fetch origin foo`","","Git va aller à la branche distante `foo`, récupérer tous les commits qui ne sont pas présents localement, et ensuite les faire apparaître dans la branche locale `o/foo`.","","Voyons cela en action (juste pour se rappeler)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["En spécifiant un emplacement..."],afterMarkdowns:["Nous téléchargeons uniquement les commits de `foo` et les plaçons dans `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["Vous vous demandez peut-être -- pourquoi git a fait apparaître ces commits dans la branche distante `o/foo` plutôt que les placer directement dans ma branche locale `foo` ? Je pensais que le paramètre `<place>` était un emplacement qui existait à la fois localement et à distance ?","","Eh bien git fait une exception dans ce cas parce que vous pouvez avoir du travail dans la branche `foo` que vous ne voulez pas gâcher !! Cela est lié à la dernière lesson sur `git fetch` -- cela ne met pas à jour vos branches locales, cela télécharge uniquement les commits (ainsi vous pouvez les inspecter / fusionner plus tard).",""]}},{type:"ModalAlert",options:{markdowns:['"Dans ce cas, que ce passe-t-il si je spécifie explicitement la source et la destination `<source>:<destination>` ?"',"","Si vous vous sentez assez passionnés pour rapatrier (fetch) les commits *directement* dans votre branche locale, alors oui vous pouvez préciser cela avec la notation refspec. Vous ne pouvez cependant pas rapatrier les commits dans la branche courante.","","Ici est la seule différence -- à part que `<source>` est maintenant l'emplacement sur le dépôt *distant* et `<destination>` sur le dépôt *local* où rajouter ces commits. C'est l'exact opposé de git push, et cela se tient puisque nous transférons des données dans la direction opposée !","","Cela dit, les développeurs l'utilisent rarement en pratique. Je l'introduis principalement pour concrétiser le fait que `fetch` et `push` sont très similaires, simplement dans des directions opposées."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons cette folie en action :"],afterMarkdowns:["Wow ! Voyez, git a résolu `foo~1` comme un emplacement sur origin et a ensuite téléchargé les commits dans `bar` (qui était une branche local). Remarquez comment `foo` et `o/foo` n'ont pas été mises à jour puisque nous avons spécifié une destination."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Que se passe-t-il si l'emplacement n'existe pas avant que j'exécute la commande ? Voyons cela dans le dernier slide quand `bar` n'existe pas encore."],afterMarkdowns:["Vous voyez, c'est COMME un git push. Git a créé la destination localement avant le fetch, simplement comme il va créer la destination à distance avant le push (si elle n'existe pas)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Pas d'arguments ?","","Si `git fetch` ne reçoit pas d'arguments, cela télécharge simplement tous les commits dans toutes les branches distantes..."],afterMarkdowns:["Assez simple, mais faisons-le juste une fois."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ok, assez parlé ! Pour finir ce niveau, faites simplement un fetch des commits indiqués dans le fenêtre de visualisation de l'objectif. Appropriez-vous ces commandes !","","Vous allez avoir à préciser la source et la destination pour les deux commandes fetch. Faites attention à la fenêtre de visualisation puisque les IDs peuvent avoir changé de position !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de git fetch","","Entonces, recién aprendimos todo sobre los parámetros de push, este parámetro `<lugar>` copado, e incluso las referencias separadas por dos puntos (`<origen>:<destino>`). ¿Podremos usar todo ese conocimiento para `git fetch`, también?","","¡Dalo por hecho! Los parámetros para `git fetch` son realmente *muy, muy* similares a los de `git push`. Es el mismo tipo de conceptos, pero aplicados en la dirección opuesta (dado que ahora estás bajando commits en lugar de subirlos).","","Veamos los conceptos de a uno a la vez..."]}},{type:"ModalAlert",options:{markdowns:["### El parámetro `<lugar>`","","Si especificás un lugar con git fetch como en el comando siguiente:","","`git fetch origin foo`","","Git va a ir a la rama `foo` en el remoto, va a traer todos los commits que no estén presentes localmente, y luego los aplicará sobre la rama `o/foo` localmente.","","Veámoslo en acción (refresquemos el concepto)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Especificando un lugar..."],afterMarkdowns:["Sólo bajamos los commits de `foo` y los ubicamos en `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:['Te podrás estar preguntando "¿Por qué git aplicó esos commits sobre la rama `origin/foo` en lugar de aplicarlos sobre la rama `foo` local? Pensé que el parámetro `<lugar>` era un lugar que existía tanto local como remotamente"',"","Bueno, git hace una excepción especial en este caso, porque vos podrías tener trabajo en la rama `foo` que no quieras mezclar. Esto refiere a la lección anterior sobre `git fetch` - no actualiza tus ramas locales no-remotas, sólo descarga los commits (para que pueadas verlos o mergearlos después).",""]}},{type:"ModalAlert",options:{markdowns:['"Bueno, y, en ese caso, ¿qué pasa si explícitamente defino el origen y destino con `<origen>:<destino>`?"',"","Si te sentís lo suficientemente seguro como para traer commits *directamente* a una rama local, entonces, sí, podés especificarlo usando una referencia con dos puntos. No podés traer commits a una rama que tengas checkouteada, pero en cualquier otro caso git te lo va a permitir.","","Este es el único problemita, igual: `<origen>` es ahora un lugar en el *remoto*, y `<destino>` es un lugar *local* en donde poner esos commits. Es exactamente lo opuesto a git push, y eso tiene sentido dado que ¡estamos transfiriendo los datos en la dirección opuesta!","","Habiendo dicho esto, dificilmente alguien use esto en la práctica. Lo estoy presentando principalmente como un modo de conceptualizar que `fetch` y `push` son bastante similares, sólo que en direcciones opuestas."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos esta locura en acción:"],afterMarkdowns:["¡Wow! Mirá: git resolvió `foo~1` como un lugar en el origin y bajó esos commits a `bar` (que era una rama local). Notá como `foo` y `o/foo` no fueron actualizados, dado que especificamos un destino."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Qué pasa si el destino no existe antes de que corra este comando? Veamos el último ejemplo pero sin que `bar` exista de antemano."],afterMarkdowns:["Mirá: es IGUAL que git push. Git creó el destino localmente antes de hacer el fetch, tal como git creará el destino en el remoto antes de pushear (si no existiera)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Sin argumentos?","","Si `git fetch` no recibe ningún argumento, simplemente descarga todos los commits del remoto a todas las ramas remotas..."],afterMarkdowns:["Bastante simple, pero vale la pena verlo al menos una vez."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Bueno, demasiada charla. Para completar este nivel, fetcheáte sólo los commits especificados en la visualización del objetivo. ¡Amigate con esos comandos!","","Vas a tener que especificar el origen y el destino para ambos comandos fetch. Prestá atención al objetivo dado que ¡los IDs pueden estar invertidos!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parâmetros do git fetch","","Então acabamos de aprender tudo sobre os parâmetros do git push, inclusive sobre esse parâmetro bacana chamado `<lugar>`, e até mesmo sobre colon refspecs (`<origem>:<destino>`). Será que poderíamos aplicar todo esse conhecimento também ao `git fetch`?","","Você adivinhou! Os parâmetros do `git fetch` são na verdade *muito, muito* similares aos do `git push`. Trata-se do mesmo tipo de conceito, só que aplicado na direção oposta (já que agora é um download em vez de um upload).","","Vamos aos conceitos um por vez..."]}},{type:"ModalAlert",options:{markdowns:["### O parâmetro `<lugar>`","","Se você passar um lugar ao git fetch, como no seguinte comando:","","`git fetch origin foo`","","O Git vai ao ramo remoto `foo` e pega todos os commits que não estão presentes localmente, jogando-os no ramo local `o/foo`.","","Vejamo-lo em ação (só para refrescar a memória)."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Especificando um lugar..."],afterMarkdowns:["Baixamos só os commits de `foo` e colocamos em `o/foo`"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["Você pode estar se perguntando -- por que o Git colocou os commits no ramo remoto `o/foo` em vez de simplesmente jogá-los no meu ramo local `foo`? Eu pensei que o parâmetro fosse um `<lugar>` que existisse tanto no repositório local como no remoto?","","Bem, o Git tem uma exceção especial neste caso, porque pode ser que exista trabalho seu no ramo local `foo` que você não queira bagunçar!! Esse fato é relacionado com o abordado na lição anterior sobre o `git fetch` -- ele não atualiza ramos locais não-remotos, ele apenas baixa os commits (de forma que você possa inspecioná-los e/ou realizar um merge posteriormente).",""]}},{type:"ModalAlert",options:{markdowns:['"Bem, neste caso, o que acontece se eu definir explicitamente tanto a origem como o destino, com `<origem>:<destino>`?"',"","Se você estiver apaixonado o suficiente para baixar commits *diretamente* em um ramo local, então sim, você pode especificar esse comportamento com um colon refspec. Você só não pode baixar commits em um ramo que esteja atualmente em checkout, mas se não estiver, o Git permitirá o fetch.","","Aqui está o único detalhe -- `<origem>` agora é uma referência *remota* e `<destino>` é uma referência *local* de onde colocar esses commits. É exatamente o oposto do git push, e realmente faz sentido, já que estamos transferindo os dados na direção oposta!","","Tendo dito isto, desenvolvedores raramente fazem isso na prática. Estou introduzindo essa informação mais como uma forma de conceitualizar a forma como `fetch` e `push` são tão similares, apenas em direções opostas."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos essa loucura em ação:"],afterMarkdowns:["Wow! Viu, o Git entendeu o `foo~1` como um lugar de origin e baixou os commits para o ramo local `bar`. Veja como `foo` e `o/foo` não foram atualizados, já que especificamos outro destino."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["E se o destino não existir antes de eu executar o comando? Vamos rever o último slide, mas em uma situação na qual o `bar` não existe de antemão."],afterMarkdowns:["Viu? Funciona EXATAMENTE como o git push. O Git criou o destino localmente antes do fetch, da mesma forma como o Git cria o destino (se ele não existir) no repositório remoto durante um push."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Sem parâmetros?","","Se o `git fetch` não receber argumentos, ele simplesmente baixa todos os commits do repositório remoto em todos os ramos remotos..."],afterMarkdowns:["Bastante simples, mas importante de rever ao menos uma vez."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ok, chega de conversa! Para completar este nível, faça fetch apenas dos commits especificados na visualização do objetivo. Capriche nos comandos!","","Você terá de especificar tanto a origem como o destino em ambos os comandos de fetch. Preste atenção na janela de visualização, já que os identificadores podem trocar!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git fetch 的參數","","我們剛學到了所有關於 git push 的參數，有非常棒的 `<place>` 參數，甚至是 colon refspecs（`<source>:<destination>`），我們可不可以也同樣套用到 `git fetch` 上面？","","你猜對了！`git fetch` 的參數*非常非常*類似 `git push`，一樣的概念，但方向不同（因為你在下載 commit，而不是在上傳 commit）。","","讓我們一次講一個概念..."]}},{type:"ModalAlert",options:{markdowns:["###`<place>` 參數","","對於 `git fetch`，如果你特別指定了一個 `<place>`：","","`git fetch origin foo`","","git 會到 remote 上的 `foo` branch，抓下所有不在 local 上的 commit，然後將它們放到 local 的 `o/foo` branch。","","讓我們實際看一下（就只是一個*更新*的方法）。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["指定一個 `<place>`..."],afterMarkdowns:["我們只下載了 `foo` 上的 commit，並且把它們放到 `o/foo`。"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["你也許會感到奇怪，為什麼 git 是把這些 commit 放到 `o/foo` branch 而不是放到我的 local 的 `foo` branch？ 我認為，`<place>` 參數是表示一個位置，這個位置同時存在 local 跟 remote 上？","","因為你可能已經 checkout 到 `foo` branch 上，而且你不想要打亂上面的 commit，因此 git 才會特別這樣做！！這就又回到之前的 `git fetch` 的課程，它並不會放到你的 local 上的 branch (該 branch 沒有對應到任何的 remote branch)，它只會下載 commit 到 local 上且表示 remote 的 branch（所以你之後可以觀察或者 merge 它們）。",""]}},{type:"ModalAlert",options:{markdowns:['"在該例子當中，如果我特別透過 `<source>:<destination>` 來指定 source 以及 destination，會發生什麼事情？"',"","如果你很想要把 fetch 回來的 commit *直接*放到 local branch，那麼你就可以利用一個 colon refspec 來做到。你不能夠把 fetch 回來的 commit 放到你目前正 checkout 的 branch，如果不是的話，git 就會允許你這麼做。","","這裡只有一個重點，`<source>` 現在是一個在 *remote* 上的 branch，而且 `<destination>` 是一個放置這些 commit 的 *local* 的位置。它剛好就是 `git push` 的相反，而且因為我們在相反方向傳遞資料，所以這也很合理！","","其實，程式設計師很少會想要做這個，我主要是強調 `fetch` 以及 `push` 的概念是很類似的，就只是方向相反而已。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們來實際看一下這個瘋狂的事情："],afterMarkdowns:["哇！看到了吧，git 把  `foo~1` 解讀成一個在 origin 上的位置，而且把該位置上面的 commit 下載到 `bar`（這是一個 local branch）上面，注意，因為我們有指定目的地，因此 `foo` 跟 `o/foo` 並沒有被更新。"],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果我在執行這個指令之前，destination 不存在的話會怎樣？我們回到上一個例子，但這一次事前並沒有 `bar` 這個 branch 的存在。"],afterMarkdowns:["看到了吧，這就像是 `git push`，在 fetch 之前，git 會自己建立 destination，就好像是在 push 之前， git 會建立 remote 上的 destination 一樣（如果它不存在的話）。"],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["沒有參數的情況？","","如果使用 `git fetch` 的時候，沒有指定任何的參數，那就相當於它會下載 remote 上面的所有的 commit，並且把這些 commit 放到 local 上面所有對應到 remote 的 branch..."],afterMarkdowns:["超簡單，但是所有的更新只做一次，很值得。"],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["好的，講了好多！要完成這一關，fetch 視覺化的目標所指定的 commit，好好玩這些指令吧！","","對於兩個 fetch 的指令，你必須要指定 source 以及 destination，注意一下視覺化的目標，因為 commit 的 id 可以被交換！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git fetch arguments","","我们刚学习了git push的参数, 特别是`<place>`参数, 更特别的冒号分隔(`<source>:<destination>`). 这些参数可以用于`git fetch`吗?","","你猜中了! git fetch的参数和git push相当相似. 都是相同的概念, 但是方向相反(因为现在你是下载 而非上传)","","我们过一个概念.."]}},{type:"ModalAlert",options:{markdowns:["###  `<place>` 参数","","你可以像如下命令这样为git fetch设置<place>","","`git fetch origin foo`","","Git 会来到远端的`foo`分支, 然后抓取所有不在本地的新提交, 放到本地的分支`o/foo`","","我们看看这个动作(这像是更新器) "]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["通过指定place..."],afterMarkdowns:["我们只下载更新了o/foo"],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["你可以想知道 -- 为何git 会将新提交压入到o/foo 而不是 压入到我本地的foo. 我想 <place>参数就是同时存在于本地和远端 的 <place> ","","好吧, 本例中git 有个特殊例外, 因为你可能位于foo 分支, 你也不想弄乱它. 这得联系之前的课程 -- 它不会更新你的本地工作, 它只是下载提交(这样, 稍后你可以检查 或者 合并之).  ",""]}},{type:"ModalAlert",options:{markdowns:["如果我们设定了 `<source>:<destination>`会发生什么呢?","","如果你觉得直接更新本地分支很爽, 那你就用冒号refspec吧. 不过, 你不能在检出的分支上干这个事.","","这里只有一个特点 -- `source` 是远端的位置, 而`<destination>`是要放置提交的本地位置, 这真是有趣 -- 这也是传送数据的对立方向! ","","话虽如此, 开发者很少这么做. 我已经介绍了, 概念上fetch/push很相似, 只是它们方向相反.  "]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["我们看看更疯狂的例子:"],afterMarkdowns:["哇! 看见了吧, git 将`foo~1` 解析成一个origin的位置, 然后下载到了本地`bar`. 注意foo 和 o/foo都没有得到更新 (因为我们指定了destination)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果 destination 不存在呢? 我们看看上个幻灯片(不含bar)! "],afterMarkdowns:["看见了吧, 它就像是git push. Git会自己确立本地destination, 就像是git在push时, 会自己确立destination(如果它不存在的话)"],command:"git fetch origin foo~1",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["没有参数呢?","","如果 `git fetch` 没有参数, 它会下载所有远端分支.."],afterMarkdowns:["相当简单, 但是值得一次更新!"],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["好, 说得太多了! 要完成本节, 抓取可视窗口指定的提交, 使用这些魔幻的命令吧.","","使用fetch时, 你必须指定source/destination. 注意一下可视窗口, 因为提交对象的id可以会被切换哦!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Fetch Optionen","","Nun haben wir also alles über `git push` Optionen gelernt, diesen coolen `<Ort>`-Parameter, and sogar über mit Doppelpunkt getrennte Ref-Spezifikationen (`<Quelle>:<Ziel>`). Können wir all dieses neu erworbene Wissen auch auf `git fetch` anwenden?","","Jede Wette! Die Optionen für `git fetch` sind wirklicht *sehr, sehr* ähnlich denen von `git push`. Es sind dieselben Verfahren, nur in die andere Richtung angewendet (da man bei `fetch` herunterlädt anstatt hochzuladen).","","Gehen wir die verschiedenen Verfahrensweise mal eine nach der anderen durch ..."]}},{type:"ModalAlert",options:{markdowns:["### Der Parameter `<Ort>`","",'Wenn du, wie folgt, einen "Ort" bei `git fetch` angibst:',"","`git fetch origin foo`","","wird Git zum Branch `foo` auf dem Remote gehen, dort alle Änderungen holen, die es lokal noch nicht gibt, und sie an den lokalen Branch `o/foo` anhängen.","","Schauen wir uns das mal live an (nur zur Wiederholung)"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Durch Angabe eines Ortes ..."],afterMarkdowns:["... laden wir die fehlenden Commits von `foo` und packen sie auf `o/foo` drauf."],command:"git fetch origin foo",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"ModalAlert",options:{markdowns:["Du wunderst dich vielleicht warum Git diese Commits auf den `o/foo` Branch gepacht hat, anstatt einfach direkt auf den lokalen Branch `foo`? Zeigt der Parameter `<Ort>` nicht einen Ort an, der sowohl lokal als auch entfernt existiert?","","Nun ja, Git geht diesen Schritt weil du auf `foo` ja noch Commits haben könntest, die nicht auf dem Server sind, und da will es nichts durcheinander bringen. Ähnlich wie beim früheren Level zu `git fetch` -- es aktualisiert nicht deine lokalen Arbeits-Branches, es lädt die Commits nur in die `o` (bzw. `origin`) Branches, damit du sie dir in Ruhe anschauen und integrieren kannst.",""]}},{type:"ModalAlert",options:{markdowns:["Wenn das so ist, was passiert dann wenn ich explizit Quelle und Ziel im Ort angebe?","","Wenn du Commits wirklich per `fetch` *direkt* auf einen lokalen Branch holen willst, dann, ja, kannst du das mit einer Ref-Spezifikation erreichen. Das funktioniert nicht mit deinem gerade ausgecheckten Branch, aber davon abgesehen lässt Git es zu.","","Nur ein Haken -- `<Quelle>` bezeichnet jetzt einen Ort auf dem *entfernten* Server und `<Ziel>` ist ein *lokaler* Ort, wo die Commits hin sollen. Es ist genau umgekehrt wie bei `git push` und das ist logisch, denn wir übertragen die Daten ja auch in die umgekehrte Richtung!","","Davon abgesehen benutzt man das in der Praxis kaum. Ich zeige das vor allem um zu verdeutlichen, wie `fetch` und `push` sehr ähnlich sind, nur in entgegengesetzten Richtungen."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns den Quatsch mal in Aktion an:"],afterMarkdowns:["Wow! Siehst du, git löst `foo~1` als Ort auf dem Server `origin` auf und lädt dessen Commits herunter in `bar` hinein. Beachte wie `foo` und `o/foo` *nicht* aktualisiert wurden, da wir ein Ziel angegeben haben."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git branch bar; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was ist denn wenn das Ziel nicht existiert, für das ich den Befehl ausführe? Schauen wir uns das letzte Beispiel noch mal an, nur dass `bar` jetzt noch nicht existiert."],afterMarkdowns:["Siehst du, es ist *genau* wie `git push`. Git erstellt das Ziel lokal bevor es den `fetch` ausführt, genauso wie Git erst das Ziel auf dem Remote erstellt, befor es pusht (falls das Ziel nicht existiert)."],command:"git fetch origin foo~1:bar",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo 2"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Keine Optionen?","","Wenn bei `git fetch` keine Optionen angegeben werden, lädt es einfach alle Commits vom Remote auf die lokalen Abbildungen aller Remote Branches ..."],afterMarkdowns:["Ziemlich einfach, aber man sollte es mal gesehen haben."],command:"git fetch",beforeCommand:"git branch foo; git clone; git fakeTeamwork foo; git fakeTeamwork master"}},{type:"ModalAlert",options:{markdowns:["Ok, genug gelabert! Um den Level zu schaffen musst du nur die im Zielbild angegebenen Commits per `fetch` holen. Sei kreativ mit den Befehlen!","","Du wirst Quelle und Ziel bei beiden `fetch` Befehlen angeben müssen. Schau dir das Zielbild gut an, da die IDs vertauscht sein könnten!"]}}]}}}},{}],99:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22o/master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22o/master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3A%5B%22master%22%5D%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%2C%22originTree%22%3A%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D%7D",solutionCommand:"git clone;git fakeTeamwork;git commit;git pull --rebase;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Diverged History",zh_CN:"分散的历史",zh_TW:"diverged history",es_AR:"Historia divergente",pt_BR:"Histórico divergente",de_DE:"Abweichende History",fr_FR:"Historique divergent",ja:"履歴の分岐"},hint:{en_US:"check out the ordering from the goal visualization",zh_CN:"检出可视化目标中的顺序",zh_TW:"確認視覺化的目標中的順序",es_AR:"Prestá atención al orden del objetivo",ot_BR:"Preste atenção na ordem da visualização do objetivo",de_DE:"Beachte die Reihenfolge in der Zieldarstellung",ja:"ゴールのビジュアライズの順番を参照",fr_FR:"regardez l'ordre dans la fenêtre de visualisation d'objectif"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Diverged Work","","So far we've seen how to `pull` down commits from others and how to `push` up our own changes. It seems pretty simple, so how can people get so confused?","","The difficulty comes in when the history of the repository *diverges*. Before discussing the details of this, let's see an example...",""]}},{type:"ModalAlert",options:{markdowns:["Imagine you clone a repository on Monday and start dabbling on a side feature. By Friday you are ready to publish your feature -- but oh no! Your coworkers have written a bunch of code during the week that's made your feature out of date (and obsolete). They've also published these commits to the shared remote repository, so now *your* work is based on an *old* version of the project that's no longer relevant.","","In this case, the command `git push` is ambiguous. If you run `git push`, should git change the remote repository back to what it was on Monday? Should it try to add your code in while not removing the new code? Or should it totally ignore your changes since they are totally out of date?","","Because there is so much ambiguity in this situation (where history has diverged), git doesn't allow you to `push` your changes. It actually forces you to incorporate the latest state of the remote before being able to share your work."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["So much talking! Let's see this situation in action"],afterMarkdowns:["See? Nothing happened because the command fails. `git push` fails because your most recent commit `C3` is based off of the remote at `C1`. The remote has since been updated to `C2` though, so git rejects your push"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["How do you resolve this situation? It's easy, all you need to do is base your work off of the most recent version of the remote branch.","","There are a few ways to do this, but the most straightforward is to move your work via rebasing. Let's go ahead and see what that looks like."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now if we rebase before pushing instead..."],afterMarkdowns:["Boom! We updated our local representation of the remote with `git fetch`, rebased our work to reflect the new changes in the remote, and then pushed them with `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Are there other ways to update my work when the remote repository has been updated? Of course! Let's check out the same thing but with `merge` instead.","","Although `git merge` doesn't move your work (and instead just creates a merge commit), it's a way to tell git that you have incorporated all the changes from the remote. This is because the remote branch is now an *ancestor* of your own branch, meaning your commit reflects all commits in the remote branch.","","Lets see this demonstrated..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Now if we merge instead of rebasing..."],afterMarkdowns:["Boom! We updated our local representation of the remote with `git fetch`, *merged* the new work into our work (to reflect the new changes in the remote), and then pushed them with `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Awesome! Is there any way I can do this without typing so many commands?","","Of course -- you already know `git pull` is just shorthand for a fetch and a merge. Conveniently enough, `git pull --rebase` is shorthand for a fetch and a rebase!","","Let's see these shorthand commands at work."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["First with `--rebase`..."],afterMarkdowns:["Same as before! Just a lot shorter."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["And now with regular `pull`"],afterMarkdowns:["Again, exact same as before!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["This workflow of fetching, rebase/merging, and pushing is quite common. In future lessons we will examine more complicated versions of these workflows, but for now let's try this out.","","In order to solve this level, take the following steps:","","* Clone your repo","* Fake some teamwork (1 commit)","* Commit some work yourself (1 commit)","* Publish your work via *rebasing*"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Travail divergeant","","Jusqu'à présent nous avons vu comment rapatrier (`pull`) les commits des collaborateurs et comment envoyer les vôtres (`push`). Cela a l'air simple, alors comment certains peuvent être si perdus ?","","La difficulté arrive quand l'historique du dépôt *diverge*. Avant d'aborder les détails de cela, voyons un exemple ...",""]}},{type:"ModalAlert",options:{markdowns:["Imaginez que vous clonez un dépôt le lundi et commencez à bidouiller une nouvelle fonctionnalité. Le vendredi vous êtes prêt à publier votre fonctionnalité -- mais oh nan ! Vos collègues ont écrit une floppée de code durant la semaine ce qui rend votre fonctionnalité désuète (et obsolète). Ils ont aussi publié sur le dépôt distant partagé, donc maintenant *votre* travail est basé sur une *vieille* version du projet qui n'est plus viable.","","Dans ce cas, la commande `git push` est ambiguë. Si vous exécutez `git push`, git devrait-il remettre le dépôt distant tel qu'il était lundi ? Doit-il essayer d'ajouter votre code sans supprimer le nouveau code ? Ou doit-il totalement ignorer vos changements puisqu'ils ne sont plus à jour ?","","Comme il y a trop d'ambiguïté dans cette situation (où l'historique a divergé), git ne vous autorise pas à `push` vos changements. Cela vous force en fait à incorporer le dernier état du dépôt distant avnat de pouvoir partager votre travail."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Assez parlé ! Observons cette situation en action"],afterMarkdowns:["Vous voyez ? Rien ne s'est produit car la commande a échoué. `git push` a échoué car votre plus récent commit `C3` est basé sur le dépôt distant sur `C1`. Le dépôt distant a depuis été mis à jour avec `C2`, donc git rejette votre push."],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Comment vous résolvez cette situation ? C'est facile, tout ce que vous avez à faire est de baser votre travail sur la dernière version de la branche distante.","","Il y a plusieurs façons de faire cela, mais la plus directe est de déplacer votre travail avec rebase. Allons voir à quoi cela ressemble."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Maintenant si nous rebasons avant de push ..."],afterMarkdowns:["Boum ! Nous avons mis à jour notre représentation locale du dépôt avec `git fetch`, rebasé notre travail pour refléter les nouveaux changements, et enfin les avons envoyés avec `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Existe-t-il d'autres façons de mettre à jour notre travail quand le répertoire distant a été mis à jour ? Bien sûr ! Faisons la même chose avec `merge` plutôt.","","Bien que `git merge` ne déplace pas vôtre travail (et au lieu de cela crée juste un commit de fusion), c'est une façon de dire à git que vous avez incorporé tous les changements du dépôt distant. C'est parce que la branche distante est maitenant une *ancêtre* de vôtre propre branche, ce qui signifie que vos commits reflètent tous les changements faits sur la branche distante.","","Voyons une démonstration ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Maintenant si nous mergeons au lieu de rebaser ..."],afterMarkdowns:["Boum ! Nous avons mis à jour notre représentation du dépôt distant avec `git fetch`, *fusionné* le nouveau travail dans notre travail (pour refléter les nouveaux changements du dépôt distant), et les avons ensuite envoyés avec `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Impressionnant ! Existe-t-il une façon de faire sans taper autant de commandes ?","","Bien sûr -- vous savez déjà que `git pull` est simplement un raccourci pour un fetch puis un merge. De manière assez pratique, `git pull --rebase` est un raccourci pour un fetch puis un rebase !","","Voyons ce raccourci au travail."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Premièrement avec  `--rebase`..."],afterMarkdowns:["Comme avant ! Juste un peu plus court."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Et maintenant avec un `pull` normal"],afterMarkdowns:["Encore une fois, exactement la même chose qu'avant !"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Cette succession de fetch, rebase/merge, et push est assez commune. Dans les leçons suivantes, nous allons explorer plus profondément cette façon de d'enchaîner les commandes, mais essayons plutôt cela maintenant.","","Pour finir ce niveau, réalisez les étapes suivantes :","","* Clonez votre dépôt","* Simuler un travail d'équipe (1 commit)","* Commitez un peu de votre travail (1 commit)","* Publiez votre travail avec *rebase*"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Trabajo divergente","","Hasta acá vimos cómo pullear commits de otros y cómo pushear los nuestros. Parece bastante simple, así que ¿cómo puede confundirse tanto la gente?","","La dificultad viene cuando la historia de los repositorios *diverge*. Antes de entrar en detalles, veamos un ejemplo...",""]}},{type:"ModalAlert",options:{markdowns:["Imaginate que clonás un repositorio el lunes y empezás a desarrollar algo. Para el viernes ya estás listo para publicar tu trabajo, pero, ¡oh, oh! Tus colegas también escribieron código durante la semana, haciendo que tu trabajo quede desactualizado (y obsoleto). Además, ellos publicaron esos commits en el repositorio remoto, así que ahora *tu* trabajo está basado en una versión *vieja* del proyecto, que ya no le interesa a nadie.","","En este caso, el comando `git push` es ambiguo. Si corrés `git push`, ¿git debería cambiar el repositorio a como estaba el lunes? ¿Debería tratar de agregar tu código sin eliminar el código nuevo? ¿O debería ignorar completamente tus cambios porque están desactualizados?","","Como hay tanta ambiguedad en esta situación (en que la historia divirgió), git no te permite pushear tus cambios. En cambio, te fuerza a integrar el último estado del repositorio remoto antes de poder compartir tu trabajo."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¡Demasiada charla, veámoslo en acción!"],afterMarkdowns:["¿Ves? No pasó nada, porque el comando falla. `git push` falla porque `C3`, tu commit más reciente, está basado en el remoto sobre `C1`. El remoto fue actualizado a `C2` desde entonces, por lo que git rechaza tu push"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¿Cómo resolvés esta situación? Es fácil, todo lo que tenés que hacer es basar tu trabajo en la versión más reciente de la rama remota.","","Hay un par de maneras de hacer esto, pero la más simple es mover tu trabajo haciendo un rebase. Probémoslo a ver cómo se ve."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Ahora, si mejor rebaseamos antes de pushear..."],afterMarkdowns:["¡Boom! Actualizamos nuestra representación local del remoto con `git fetch`, rebaseamos nuestro trabajo para reflejar los nuevos cambios del remoto, y después los pusheamos con `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¿Hay otra manera de actualizar mi trabajo si actualizaron el repositorio remoto? ¡Claro que sí! Veamos cómo hacer lo mismo pero usando `merge`.","","Por más que `git merge` no mueva tu trabajo (sólo crea un commit de merge), es un modo de decirle a git que integraste todos los cambios del remoto. Esto es porque ahora una rama remota pasó a ser un *ancestro* de tu propia rama, lo que significa que tu commit refleja los cambios de todos los commits de la rama remota.","","Veamos una muestra..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Si en lugar de rebasear hacemos un merge..."],afterMarkdowns:["¡Boom! Actualizamos nuestra representación local del remoto usando `git fetch`, *mergeamos* el nuevo trabajo junto con el nuestro (para reflejar los nuevos cambios en el remoto), y después los pusheamos usando `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["¡Asombroso! ¿Hay forma de hacer esto sin tipear tantos comandos?","","¡Claro que sí! Ya sabés que `git pull` es simplemente un atajo para hacer fetch y merge. Convenientemente, ¡`git pull --rebase` es un atajo para hacer fetch y rebase!","","Veamos estos atajos funcionando."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Primero con `--rebase`..."],afterMarkdowns:["¡Igual que antes! Sólo que bastante más corto."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Y ahora un `pull` común"],afterMarkdowns:["Otra vez, ¡exactamente lo mismo que antes!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Toda esta movida de fetchear, rebasear/mergear y pushear es bastante común. En lecciones futuras vamos a ver formas más complejas de estos flujos de trabajo, pero por ahora probemos esto que vimos.","","Para resolver este nivel, hacé lo siguiente:","","* Cloná tu repositorio","* Simulá algo de trabajo de un colega (1 commit)","* Commiteá algo de trabajo propio (1 commit)","* Publicá tu trabajo *rebaseando*"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Histórico Divergente","","Até o momento vimos como fazer `pull` de commits dos outros e como fazer `push` de nossas próprias mudanças. Parece ser tão simples, como será que as pessoas ficam tão confusas?","","A dificuldade aparece quando o histórico do repositório *diverge*. Antes de discutir os detalhes disso, vejamos um exemplo...",""]}},{type:"ModalAlert",options:{markdowns:["Imagine que você clonou um repositório na segunda-feira e começou a trabalhar em uma funcionalidade nova. Na sexta-feira você está pronto para publicar a funcionalidade -- mas, ah não! Seus colegas escreveram um bocado de código durante a semana, tornando a sua funcionalidade obsoleta. Eles também publicaram esses commits no repositório remoto que vocês compartilham, então agora o *seu* trabalho é baseado em uma versão *antiga* do projeto, que não é mais relevante.","","Neste caso, o comando `git push` é ambíguo. Se você executar `git push`, será que o Git deveria tratar o repositório remoto como se ele ainda estivesse no estado da segunda-feira? Será que ele deveria tentar adicionar seu código dentro do repositório sem tentar remover o código novo? Ou será que ele deveria simplesmente ignorar suas mudanças totalmente, já que elas estão obsoletas?","","Devido à grande ambiguidade que surge neste tipo de situação (quando a história divergiu), o Git não permite que você faça `push` das suas mudanças. Ele, de fato, força você a incorporar o último estado do repositório remoto antes de conseguir compartilhar o seu trabalho."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Chega de conversa! Vejamos essa situação na prática"],afterMarkdowns:["Viu? Nada aconteceu porque o comando falhou. O `git push` falha porque o commit mais recente (`C3`) é baseado no remoto em `C1`. Como o remoto foi atualizado no meio tempo, o Git rejeita o push"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Como resolver essa situação? É fácil, tudo que você precisa fazer é basear seu trabalho na versão mais recente do ramo remoto.","","Existem algumas maneiras de fazer isso, mas a mais direta é mover o seu trabalho usando rebase. Vamos em frente, ver como isso é feito."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora se nós fizermos um rebase antes do push..."],afterMarkdowns:["Boom! Nós atualizamos a representação local do repositório remoto com `git fetch`, fizemos rebase do nosso trabalho para refletir as novas mudanças no repositório remoto, e então enviamos nossas mudanças com `git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Será que existem outras formas de compartilhar meu trabalho quando o repositório remoto tiver sido atualizado? Claro! Vamos fazer a mesma tarefa usando `merge` em vez de `rebase`.","","Embora o `git merge` não mova o seu trabalho (em vez disso, ele cria um commit de merge), ele é uma forma de contar ao Git que você incorporou todas as mudanças do repositório remoto. Isso acontece porque o ramo remoto passa a ser um *ancestral* do seu próprio ramo, significando que o seu commit reflete todos os commits contidos no ramo remoto.","","Vejamos uma demonstração..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Agora se fizermos merge em vez de rebase ..."],afterMarkdowns:["Boom! Atualizamos nossa representação local do repositório remoto com `git fetch`, fizemos *merge* do novo trabalho com o nosso (para refletir as novas mudanças no repositório remoto), e então fizemos push deles com `git push`"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Incrível! Existe alguma forma de fazer isso sem digitar tantos comandos?","","É claro -- você já conhece o `git pull` e ele é simplesmente um atalho para um fetch e um merge. Convenientemente, entretanto, o comando `git pull --rebase` é uma abreviação para um fetch e um rebase!","","Vejamos esses dois comandos em ação."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Primeiro com `--rebase`..."],afterMarkdowns:["Mesma coisa que antes! Porém muito mais curto."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["E agora com o `pull` normal"],afterMarkdowns:["De novo, exatamente como antes!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Esse fluxo de trabalho de fazer fetch, rebase/merge, e push é bastante comum. Em lições futuras vamos examinar versões mais complicadas desses fluxos de trabalho, mas por enquanto vamos tentar o seguinte.","","Para resolver este nível, faça o seguinte:","","* Clone o repositório","* Simule trabalho de seus colegas (1 commit)","* Faça um commit seu (1 commit)","* Publique seu trabalho usando *rebase*"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## Diverged Work","","到目前為止我們已經知道如何 `pull` 其他人所送的 commit，而且也知道如何 `push` 我們自己的 commit，感覺很簡單，但是為什麼有人看起來很困惑？","","當 repo 的歷史紀錄是 *diverge（branch 走向不同）* 的狀態時就會很棘手，在討論這個之前，讓我們先來看一個例子...",""]}},{type:"ModalAlert",options:{markdowns:["想像一下你在星期一的時候 clone 了一個 repo，並且開始在設計一個功能，在星期五的時候你準備好要發佈你的新功能，但是非常不幸地，你的同事已經寫了一連串的程式碼並且已經將 commit 發佈到 remote，所以現在*你的*進度是在一個比較*舊*的版本的後面（如果與 remote 比較的話啦！）。","","在這種情況底下，使用 `git push` 會有問題，如果你使用 `git push`，那麼 git 應該要把 remote 退回到星期一的狀態？它應該要把你所寫好的程式碼一起更新進去，同時不會影響你的同事寫好的程式碼？或者是他應該要因為版本比較舊而完全忽略你的程式碼？","","因為在這種情況下會很麻煩（當 git 歷史紀錄被 diverge 了），所以 git 不會允許你 `push` 你的 commit。在你上傳你的 commit 之前，它實際上會先強迫你先跟 remote 同步。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["講太多了啦！讓我們實際看一下這個情況。"],afterMarkdowns:["看到了沒？因為指令失敗了，所以沒有任何事情發生。 `git push` 失敗的原因是因為你最近的 commit `C3` 是在 `C1` 的後面，但是 remote 那邊是 `C2` 在 `C1` 的後面，所以 git 才會拒絕你的 push。"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["你要如何解決這種情況？很簡單，你只需要把 `C3` 接在 remote 最新的版本 `C2` 的後面就可以了。","","有一些方法可以做到，但是最直接的方式是用 rebase，我們來做看看。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["在我們 push 之前，先來做 rebase..."],afterMarkdowns:["看吧！我們利用 `git fetch` 下載了 remote 上面的 commit，並且 rebase 我們的 commit，使得我們的 commit 可以接在 remote 上面最新的版本的後面，接著透過 `git push` 就可以上傳更新了。"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["在 remote 已經率先更新之後，還有沒有其它方法可以上傳我們的 commit？當然有阿！我們這次利用 `merge` 來做看看！","","雖然 `git merge` 並不會去移動你的 commit（反而會產生一個 merge commit），這是一個告訴 git 你已經下載了 remote 上面的 commit 並且在 local repo 中已經做完 merge，而因為 remote branch 上的最新的 commit 現在已經是 merge commit 的一個 *ancestor*，這就表示你的 commit 已經包含了在 remote branch 上的所有 commit。","","讓我們來看一下這種情況..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["現在假設我們不是用 rebase，而是用 merge..."],afterMarkdowns:["看吧！我們藉由 `git fetch` 把 remote 上的 commit 下載下來，並且 *merged* 該 commit 到我們目前的 branch（這樣就表示我們產生的 merge commit 有包含了 remote　上的 commit），接著再透過 `git push` 上傳到 remote。"],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["太棒了! 有沒有其它可以不用打這麼多指令的方法？","","當然有阿！你已經知道 `git pull` 就是表示一個 fetch 跟一個 merge。 有一個指令非常方便，那就是 `git pull --rebase`，它表示的是一個 fetch 以及一個 rebase。","","我們來看如何使用這個簡化後的指令。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["首先 `--rebase`..."],afterMarkdowns:["跟之前一樣！只是少打了很多指令。"],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["現在用一般的 `pull`"],afterMarkdowns:["又來了，剛好跟之前的一樣！"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["fetch，rebase/merge，以及 push 的流程是幾乎一樣的。在之後的教學中我們會看到比這些流程更複雜的版本。但是現在讓我們先牛刀小試一下。","","為了要完成這一關，請按照下面的步驟：","","* clone 你的 repo","* 假裝送一個 commit 給 remote","* 送一個 commit 給 local repo","* 透過 *rebase* 送自己的 commit"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 分散工作","","到现在我们已经知道了如何从其它地方`pull`,以及如何`push`我们自己的提交对象, 看起来真简单, 但是为何人们还会如此困惑呢?","","困难来自于远端库历史的分散. 在讨论这个问题的细节前, 我们看一个例子...",""]}},{type:"ModalAlert",options:{markdowns:["想象一下你周一克隆了一个仓库, 然后在一个特性分支上工作. 到周五时, 你准备推送你的特性分支 -- 不行的! 你的同事这周写了一堆代码, 使得你的特性分支过期了. 他们已经将代码分享(合并)到远端仓库了, 所以你的工作就变成了基于仓库老版的代码了.","","这种情况下, `git push`就变得模糊了, 如果你执行`git push`, git应该让远端仓库回到星期一那天? 还是直接在新代码的基础上添加你的代码? 或者直接忽略你的提交? ","","因为这情况让问题变得模糊(因为历史的分散性)了, git 不会允许你`push`. 你只能先合并远端最新的代码, 然后才能分享你的工作."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["废话说得真多, 看看实际案例吧!"],afterMarkdowns:["看见了吧? 什么都没有变, 命令失败了! `git push`的失败是因为你最新提交了`C3`(基于远端的`C1`). 而远端已经更新到了`C2`啦, 所以git 拒绝了你的push"],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["你如何解决这事儿呢? 很简单, 你需要做的就是使你的工作基于最新的远端分支.","","有好些方法做到这一点呢. 不过最直接的方法就是通过rebase修订你的工作. 我们继续向前,看看这是怎么实现的!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果我们在push之前做rebase呢?"],afterMarkdowns:["轰 啊 轰! 我们用`git fetch`更新了远端在本地的副本, 然后合并我们的工作以映射远端的新变化, 最后再`git push`"],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["还有其它的方法应对此种情况吗? 当然了, 我们还可以使用`merge`","","尽管`git merge`不会转移你的工作(相反的它会创建新的合并提交), 它会告诉git 你已经合并了远端的所有变更 -- 远端分支就是你自己分支的祖先, 这意味着, 你的提交反映了远端分支的提交.","","看下演示..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["那如果我们用merge 替换rebase呢?"],afterMarkdowns:["轰哦轰! 我们用`git fetch`更新了远端副本, 然后合并了新变更到我们的工作, 最后我们用`git push`把工作推送回去."],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["漂亮! 有更简单的命令吗?","","当然 -- 就是你所知道`git pull`,  就是fetch 和merge 的简写. 更方便的 -- `git pull --rebase` 就是 fetch 和rebase的简写! ","","让我们看看简写命令是如何工作的."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["First with `--rebase`..."],afterMarkdowns:["跟之前结果一样, 就是简写啦."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["换用常规的`pull`"],afterMarkdowns:["还是跟以前一样! "],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["这几个命令 fetching, rebase/merging,  pushing 的工作流很普遍. 后续课程我们会讲解更复杂的工作流, 不过现在我们先尝试下吧.","","要完成本节, 你需要完成以下几步: ","","* Clone 你的仓库","* 模拟一次远程提交(fakeTeamwork)","* 本地提交一次","* 用**变基**提交你的修改(--rebase)"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Abweichende Inhalte","","Bisher haben wir gesehen wie man per `pull` Commits von Anderen ins lokale Repository holt und die eigenen Änderungen in ein entferntes `push`t. Ist doch ziemlich einfach, wie kann man da durcheinander kommen?","","Die Schwierigkeiten entstehen, wenn die Historys der beiden Repositorys *divergieren*, also voneinander abweichen. Bevor wir die Einzelheiten besprechen, schauen wir uns ein Beispiel an ...",""]}},{type:"ModalAlert",options:{markdowns:["Stell dir vor du holst dir Montags ein Repository per `clone` und fängst an, an einem Feature zu arbeiten. Bis Freitag soll es fertig und veröffentlicht sein -- doch, oh je! Deine Kollegen haben eine Menge Code während der Woche geschrieben, der dein Feature hat veralten lassen (und überflüssig gemacht hat). Sie haben diesen Code außerdem zum entfernten Repository gepusht, und dadurch basiert *deine* harte Arbeit jetzt auf einer *alten* Version des Projektes, die nicht länger relevant ist.","","In diesem Fall ist ein `git push` problematisch. Wenn du es ausführst, soll Git das entfernte Repository in den Zustand von Montag zurückversetzen? Soll es versuchen deinen Code auf die aktuelle Version zu packen? Oder soll es deine Änderungen einfach ignorieren, weil sie total veraltet sind?","","Da es in dieser Situation so viele Mehrdeutigkeiten gibt (da die Historys divergent sind) erlaubt Git dir nicht, deine Änderungen einfach zu `push`en. Es zwingt dich, zuerst die neuesten Änderungen vom Server zu holen und in deine zu integrieren bevor du deine Arbeit mit anderen teilen kannst."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Bla bla bla. Schauen wir uns das lieber in Aktion an:"],afterMarkdowns:["Siehst du? Nichts passiert, weil der Befehl fehlschlägt. `git push` schlägt fehl, weil der neueste Commit `C3` auf dem Commit `C1` des Remotes basiert. Der entfernte Server hat mittlerweile jedoch `C2` gepusht bekommen, also lässt Git deinen Push jetzt nicht mehr zu."],command:"git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Wie sollen wir das auflösen? Es ist ganz einfach, du musst deinen Commit nur von der aktuellsten Version des Remotes ableiten.","","Es gibt verschiedene Möglichkeiten wie man das erreichen kann, aber die offensichtlichste ist es, deine Commits per Rebase zu verschieben. Schauen wir mal wie das abläuft:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Also wenn wir vor dem Push erst mal einen Rebase mache ..."],afterMarkdowns:["Bämm! Wir haben unsere lokale Abbildung des entfernten Repositorys mit `git fetch` auf den neuesten Stand gebracht, unsere Arbeit auf die neueste Version des Remotes drauf gepackt und dann mit `git push` auf den Server geschoben."],command:"git fetch; git rebase o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Gibt es noch weitere Möglichkeiten deine Arbeit zu aktualisieren wenn das entfernte Repository neue Commits bekommen hat? Klar! Schauen wir uns dasselbe an, aber diesmal arbeiten wir mit `merge`.","","Obwohl `git merge` deine Arbeit nicht verschiebt (und stattdessen einen Merge Commit erzeugt) ist es eine Möglichkeit Git dazu zu bringen, alle Änderungen vom Remote in deine Sachen zu integrieren. Denn durch den Merge wird der Remote Branch zu einem *Vorgänger* deines Branches, was bedeutet dass dein Commit alle Commits des entfernten Branches beinhaltet.","","Zur Demonstration ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn wir nun also mergen anstatt einen Rebase zu machen ..."],afterMarkdowns:["Ok. Wir haben die lokale Abbildung des entfernen Repositorys mit `git fetch` aktualisiert, die neuen Änderungen per *Merge* in deine integriert, und letztere dann mit `git push` auf den Server gebracht."],command:"git fetch; git merge o/master; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Wahnsinn! Kann ich das auch irgendwie machen ohne soviel zu tippen?","","Na klar -- du kennst ja schon `git pull` als Zusammenfassung von `fetch` und `merge`. Praktischerweise bringt man es mit der Option `--rebase` dazu, anstatt des Merge einen Rebase zu machen.","","Gucken wir uns das mal an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Zunächst `git pull --rebase` ..."],afterMarkdowns:["Genau wie vorher! Nur viel kürzer."],command:"git pull --rebase; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Und nun das normale `git pull` ..."],afterMarkdowns:["Und wieder, genau wie zuvor!"],command:"git pull; git push",beforeCommand:"git clone; git fakeTeamwork; git commit"}},{type:"ModalAlert",options:{markdowns:["Dieser Ablauf von `fetch`, `rebase` / `merge` und `push` ist sehr verbreitet. In zukünftigen Leveln werden wir uns kompliziertere Varianten dieses Workflows ansehen, aber jetzt probieren wir erst mal diesen aus.","","Um diesen Level zu lösen, gehe folgende Schritte durch:","","* Clone dein Repository","* Simuliere einen entfernten Commit mit `git fakeTeamwork`","* Erzeuge einen lokalen Commit","* Benutze *Rebase*, um deine Arbeit schließlich pushen zu können"]}}]}}}
},{}],100:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C11","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C11","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]},"side1":{"target":"C2","id":"side1","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side2":{"target":"C4","id":"side2","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side3":{"target":"C7","id":"side3","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"},"C8":{"parents":["C1"],"id":"C8"},"C9":{"parents":["C2","C8"],"id":"C9"},"C10":{"parents":["C4","C9"],"id":"C10"},"C11":{"parents":["C10","C7"],"id":"C11"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C11","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C8":{"parents":["C1"],"id":"C8"},"C5":{"parents":["C1"],"id":"C5"},"C3":{"parents":["C1"],"id":"C3"},"C2":{"parents":["C1"],"id":"C2"},"C6":{"parents":["C5"],"id":"C6"},"C4":{"parents":["C3"],"id":"C4"},"C9":{"parents":["C2","C8"],"id":"C9"},"C7":{"parents":["C6"],"id":"C7"},"C10":{"parents":["C4","C9"],"id":"C10"},"C11":{"parents":["C10","C7"],"id":"C11"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git checkout master;git pull;git merge side1;git merge side2;git merge side3;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]},"side1":{"target":"C2","id":"side1","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side2":{"target":"C4","id":"side2","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side3":{"target":"C7","id":"side3","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"side3","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C8","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C8":{"parents":["C1"],"id":"C8"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Merging with remotes",zh_CN:"和远端合并",zh_TW:"merge with remotes",es_AR:"Mergeando con los remotos",pt_BR:"Merge com remotos",de_DE:"Änderungen vom Remote zusammenführen",ja:"リモートとのmerge",fr_FR:"Fusionner avec les branches distantes"},hint:{en_US:"Pay attention to the goal tree!",zh_CN:"注意目标树!",zh_TW:"注意最後要完成的目標！",es_AR:"¡Prestá atención al árbol final!",pt_BR:"Preste atenção na árvore do objetivo!",de_DE:"Beachte den Ziel-Baum!",ja:"ゴールツリーに注意！",fr_FR:"Respectez l'arbre représentant l'objectif !"},compareOnlyMaster:!0,startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Why not merge?","","In order to push new updates to the remote, all you need to do is *incorporate* the latest changes from the remote. That means you can either rebase *or* merge in the remote branch (e.g. `o/master`).","","So if you can do either method, why have the lessons focused on rebasing so far? Why is there no love for `merge` when working with remotes?",""]}},{type:"ModalAlert",options:{markdowns:["There's a lot of debate about the tradeoffs between merging and rebasing in the development community. Here are the general pros / cons of rebasing:","","Pros:","","* Rebasing makes your commit tree look very clean since everything is in a straight line","","Cons:","","* Rebasing modifies the (apparent) history of the commit tree.","","For example, commit `C1` can be rebased *past* `C3`. It then appears that the work for `C1'` came after `C3` when in reality it was completed beforehand.","","Some developers love to preserve history and thus prefer merging. Others (like myself) prefer having a clean commit tree and prefer rebasing. It all comes down to preferences :D"]}},{type:"ModalAlert",options:{markdowns:["For this level, let's try to solve the previous level but with *merging* instead. It may get a bit hairy but it illustrates the point well."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Pourquoi pas merge ?","","Dans le but d'envoyer de nouvelles modifications sur le dépôt distant, la seule étape préliminaire est *d'incorporer* les derniers changements de ce dépôt dans le nôtre. Cela signifie qu'après, vous pouvez faire un rebase *ou* merge de la branche distante (e.g. `o/master`).","","Donc si l'on peut faire les deux méthodes, pourquoi les leçons se sont (re)basées (!) sur rebase jusqu'à présent ? Pourquoi n'aime-t-on pas `merge` dans les branches distantes ?",""]}},{type:"ModalAlert",options:{markdowns:["Il y a beaucoup de débats à propos du compromis entre l'utilisation de merge et rebase dans la communauté des développeurs. Voici les principaux arguments pour / contre rebase:","","Pour :","","* Rebase rend votre arbre de commits très propre puisqu'il ressemble à une ligne droite.","","Contre :","","* Rebase modifie l'historique (apparent) de l'arbre des commits.","","Par exemple, le commit `C1` peut être rebasé *après* `C3`. Cela fait croire que le travail de `C1'` est arrivé après `C3` alors qu'en réalité il était complétement avant.","","Certains développeurs aiment préserver l'historique et préfèrent donc merge. Les autres (comme moi) préfèrent avoir un arbre des commits propre et préfèrent rebase. C'est une question de goût :D"]}},{type:"ModalAlert",options:{markdowns:["Pour ce niveau, essayons de résoudre le niveau précédent, mais avec *merge* plutôt. Cela peut être un peu périlleux mais cela illustre bien le problème."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## ¿Por qué no mergear?","","Para pushear tus novedades al remoto, todo lo que tenés que hacer es *integrar* los últimos cambios del remoto con los tuyos. Eso significa que podés hacer tanto rebase como merge con la rama remota (por ejemplo, `o/master`).","","Así que si podés hacer cualquiera de las dos, ¿por qué las lecciones sólo se centraron en rebasear hasta ahora? ¿Por qué no dedicarle algo de amor al `merge` cuando trabajamos con remotos?",""]}},{type:"ModalAlert",options:{markdowns:["Hay mucho debate entre los desarrolladores sobre los pros y contras de mergear vs rebasear. Acá tenemos los pros y contras de rebasear:","","Pros:","","* Rebasear hace que tu árbol de commits se vea bastante limpio, porque todos los commits siguen una única línea","","Contras:","","* Rebasear modifica la historia (aparente) de tu árbol de commits.","","Por ejemplo, el commit `C1` puede rebasearse para que aparezca *después* de `C3`. Entonces, parece que el trabajo de `C1'` se hizo después de `C3`, cuando en realizad se había hecho antes.","","Algunos desarrolladores aman preservar la historia, por lo que prefieren mergear. Otros (como yo) preferimos tener un árbol de commits limpios, y preferimos rebasear. Todo es una cuestión de preferencias :D"]}},{type:"ModalAlert",options:{markdowns:["Para este nivel, tratemos de resolver el nivel anterior, pero *mergeando*. Puede ponerse un poco oscuro, pero ilustra la idea bastante bien."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Por que não um merge?","","Para enviar novas atualizações ao repositório remoto, tudo que você precisa é *incorporar* as últimas mudanças ali presentes. Isso significa que você pode tanto fazer um rebase *quanto* um merge no ramo remoto (ex. `o/master`).","","Então, se você pode escolher qualquer um desses métodos, por que as lições focaram no rebase até o momento? Por que não demos nenhum amor ao `merge` quando trabalhamos com repositórios remotos?",""]}},{type:"ModalAlert",options:{markdowns:["Há muito debate na comunidade de desenvolvedores sobre as vantagens e desvantagens do merge e do rebase. Aqui estão os prós e contras gerais do rebase:","","Prós:","","* O rebase faz a sua árvore de commits parecer bastante limpa, já que tudo fica em uma linha reta","","Contras:","","* O rebase modifica o histórico *aparente* da sua árvore de commits.","","Por exemplo, o commit `C1` pode aparecer *depois do* `C3` após sofrer rebase. Então, fica parecendo que alguém trabalhou em `C1` apenas depois de `C3` estar completo, quando na realidade o que ocorreu foi o contrário.","","Alguns desenvolvedores adoram preservar o histórico e, portanto, preferem o merge. Outros (como eu) preferem ter uma árvore de commits limpa, obtida usando rebase. Tudo se resume ao gosto pessoal :D"]}},{type:"ModalAlert",options:{markdowns:["Para este nível, tente resolver o mesmo problema do nível anterior, mas usando *merge* em vez de rebase. A árvore pode ficar um pouco cabeluda, mas isso ilustra bem o nosso ponto."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## 為何不要 merge？","","為了要 push 新的 commit 給 remote，你只需要做的是先同步 remote 的更新，那就表示你可以使用 rebase *或者*是 merge remote branch （例如，`o/master`）。","","所以假如你已經學會使用其中一個方式了，那為什麼我們到目前為止還在強調 `rebase`？為什麼當提到 remote 的時候，反而 `merge` 比較沒有受到關注？",""]}},{type:"ModalAlert",options:{markdowns:["在程式發展的社群中，關於 `merge` 以及 `rebase` 的孰優孰劣有很多的爭論。這裡我們會提到關於 `rebase` 的優點及缺點：","","優點：","","* `rebase` 使得你的 commit tree 看起來更為簡潔，因為任何的 commit 都在一條直線上面。","","缺點：","","* `rebase` 修改了 commit tree 的歷史紀錄。","","舉例來說，我們可以 rebase commit `C1`，將 `C1` 接在*過去的* `C3` 上面，那麼就可以表現出 `C1` 是出現在 `C3` 的後面。","","有一些程式設計師喜歡保留歷史紀錄，因此他們會比較喜歡 `merge`; 其他人（例如我自己）比較喜歡一個簡潔的 commit tree，因此他們比較喜歡 `rebase`。這些都是擇你所愛。:D"]}},{type:"ModalAlert",options:{markdowns:["在這個關卡中，我們面對的是之前關卡的題目，但是我們採用的是 `merge`，這可能會讓你感覺到有點困難，但是確實有講到重點。"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Warum nicht Merge?","","Um neue Dinge auf das Remote zu schieben musst du erst alle Änderungen vom Remote holen und bei dir integrieren. Das bedeutet du kannst den entfernten Branch (z.B. `o/master`) entweder Rebasen *oder* Mergen.","","Wenn du also beide Methoden benutzen kannst, warum haben sich die Level bisher auf Rebase konzentriert? Warum mag keiner `merge` wenn es um Remotes geht?",""]}},{type:"ModalAlert",options:{markdowns:["Es gibt eine Menge Diskussionen unter Entwicklern über die Vor- und Nachteile beim Mergen und Rebasen. Hier ein paar Vor- und Nachteile zum Rebasen:","","Vorteile:","","* Rebasen macht den Commit-Baum sehr übersichtlich, weil alles linear aufeinander aufbaut","","Nachteile:","","* Rebasen verändert die History eines Branches.","","Zum Beispiel kann durch Rebasen Commit `C1` an Commit `C3` *vorbei* bewegt werden, bzw. eine Kopie von `C1`. Es sieht dann so aus als wären die Änderungen in `C1` nach denen in `C3` gemacht worden, obwohl das nicht stimmt.","","Manche Entwickler möchten lieber die History lassen wie sie ist und ziehen daher das Mergen vor. Andere (wie ich) haben lieber einen sauberen Commit-Baum und ziehen Rebase vor. Am Ende ist es eine Geschmacksfrage. :D"]}},{type:"ModalAlert",options:{markdowns:["In diesem Level wollen wir versuchen die Aufgabe vom letzten Level erneut zu lösen, aber diesmal mit einem *Merge*. Das wird vielleicht etwas haariger, stellt aber gut die Implikationen dar."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 为何不merge?","","为了push新变更到远端，你要做的就是合并远端最新变更(使用rebase or merge). ","","所以你可以使用任意一种方法, 但为何本节会聚焦于rebasing 呢？为何会不喜欢用merge 去合并remote 呢？",""]}},{type:"ModalAlert",options:{markdowns:["在开发社区，有相当多的关于权衡的讨论。以下是关于rebasing 的优点/缺点： ","","优点:","","* Rebase 使你的提交树变得很干净, 所有的提交成了一条线: ","","缺点:","","* Rebase 修改的提交树的父历史","","比如, 提交C1 可以被修订到跃过C3。这看起来C1 是在C3 之后 (而实际上可能在C3之前) ","","一些开发者喜欢保留提交历史，更偏爱merging。而其它的人而喜欢拥有更干净的提交树，偏爱rebasing。这些都依赖于自己的偏爱.  :D"]}},{type:"ModalAlert",options:{markdowns:["本节，我们要解决前面的单元问题，但是要用merging。这显得有点那啥了，但这只是为了更好的说明这一点。 "]}}]}}}},{}],101:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C3","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git pull",startTree:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Git Pullin'",zh_CN:"Git Pull",zh_TW:"git pull'",es_AR:"git pull",pt_BR:"Git Pull",de_DE:"Git Pull",ja:"Git Pull",fr_FR:"Git pull"},hint:{en_US:"Just run git pull!",zh_CN:"只要运行 git pull 命令!",zh_TW:"只要下 git pull 這個指令即可",es_AR:"Simplemente ¡hacé git pull!",pt_BR:"Basta executar git pull!",de_DE:"Führe einfach git pull aus.",ja:"単にgit pullを実行！",fr_FR:"Utilisez facilement git pull !"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Now that we've seen how to fetch data from a remote repository with `git fetch`, let's update our work to reflect those changes!","","There are actually many ways to do this -- once you have new commits available locally, you can incorporate them as if they were just normal commits on other branches. This means you could execute commands like:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","In fact, the workflow of *fetching* remote changes and then *merging* them is so common that git actually provides a command that does both at once! That command is `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's first see a `fetch` and a `merge` executed sequentially"],afterMarkdowns:["Boom -- we downloaded `C3` with a `fetch` and then merged in that work with `git merge o/master`. Now our `master` branch reflects the new work from the remote (in this case, named `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What would happen if we used `git pull` instead?"],afterMarkdowns:["The same thing! That should make it very clear that `git pull` is essentially shorthand for a `git fetch` followed by a merge of whatever branch was just fetched."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["We will explore the details of `git pull` later (including options and arguments), but for now let's try it out in the level.","","Remember -- you can actually solve this level with just `fetch` and `merge`, but it will cost you an extra command :P"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Maintenant que vous avez vu comment rapatriez des données depuis un dépôt distant avec `git fetch`, mettons à jour notre copie de travail pour refléter ces changements !","","Il existe en fait beaucoup de façons de faire cela -- une fois que vous avez de nouveaux commits disponibles localements, vous pouvez les incorporer comme s'ils étaient des commits normaux d'autres branches. Cela signifie que pourriez juste exécuter des commandes comme :","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","En fait, le principe de *rapatrier* (fetch) les branches distantes puis les *fusionner* (merge) est si commun que git a en réalité une commande pour faire les deux à la fois ! Cette commande est `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons d'abord un `fetch` puis un `merge` exécutés séquentiellement"],afterMarkdowns:["Boum -- nous avons téléchargé `C3` avec un `fetch` et ensuite nous avons fusionné ce travail dans notre copie avec `git merge o/master`. Maintenant nôtre branche `master` reflète le nouveau travail du dépôt distant (dans ce cas, nommé `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Que se passerait-il si nous utilisions plutôt `git pull` ?"],afterMarkdowns:["La même chose ! Cela devrait maintenant être clair que `git pull` est surtout un raccourci pour `git fetch` suivi d'un merge de toutes les branches qui viennent d'avoir un fetch."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Nous allons explorer les détails de `git pull` plus tard (y compris options et arguments), mais essayons d'abord cela dans notre niveau.","","Rappelez-vous -- vous pouvez aussi résoudre ce niveau avec `fetch` et `merge`, mais cela vous coûtera une commande supplémentaire :P"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Ahora que vimos cómo traer datos de un repositorio remoto con `git fetch`, ¡actualicemos nuestro trabajo local para reflejar esos cambios!","","Realmente hay varias formas de hacer esto: una vez que tenés los commits disponibles localmente, podés integrarlos como si fueran commits comunes de otras ramas. Esto significa que podrías ejecutar comandos como:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","De hecho, el flujo de trabajo de *fetchear* cambios remotos y después *mergearlos* es tan común que git incluye un comando que hace ambas cosas de una: ¡`git pull`!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos primero un `fetch` y un `merge` ejecutados secuencialmente"],afterMarkdowns:["Boom: descargamos `C3` con un `fetch` y luego lo mergeamos con `git merge o/master`. Ahora nuestra rama `master` refleja el nuevo trabajo del remoto (en este caso, llamado `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Qué pasaría si usáramos `git pull` en cambio?"],afterMarkdowns:["¡Lo mismo! Eso debería dejar bien en claro que `git pull` es básicamente un atajo para hacer `git fetch` seguido por un merge con la rama que sea que hayamos bajado."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Exploraremos los detalles de `git pull` después (incluyendo sus opciones y parámetros), pero por ahora probémoslo en este nivel.","","Acordate: podés resolver este comando simplemente con `fetch` y `merge`, pero eso te costaría un comando extra :P"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Agora que vimos como baixar dados de um repositório remoto com `git fetch`, vamos atualizar nosso trabalho para refletir essas mudanças!","","Há, na verdade, muitas formas de fazê-lo -- uma vez que você tenha os novos commits disponíveis localmente, você pode incorporá-los como se eles fossem commits normais em outros ramos. Isso significa que você pode executar comandos como estes a seguir:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc., etc.","","O fluxo de trabalho de executar *fetch* para baixar as mudanças remotas e depois fazer um *merge* delas é tão comum que o Git na verdade fornece um comando que faz ambas as coisas de uma vez só! Esse comando é o `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos primeiro ver um `fetch` e um `merge` executados sequencialmente"],afterMarkdowns:["Boom -- nós baixamos o `C3` com um `fetch` e então fizemos um merge desse trabalho usando `git merge o/master`. Agora o nosso ramo `master` reflete o trabalho realizado no repositório remoto (neste caso, chamado de `origin`)"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["O que iria acontecer se, em vez disso, usássemos `git pull`?"],afterMarkdowns:["Exatamente o mesmo! Isso deve tornar bem claro que `git pull` é essencialmente um caminho mais curto para executar um `git fetch` seguido de um merge de seja já qual ramo tiver sido baixado."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Vamos explorar os detalhes do `git pull` mais tarde (incluindo opções e parâmetros), mas por enquanto, experimente usá-lo em sua forma mais básica.","","Lembre-se -- você também poderia resolver este nível com um `fetch` e um `merge`, mas isso lhe custaria um comando a mais :P"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git pull","","現在我們已經知道如何利用 `git fetch` 從 remote 抓取 commit，讓我們來看一下如何將這些 commit 更新到我們的檔案！","","只要在你的 local 有 fetch 到新的 commit，便有很多方法可以做到這件事情，你可以把它們視為在其它 branch 上面的一般的 commit，這表示你可以執行像這樣子的指令:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* 等等‧‧‧","","事實上，一次*下載 (fetch)* remote 的更新並且*合併（merge）* 這些更新在 git 裡面是很常見的事情！這個命令叫作 `git pull`。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們來看循序執行一個 `fetch` 和一個 `merge` 的樣子"],afterMarkdowns:["看吧! 我們利用 `fetch` 下載了 `C3` 並且利用 `git merge o/master` 來更新資料，現在我們的 `master` branch 跟 remote 同步了（在這個例子中，remote repository 叫作 `origin`）。"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果用 `git pull` 會發生什麼事情？"],afterMarkdowns:["一樣！很明顯地，`git pull` 其實就是 git fetch 跟 git merge 的循序執行的結果，而且 merge 的 branch 就是 fetch 所更新的 branch。"],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["我們會解釋 `git pull` 的細節（包括可選擇的參數）, 但現在先讓我們在這個關卡試試看！","","記住喔，你可以利用循序執行的方式來執行 `fetch` 以及 `merge` 來完成這個關卡，但是相對於 `git pull`，你就得多打一個指令。:P"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","现在我们已经知道了如何用`git fetch` 获取远端的变化, 现在我们学习如果将这些变化更新到我们的工作.","","其实有很多方法的 -- 只要我在本地有新的提交, 你可以像合并其它分支那样合并远端分支. 具体说就是你可以执行以下命令: ","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* etc, etc","","实际上, fetch / merge 变更是这样的普通, 以至于git 提供了一个实际两个功能的命令 -- `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["我们先顺序执行`fetch`,`merge` "],afterMarkdowns:["我们用`fetch`下载了`C3`, 然后通过`git merge o/master`合并了这一提交. 现在我们的`master`分支映射到了远端的新工作"],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果使用`git pull`呢?"],afterMarkdowns:["同样的结果! 这清楚的说明了`git pull`就是git fetch再跟一个merge的缩写! "],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["稍后我们会扫一下`git pull`的细节(选项和参数), 现在我们先完成作业.","","记住, 你可以用fetch/merge 通过本节, 但是这会增加你的命令.:P"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Pull","","Jetzt, wo wir wissen wie wir mit `git fetch` Daten von einem entfernten Repository holen können, wollen wir unsere lokalen Daten aktualisieren, damit sie die Änderungen vom Server beinhalten.","","Tatsächlich gibt es eine Menge Wege dies zu erreichen -- sobald du die neuen Commits lokal verfügbar hast, kannst du sie integrieren so als wären es Commits von ganz normalen anderen Branches. Du kannst also:","","* `git cherry-pick o/master`","* `git rebase o/master`","* `git merge o/master`","* usw. usf. ausfúhren.","","Der Ablauf, die Änderungen vom Server zu holen und dann in die eigene Arbeit zu mergen wird so häufig benötigt, dass Git einen Befehl kennt der beides auf einmal erledigt! Das ist `git pull`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns erst mal ein `fetch` gefolgt von `merge` an:"],afterMarkdowns:["Bämm -- wir haben `C3` mit `fetch` heruntergeladen und dann in unseren Branch mit `git merge o/master` integriert. Nun bildet unser `master` dieselben Inhalte ab, wie sie auf dem entfernten Server (`origin`) liegen."],command:"git fetch; git merge o/master",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was passiert wohl, wenn wir stattdessen `git pull` benutzen?"],afterMarkdowns:["Dasselbe in Pink. Das sollte recht deutlich machen, dass `git pull` nur eine Abkürzung für `git fetch` gefolgt von einem Merge des gerade aktualisierten Branches ist."],command:"git pull",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Die Feinheiten von `git pull` werden wir uns später ansehen, für's Erste lass es uns in diesem Level ausprobieren.","","Vergiss nicht -- du kannst diesen Level auch mit `fetch` und `merge` lösen, aber das kostet dich einen Befehl extra. :P"]}}]}}}},{}],102:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/bar":{"target":"C1","id":"o/bar","remoteTrackingBranchID":null},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":null},"side":{"target":"C2","id":"side","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C4":{"parents":["C1"],"id":"C4"},"C3":{"parents":["C1"],"id":"C3"},"C5":{"parents":["C3","C4"],"id":"C5"},"C2":{"parents":["C1"],"id":"C2"},"C6":{"parents":["C2","C5"],"id":"C6"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"bar":{"target":"C3","id":"bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"bar","id":"HEAD"}}}',solutionCommand:"git pull origin bar:foo;git pull origin master:side",startTree:'{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/bar":{"target":"C1","id":"o/bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C4":{"parents":["C1"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"bar":{"target":"C3","id":"bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"bar","id":"HEAD"}}}',name:{en_US:"Pull arguments",zh_CN:"Pull 的参数",zh_TW:"pull 的參數",es_AR:"Parámetros de pull",pt_BR:"Parâmetros do pull",de_DE:"Optionen für Pull",ja:"Pullの引数",fr_FR:"Arguments de pull"},hint:{en_US:"Remember that you can create new local branches with fetch/pull arguments",zh_CN:"记住, 你可以通过 fetch/pull 创建本地分支",zh_TW:"記住，你可以透過 fetch 以及 pull 來建立一個新的 local 的 branch",es_AR:"Acordate de que podés crear nuevas ramas locales usando los parámetros de fetch/pull",pt_BR:"Lembre-se que você pode criar novos ramos locais com parâmetros de fetch/pull",de_DE:"Du kannst neue lokale Branches mittels fetch / pull erstellen",ja:"Fetchとpullの引数を利用してローカルで新規ブランチを作成できるのをお忘れなく",fr_FR:"Vous pouvez aussi créer une nouvelle branche locale avec les arguments de fetch/pull"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git pull arguments","","Now that you know pretty much *everything* there is to know about arguments for `git fetch` and `git push`, there's almost really nothing left to cover for git pull :)","","That's because git pull at the end of the day is *really* just shorthand for a fetch followed by merging in whatever was just fetched. You can think of it as running git fetch with the *same* arguments specified and then merging in *where* those commits ended up.","","This applies even when you use crazy-complicated arguments as well. Let's see some examples:"]}},{type:"ModalAlert",options:{markdowns:["Here are some equivalent commands in git:","","`git pull  origin foo` is equal to:","","`git fetch origin foo; git merge o/foo`","","And...","","`git pull  origin bar~1:bugFix` is equal to:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","See? git pull is really just shorthand for fetch + merge, and all git pull cares about is where the commits ended up (the `destination` argument that it figures out during fetch).","","Lets see a demo:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["If we specify the place to fetch, everything happens as before with fetch but we merge in whatever was just fetched"],afterMarkdowns:["See! by specifying `master` we downloaded commits onto `o/master` just as normal. Then we merged `o/master` to where we are, *regardless* of what was currently checked out."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Does it work with source and destination too? You bet! Let's see that:"],afterMarkdowns:["Wow, that's a TON in one command. We created a new branch locally named `foo`, downloaded commits from remote's master onto that branch `foo`, and then merged that branch into our currently checked out branch `bar`. It's over 9000!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok to finish up, attain the state of the goal visualization. You'll need to download some commits, make some new branches, and merge those branches into other branches, but it shouldn't take many commands :P"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Les arguments de git pull","","Maintenant que vous savez presque *tout* ce qu'il y a à savoir à propos des arguments de `git fetch` et `git push`, il n'y a presque rien de restant à découvrir avec git pull :)","","C'est parce que git pull est au bout du compte *réellement* juste un raccourci pour un merge suivi d'un merge pour tout ce qui vient d'être rapatrié (par le fetch). Vous pouvez y pensez comme exécuter git fetch avec les *mêmes* arguments specifiés et ensuite fusionner avec là où ces commits sont arrivés.","","Cela fonctionne même quand vous utilisez des arguments très compliqués. Voyons quelques exemples :"]}},{type:"ModalAlert",options:{markdowns:["Voici quelques commandes équivalentes dans git :","","`git pull  origin foo` est équivalent à :","","`git fetch origin foo; git merge o/foo`","","Et ...","","`git pull  origin bar~1:bugFix` est équivalent à :","","`git fetch origin bar~1:bugFix; git merge bugFix`","","Vous voyez ? git pull est vraiment simplement un raccourci pour fetch + merge, et tout ce dont git pull s'occupe est la destination des commits (l'argument `destination` qu'il utilise durant le fetch).","","Voyons une démonstration :"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Si nous précisons l'emplacement à rappatrier, tout se passe comme avant avec fetch mais nous fusionnons avec tout ce qui a été rapatrié"],afterMarkdowns:["Vu ? en précisant `master` nous avons téléchargé les commits dans `o/master` comme d'habitude. Puis nous avons fusionné `o/master` avec là où nous sommes, *sans se soucier* de la branche courante."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cela fonctionne-t-il avec une source et une destination aussi ? Et oui ! Voyons cela :"],afterMarkdowns:["Wow, c'est énorme en une commande. Nous avons créé une brance locale nommée `foo`, téléchargé les commits depuis la branche master distante dans `foo`, et ensuite fusionné cette branche dans notre branche actuelle de travail `bar`. It's over 9000!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok pour finir ce niveau, atteignez l'état décrit dans la visualisation de l'objectif. Vous aurez besoin de télécharger quelques commits, de faire quelques nouvelles branches, et de fusionner ces branches dans d'autres branches, mais cela ne devrait pas utiliser trop de commandes :P"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de git pull","","Ahora que sabés prácticamente *todo* lo que hay que saber sobre los parámetros de `git fetch` y `git push`, casi que no queda nada para cubrir de git pull :)","","Eso es porque git pull es simplemente un atajo para hacer un fetch seguido de un merge. Podés pensarlo como correr git fetch con los *mismos* parámetros, y después mergear aquello a donde esos commits hayan ido a parar.","","Esto aplica incluso cuando usás parámetros hiper-rebuscados. Veamos algunos ejemplos:"]}},{type:"ModalAlert",options:{markdowns:["Estos son algunos comandos equivalentes de git:","","`git pull  origin foo` equivale a:","","`git fetch origin foo; git merge o/foo`","","Y...","","`git pull  origin bar~1:bugFix` equivale a:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","¿Ves? git pull es simplemente un atajo para un fetch + merge, y todo lo que le importa a git pull es dónde terminaron esos commits (el parámetro `destino` que determina durante el fetch).","","Veamos una demostración:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Si especificamos el lugar del que hacer fetch, todo ocurre como antes, pero sólo mergeamos lo que se fetcheó"],afterMarkdowns:["¡Ves! Especificando `master` bajamos los commits a `o/master` como siempre. Después mergeamos `o/master` a nuestra rama actual, *sin importar* qué había en nuestra copia de trabajo."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Esto funciona con origen y destino, también? ¡Más vale! Veámoslo:"],afterMarkdowns:["Wow, eso es un MONTÓN en un único comando. Creamos una nueva rama local llamada `foo`, descargamos los commits del master del remoto a esta rama `foo`, y después mezclamos esa rama a nuestra rama actual `bar`. ¡¡¡Supera los 9000!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["OK: para terminar, alcanzá el estado del objetivo. Vas a necesitar descargar algunos commits, crear algunas ramas nuevas, y mergear esas ramas junto con otras, pero no debería llevar demasiados comandos :P"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parâmetros do git pull","","Agora que você sabe praticamente *tudo* que há para saber sobre parâmetros do `git fetch` e `git push`, não há praticamente nada a se abordar a respeito do  git pull :)","","Isso é porque o git pull no final das contas é *realmente* apenas um atalho para um fetch seguido de um merge em seja lá o que acabou de ser baixado. Você pode pensar nele como rodar o git fetch recebendo os *mesmos* argumentos, seguido de um merge no lugar *onde* esses commits foram parar.","","Isso se aplica mesmo no caso de argumentos loucamente complicados. Vejamos alguns exemplos:"]}},{type:"ModalAlert",options:{markdowns:["Aqui estão alguns comandos que são equivalente para o Git:","","`git pull  origin foo` é igual a:","","`git fetch origin foo; git merge o/foo`","","E...","","`git pull  origin bar~1:bugFix` é igual a:","","`git fetch origin bar~1:bugFix; git merge bugFix`","","Viu? O git pull é realmente um atalho para fetch + merge, e tudo com o que o git pull se importa é com onde os commits foram parar (o parâmetro de `destino` que ele descobre durante o fetch).","","Vejamos uma demonstração:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Se especificarmos o lugar onde fazer o fetch, tudo acontece como antes com o fetch, mas fazemos o merge naquilo que acabou de ser baixado"],afterMarkdowns:["Veja! Especificando `master` nós baixamos commits em `o/master` como sempre. Então fizemos um merge de `o/master` com o lugar onde estamos, *independente* daquilo que está atualmente em checkout."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Isso também funciona com origem e destino especificados? Sim, você acertou! Vejamos:"],afterMarkdowns:["Wow, isso é MUITA coisa em um comando só. Nós criamos um novo ramo local chamado `foo`, baixamos commits do master remoto nesse ramo `foo`, e então fizemos um merge dele com o ramo atualmente em checkout, `bar`."],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, para terminar, obtenha o estado da visualização do objetivo. Você vai precisar baixar alguns commits, criar novos ramos, e fazer merge de ramos em outros ramos, mas não deve precisar de muitos comandos para isso :P"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git pull 的參數","","現在你已經知道關於 `git fetch` 以及 `git push` 的*任何參數*，但是我們還可以再聊聊 `git pull`:)","","那是因為 `git pull` 到目前為止*的確*只是表示 fetch 之後再 merge 所 fetch 的 commit，你可以把它想成，當使用 `git fetch` 時使用*一樣*的參數，之後再從 fetch 下來的 commit *所放置*的位置做 merge。","","這同樣也適用於當你指定相當複雜的參數，讓我們來看一些例子："]}},{type:"ModalAlert",options:{markdowns:["對於 git 來說，有一些意義一樣的指令：","","`git pull  origin foo` 相當於：","","`git fetch origin foo; git merge o/foo`","","而且...","","`git pull  origin bar~1:bugFix` 相當於：","","`git fetch origin bar~1:bugFix; git merge bugFix`","","看吧？`git pull` 真的就只是表示 fetch 跟 merge 的一個簡化後的指令，而且 `git pull` 所根據的是這些 commit 要放置的位置（在 fetch 的時候所指定的`destination`）。","","讓我們來看一個例子："]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果我們在 fetch 的時候有指定`位置`的話，跟之前一樣，fetch 所做的事情沒有變，但是我們會 merge 我們剛剛所 fetch 的該`位置`的commit。"],afterMarkdowns:["看吧！指定位置為 `master`，跟平常一樣，我們下載了 commit 並且放到 `o/master` 上，接著，我們會 merge `o/master` 到我們現在的位置，*不管*我們現在所 checkout 的位置在哪裡。"],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["他是不是也可以同時指定 source 以及 destination？你說對了啦！讓我們來看一下："],afterMarkdowns:["哇！這個指令強而有力，我們在 local 建立了一個新的 `foo` branch，下載了 remote 的 `master` 的 commit，並且放到 local 的 `foo` branch，之後 merge `foo` branch 到我們目前所 checkout 的 `bar` branch。這實在是太超過了！！！"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這一關，達到視覺化目標的要求，你需要下載一些 commit，建立一些新的 branch，並且 merge 這些 branch 到其他的 branch 上面，這個關卡不需要打太多的指令:P"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git pull 参数","",'现在你知道关于fetch/push几乎所有的东西了, 不过pull也有一个"nothing"呢!:)',"","因为 git pull 就是fetch后跟merge的缩写. 我可以认为执行git fetch 用了相同的参数, 然后再merge 你所fetch的提交(commit)","","这可以和其它更复杂的参数一起使用, 看看例子:"]}},{type:"ModalAlert",options:{markdowns:["以下命令在 git 中是等价的:","","`git pull  origin foo` 相当于：","","`git fetch origin foo; git merge o/foo`","","还有...","","`git pull  origin bar~1:bugFix` 相当于：","","`git fetch origin bar~1:bugFix; git merge bugFix`","","看到了? git pull 实际上就是fetch + merge的缩写, git pull 在乎的是提交在哪里结束(也就是git fetch所确定的destination)","","一起来看个例子吧："]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果我们指定要提取的<place>, 所有的事情都会跟之前一样发生, 除了merge.  "],afterMarkdowns:["看! 通过指定master 我们更新了o/master. 然后我们merge `o/master` 到我们的检出分支(当前检出的任意分支). "],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这也适用于source / destination 吗? 当然喽, 看看吧:"],afterMarkdowns:[" 哇, 这就一个命令. 我们在本地创建了一个叫foo的分支, 远端的master分支, 被下载到了本地foo分支. 然后再merge到我们的当前分支. 终于完啦!9000!!!"],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["好啦, 做作业! 请获取虚拟目标.  你需要下载一些提交,然后创建一些新分支, 再合并这些分支到其它分支, 这花不了几个命令 :P "]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Optionen für Git Pull","","Da du jetzt so ziemlich *alles* kennst, was es an Optionen für `git fetch` und `git push` gibt, ist kaum noch etwas zu Optionen für `git pull` zu sagen. :)","","Das liegt daran, dass `git pull` letztendlich *wirklich* nur eine Abkürzuung für `fetch` gefolgt von einem `merge` von was auch immer gerade heruntergeladen wurde, ist. Denk es dir als ein `git fetch` mit denselben Optionen und einem anschließenden Merge.","","Das trifft sogar zu, wenn du völlig abgedrehte Optionen verwendest. Ein paar Beispiele:"]}},{type:"ModalAlert",options:{markdowns:["Hier sind einige gleichwertige Befehle in Git:","","`git pull origin foo` ist dasselbe wie:","","`git fetch origin foo; git merge o/foo`","","Und ...","","`git pull origin bar~1:bugFix` ist dasselbe wie:","","`git fetch origin bar~1:bugFix; git merge bugFix`","",'Siehst du? `git pull` ist wirklich nur eine Abkürzung von `fetch` + `merge` und es interessiert sich nur dafür wo die Commits hin sollen (die "Ziel"-Option, die es beim `fetch` auswertet).',"","Schauen wir uns eine Demonstration an:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Wenn wir den Ort, auf den das `fetch` ausgeführt werden soll, angeben, passiert alles so wie beim `git fetch` aber es wird direkt danach auch ein Merge ausgeführt."],afterMarkdowns:["Siehst du? Da wir `master` angegeben haben sind die Commits in `o/master` heruntergeladen worden. Danach wurde `o/master` gemerged, egal was gerade ausgecheckt war."],command:"git pull origin master",beforeCommand:"git clone; go -b bar; git commit; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Funktioniert das auch wenn man Quelle und Ziel angibt? Aber sicher! Das sehen wir hier:"],afterMarkdowns:["Wow, das ist eine Menge in einem einzelnen Befehl. Wir haben lokal einen neuen Branch namens `foo` erstellt, die Commits vom `master` des Servers dorthin heruntergeladen und ihn danach in unseren aktuell ausgecheckten Commit `bar` gemerged."],command:"git pull origin master:foo",beforeCommand:"git clone; git fakeTeamwork; go -b bar; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, um's zu Ende zu bringen versuch das Ziel aus der Zielgrafik zu erreichen. Du wirst einige Commits herunterladen, einige neue Branches anlegen und diese in andere mergen müssen, aber das sollte nicht allzuviele Befehle benötigen. :P"]}}]}}}
},{}],103:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C3","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C3","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C2"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git clone;git commit;git commit;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}',name:{en_US:"Git Pushin'",zh_CN:"Git Push",zh_TW:"git push",es_AR:"git push",pt_BR:"Git Push",de_DE:"Git Push",ja:"Git Push",fr_FR:"Git push"},hint:{en_US:"Remember you have to clone before you can push!",zh_CN:"push 之前你需要先 clone.",zh_TW:"push 之前你需要先 clone",es_AR:"¡Acordate que tenés que clonar antes de pushear!",pt_BR:"Lembre-se de clonar antes de fazer o push!",de_DE:"Denk dran, dass du einen Clone brauchst bevor du Pushen kannst!",ja:"Pushできる前にまずレポジトリをcloneする必要があるのをお忘れなく",fr_FR:"Rappelez-vous que vous devez cloner avant de pouvoir faire un push !"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Ok, so I've fetched changes from remote and incorporated them into my work locally. That's great and all... but how do I share _my_ awesome work with everyone else?","","Well, the way to upload shared work is the opposite of downloading shared work. And what's the opposite of `git pull`? `git push`!","","`git push` is responsible for uploading _your_ changes to a specified remote and updating that remote to incorporate your new commits. Once `git push` completes, all your friends can then download  your work from the remote.","",'You can think of `git push` as a command to "publish" your work. It has a bunch of subtleties that we will get into shortly, but let\'s start with baby steps...',"","*note -- the behavior of `git push` with no arguments varies depending on one of git's settings called `push.default`. The default value for this setting depends on the version of git you're using, but we are going to use the `upstream` value in our lessons. This isn't a huge deal, but it's worth checking your settings before pushing in your own projects.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Here we have some changes that the remote does not have. Let's upload them!"],afterMarkdowns:["There we go -- the remote received commit `C2`, the branch `master` on the remote was updated to point at `C2`, and our *own* reflection of the remote (`o/master`) was updated as well. Everything is in sync!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["To finish this level, simply share two new commits with the remote. Strap in though, because these lessons are about to get a lot harder!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Ok, donc j'ai rapatrié les changements du dépôt distant et les incorporé dans mon travail local. C'est super ... mais comment je partage _mon_ travail génial avec tous les autres ?","","En fait, la manière d'envoyer du travail à partager fonctionne à l'opposé du téléchargement de travail partagé. Et quel est l'opposé de `git pull` ? `git push`!","","`git push` est responsable de l'envoi de _vos_ changements vers un dépôt distant et de la mise à jour de ce dépôt pour incorporer vos commits. Une fois `git push` terminé, tous vos amis peuvent télécharger votre travail depuis le dépôt distant.","",'Vous pouvez voir `git push` comme une commande qui "publie" votre travail. Elle a une variété de subtilité que nous allons voir rapidement, mais commençons avec le b.a-ba ...',"","*note : le comportement de `git push` avec aucun argument varie avec l'un des réglages de git appelé `push.default`. La valeur par défaut pour ce réglage dépend de la version de git utilisée, mais nous allons utiliser la valeur `upstream` dans nos leçons. Ce n'est pas un gros inconvénient, mais vérifiez tout de même vos réglages avant de pusher vos propres projets.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Nous avons fait ici quelques changements que le dépôt distant n'a pas. Envoyons-les !"],afterMarkdowns:["Et voilà -- le dépôt distant a reçu le commit `C2`, la branche `master` a été mise à jour sur `C2`, et vôtre *propre* représentation de la branche distante (`o/master`) a aussi été mise à jour. Tout est synchronisé !"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, partager simplement des nouveaux commits avec le dépôt distant. Accrochez-vous, parce que ces leçons vont devenir beaucoup plus difficiles !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## git push","","Ok, entonces ya bajé los cambios de un repositorio remoto y los integré en mi trabajo localmente. Esto es genial y todo... pero ¿cómo comparto _mis_ cambios con el resto?","","Bueno, la forma de subir el trabajo compartido es la opuesta a cómo descargar trabajo. Y ¿qué es lo opuesto a `git pull`? ¡`git push`!","","`git push` es el responsable de subir _tus_ cambios a un remoto específico y de actualizar ese remoto para incluir tus nuevos commits. Cuando `git push` termina, todos tus amigos pueden descargar tu trabajo del remoto.","",'Podés pensar en `git push` como un comando para "publicar" tu trabajo. Tiene un par de sutilezas con las que vamos a meternos pronto, pero empecemos de a poco.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Acá tenemos algunos cambios que nuestro remoto no tiene. ¡Subámoslos!"],afterMarkdowns:["Ahí está: el remoto recibió el commit `C2`, la rama `master` de ese remoto se actualizó para apuntar a `C2`, y nuestro *propio* reflejo del remoto (`o/master`) también fue actualizado. ¡Todo está en sincronía!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, simplemente compartí dos nuevos commits con el remoto. Igual, no te confíes, ¡ya se van a complicar las lecciones!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Ok, então vimos como baixar mudanças do repositório remoto e incorporá-las à árvore local. Isso é ótimo e tal... mas como eu faço para compartilhar o _meu_ trabalho sensacional com as outras pessoas?","","Bem, a forma de subir trabalho a ser compartilhado é a oposta daquela de baixar trabalho que foi compartilhado. E qual o oposto de `git pull` (puxar)? É `git push` (empurrar)!","","O `git push` é responsável por subir as _suas_ mudanças para um repositório remoto especificado, e atualizar esse remoto para incorporar seus novos commits. Uma vez que o `git push` se completa, todos os seus amigos podem baixar o seu trabalho do repositório remoto.","",'Você pode pensar no `git push` como um comando para "publicar" o seu trabalho. Ele tem uma série de nuances que vamos abordar em breve, mas comecemos com passos curtos...',"","*Nota -- o comportamento de `git push` sem argumentos varia dependendo da configuração `push.default` do Git. O valor padrão para essa configuração depende da versão do Git que você estiver usando, mas vamos assumir o valor `upstream` nestas lições. Isso não é um grande problema, mas vale a pena verificar suas configurações antes de fazer push nos seus próprios projetos.*"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Aqui temos algumas mudanças que o repositório remoto não contém. Vamos subi-las!"],afterMarkdowns:["Aqui vamos nós -- o repositório remoto recebeu o commit `C2`, o ramo `master` no repositório remoto foi atualizado para apontar para `C2`, e a *nossa* reflexão do remoto (`o/master`) foi atualizada também. Está tudo sincronizado!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, simplesmente compartilhe dois novos commits com o repositório remoto. No entanto, segure-se no seu assento, pois estas lições estão prestes a ficar mais difíceis!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","ok，現在我已經從 remote 下載了一些更新，並且把它們 merge 到我的 local 上面的 branch，這聽起來實在太讚了...，但是我要如何分享_我_所做的更新給其它人呢？","","喔，其實上傳並且分享更新跟下載更新並且 merge 是相反的兩件事情，那什麼是 `git pull` 的相反呢？ 那就是 `git push`！","","`git push` 負責上傳_你的_ commit 到特定 remote 上面並且做出相對應的更新，只要做完了 `git push`，所有你的朋友都可以從 remote 上面下載你所送出去的 commit。","",'你可以把 `git push` 當作是一個"發佈"你的工作進度的指令，還有一些我們即將要講到的細節，但是先讓我們從一些簡單的步驟開始。']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["這裡我們有了一些 remote 所沒有的 commit。讓我們來上傳它們吧！"],afterMarkdowns:["我說的沒錯吧！remote 收到了 commit `C2`，同時在 remote 上的 `master` branch 也一起更新並且指向 `C2`，同時我們*自己的* `o/master` 也一併更新了！"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成這個關卡，只要上傳兩個新的 commit 給 remote，不要太得意忘形喔！因為這些課程將會愈來愈難！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","太棒了, 我们已经学习了从远端获取|合并工作到我们的本地工作.但是我们如果分享工作呢?","","好吧, 上载工作正好同下载工作相反, 那与`git pull`相反的命令是什么? `git push`! ","","`git push` 负责将你的提交上传到远端, 一旦`git push`完成, 你的朋友就可以在远端下载你的工作了! ","","你可以将`git push`视为发布你工作的命令. 它有一些特别的地方, 稍后我们会了解到, 我们开始吧."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["这里我们有一个变更, 而远端却没有, 我们先上传吧!"],afterMarkdowns:["到了, 远端收到的了`C2`提交, 远端的`master`分支 也被更新并指到了`C2`,我们的远端代表(o/master)也同样被更新了. 所有的东西都被同步了!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["要完成本节, 需要向远端分享两个提交. 戒骄戒躁，课程还会更难哦! "]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Push","","Nun hab ich also Änderungen vom entfernten Server geholt und in meine lokale Arbeit integriert. Das ist schön und gut ... aber wie teile ich _meine_ Wahnsinns-Entwicklungen mit allen anderen?","","Naja, das Hochladen von Zeug ist das Gegenteil zum Herunterladen von Zeug. Und was ist das Gegenteil von `git pull`? Genau, `git push`!","","`git push` ist dafür verantwortlich _deine_ Änderungen zu einem bestimmten entfernten Server hochzuladen und dort zu integrieren. Sobald das `git push` durch ist, können alle deine Freunde diese Änderungen zu sich herunterladen.","",'Du kannst dir `git push` als einen Befehl zum "Veröffentlichen" deiner Arbeit vorstellen. Es gibt da noch ein paar Feinheiten, aber lass uns mal mit kleinen Schritten anfangen.']}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Hier haben wir ein paar Änderungen, die auf dem Remote noch fehlen. Und hoch damit!"],afterMarkdowns:["Na bitte -- das Remote hat den Commit `C2` bekommen, der `master` auf dem Remote ist entsprechend aktualisiert worden und unsere *eigene* Abbildung des `master` auf dem Remote namens `o/master` wurde auch aktualisiert. Alles im Lot!"],command:"git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu schaffen musst du einfach nur zwei neue Commits auf das Remote bringen. Aber stell dich schon mal darauf ein, dass die nächsten Level anspruchsvoller werden!"]}}]}}}},{}],104:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C2","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C3","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"C0","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git push origin master;git push origin foo",startTree:'{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C3","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"}},"HEAD":{"target":"C0","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',disabledMap:{"git checkout":!0},name:{en_US:"Git push arguments",zh_CN:"Git push 的参数",zh_TW:"git push 的參數",es_AR:"Parámetros de git push",pt_BR:"Parâmetros do git push",de_DE:"Optionen für Git Push",ja:"Git pushの引数",fr_FR:"Paramètres de git push"},hint:{en_US:'You can always look at the last slide of the dialog with "objective"',zh_CN:'你可以利用 "objective" 来阅读对话窗口的最后一页',zh_TW:'你可以利用 "objective" 來閱讀對話視窗的最後一頁',es_AR:'Siempre podés ver el último mensaje tipeando "objective"',pt_BR:'Você sempre pode rever o último slide com o comando "objective"',de_DE:'Du kannst dir die Zielsetzung des Levels immer wieder mit "objective" anzeigen lassen',ja:'ダイアログの最後のスライドを参照するには"objective"を実行',fr_FR:'Vous pouvez toujours regarder le dernier slide des dialogues en tapant "objective".'},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Push arguments","","Great! Now that you know about remote tracking branches we can start to uncover some of mystery behind how git push, fetch, and pull work. We're going to tackle one command at a time but the concepts between them are very similar.","",'First we\'ll look at `git push`. You learned in the remote tracking lesson that git figured out the remote *and* the branch to push to by looking at the properties of the currently checked out branch (the remote that it "tracks"). This is the behavior with no arguments specified, but git push can optionally take arguments in the form of:',"","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["What is a `<place>` parameter you say? We'll dive into the specifics soon, but first an example. Issuing the command:","","`git push origin master`","","translates to this in English:","",'*Go to the branch named "master" in my repository, grab all the commits, and then go to the branch "master" on the remote named "origin." Place whatever commits are missing on that branch and then tell me when you\'re done.*',"",'By specifying `master` as the "place" argument, we told git where the commits will *come from* and where the commits *will go*. It\'s essentially the "place" or "location" to synchronize between the two repositories.',"","Keep in mind that since we told git everything it needs to know (by specifying both arguments), it totally ignores where we are checked out!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see an example of specifying the arguments. Note the location where we are checked out in this example."],afterMarkdowns:["There we go! `master` got updated on the remote since we specified those arguments."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What if we hadn't specified the arguments? What would happen?"],afterMarkdowns:["The command fails (as you can see), since `HEAD` is not checked out on a remote-tracking branch."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, for this level let's update both `foo` and `master` on the remote. The twist is that `git checkout` is disabled for this level!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Les arguments de push","","Bien ! Maintenant que vous connaissez le suivi des branches, nous pouvons fouiller ce qui se cache derrière le fonctionnement de push, fetch, et pull. Nous allons aborder une commande à la fois, mais elles sont très similaires.","","En premier lieu regardons `git push`. Vous avez appris dans la leçon sur le suivi des branches que git détermine le dépôt distant *et* la branche à envoyer en regardant les propriétés de la branche courante (i.e. la branche qu'elle \"suit\" -- track). C'est le comportement quand aucun argument n'est spécifié, mais git peut optionnellement prendre des arguments de la forme :","","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["Quel est le paramètre `<place>`? Nous allons voir ces particularités bientôt, mais d'abord un exemple. Exécuter la commande :","","`git push origin master`","","ce qui veut dire :","",'*Va dans la branche "master" de mon dépôt, récupère tous les commits, et ensuite va dans la branche distante "master" sur le dépôt nommé "origin". Cela place tous les commits manquants sur cette branche puis me notifie quand c\'est terminé.*',"","En spécifiant `master` comme argument `<place>`, nous avons dit à git *d'où* les commits venaient et où ils *allaient*. C'est en fait \"l'emplacement\" à synchroniser entre les deux dépôts.","","Gardez à l'esprit que nous avons dit à git tout ce dont il a besoin (en précisant les deux arguments), il ignore totalement quelle est la branche courante !"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons un exemple d'arguments. Notez la branche courante dans cet exemple."],afterMarkdowns:["Voilà ! `master` a été mise à jour puisque nous avons spécifié ces arguments."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Et si nous n'avions pas mis d'arguments ? Que ce serait-il passé ?"],afterMarkdowns:["La commande échoue (comme vous pouvez le voir), car `HEAD` ne se trouve pas sur une branche configurée pour suivre une branche distante."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, pour ce niveau mettez à jour `foo` et `master` sur le dépôt distant. La difficulté est que `git checkout` est désactivée pour ce niveau !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parámetros de push","","¡Genial! Ahora que sabés acerca de las ramas que trackean remotos podemos empezar a develar algo del misterio detrás de git push, fetch y pull. Vamos a atacar de a un comando a la vez, pero los conceptos entre ellos son muy similares.","",'Veamos primero `git push`. Ya aprendiste en la lección sobre ramas remotas que git determinó el remoto *y* la rama a la que pushear mirando las propiedades de la rama actual (el remoto al que "trackea"). Este es el comportamiento default para cuando no se especifican parámetros, pero git push toma, opcionalmente, parámetros de la forma:',"","`git push <remoto> <lugar>`","",""]}},{type:"ModalAlert",options:{markdowns:["¿Qué será este parámetro `<lugar>`, te preguntarás? Ya vamos a entrar en detalle, pero primero un ejemplo. Correr el comando:","","`git push origin master`","","se traduce así al español:","",'*Andá a la rama llamada "master" en mi repositorio, agarrá todos los commits, y después andá a la rama "master" del remoto llamado "origin". Aplicá ahí todos los commits que falten, y avisame cuando termines.*',"",'Especificando `master` como el parámetro "lugar", le dijimos a git de dónde traer los commits, y a dónde mandarlos. Es, básicamente, el "lugar" o "ubicación" que sincronizar entre ambos repositorios.',"","Tené en cuenta que, como le dijimos a git todo lo que necesitaba saber (especificando ambos parámetros), ¡ignora totalmente dónde estamos parados en este momento¡"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos un ejemplo especificando los parámetros. Notá en dónde estamos parados en este ejemplo."],afterMarkdowns:["¡Ahí está! Se actualizó `master` en el remoto, porque especificamos esos parámetros."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Y si no especificabamos los parámetros? ¿Qué hubiera pasado?"],afterMarkdowns:["El comando falla (como podés ver), porque `HEAD` no está sobre ninguna rama que trackee algún remoto."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok. Para este nivel, actualicemos tanto `foo` como `master` en el remoto. El tema está en que ¡tenemos deshabilitado `git checkout` en este nivel!"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Parâmetros do push","","Ótimo! Agora que você sabe sobre remote tracking de ramos, podemos começar a revelar um pouco do mistério por trás de como o push, o fetch e o pull funcionam. Vamos lidar com um comando por vez, mas os conceitos são bastante similares.","",'Primeiro, vamos abordar o `git push`. Você aprendeu na lição sobre remote tracking que o Git descobria o repositório remoto *e* o ramo correspondente onde fazer o push olhando nas propriedades do ramo que está atualmente em checkout (verificando o ramo remoto que ele "segue"). Este é o comportamento quando nenhum parâmetro é especificado, mas o git push pode opcionalmente receber parâmetros na seguinte forma:',"","`git push <repositório remoto> <lugar>`","",""]}},{type:"ModalAlert",options:{markdowns:["Você deve estar se perguntando: o que é esse parâmetro `<lugar>`? Vamos discutir as especifidades em breve, mas vejamos primeiro um exemplo. Executar o comando:","","`git push origin master`","","pode ser traduzido para o seguinte em Português:","",'*Vá ao ramo chamado "master" no meu repositório local, pegue todos os commits, então vá ao ramo "master" no repositório remoto chamado "origin". Coloque quaisquer commits que estiverem faltando nesse ramo, e então me diga quando estiver pronto.*',"",'Especificando `master` como parâmetro "lugar", dizemos ao Git de onde os commits *vão vir* e para onde os commits *irão*. É essencialmente o "lugar" onde sincronizar entre os dois repositórios.',"","Tenha em mente que já que contamos ao Git tudo que ele precisa saber (especificando ambos os parâmetros), ele ignora totalmente o checkout atual!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos um exemplo especificando os argumentos. Preste atenção no commit que sofreu checkout neste exemplo."],afterMarkdowns:["Aqui vamos nós! O `master` foi atualizado no repositório remoto, já que especificamos os parâmetros."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["E se eu não especificasse parâmetros? O que aconteceria?"],afterMarkdowns:["O comando falha (como você pode ver), já que o `HEAD` não havia sofrido checkout para um ramo com propriedade de remote-tracking definida."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, neste nível vamos atualizar tanto o `foo` como o `master` no repositório remoto. Porém desabilitamos o comando `git checkout` para dificultar um pouco a tarefa!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## push 的參數","","太好了！現在你已經明白了 remote tracking，我們可以開始聊 git push、fetch 以及 pull 的一些有趣的地方，我們一次會講解一個指令，但是它們之間的概念是很類似的。","","首先我們來看一下 `git push`，你已經在 remote tracking 的課程中學習到 git 是根據目前 checkout 的 branch 所 track 的 remote branch 來做 push，這是在沒有任何的參數的情況下的預設動作，但是 git push 允許我們可以加上一些參數：","","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["`<place>` 這個參數表示什麼? 我們等一下會提到細節，但是先來看一個例子，執行以下的指令：","","`git push origin master`","","將這段解釋成中文：","",'*先到我的 repo 中的 "master" branch，抓下所有的 commit，然後到叫作 "origin" 的 remote 的 "master" branch，檢查 remote 的 commit 有沒有跟我的 repo 一致，如果沒有，就更新。*',"",'將 `master` 當作 "place" 這個參數，我們告訴 git 這些 commit 是*從哪裡來的*，而且它們要*往哪裡去*。對於要同步兩個 repo， "place" 或者是 "location" 是非常重要的。',"","要記住喔，因為我們告訴 git 它所要知道的（有兩個參數），因此它才不會管你現在所 checkout 的 branch！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們來看一個有加上參數的例子，在這個例子中，要特別注意到我們所 checkout 的位置。"],afterMarkdowns:["我說的沒錯吧！因為我們加上了參數，所以在 remote 上的 `master` branch 更新了。"],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["假如我們沒有特別指令參數會發生什麼事情？"],afterMarkdowns:["指令會失敗（就像你看到的），因為 `HEAD` 並沒有指向一個有 track remote branch 的 branch 上面阿。"],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["好的，在這個關卡中，我們要更新在 remote 上的 `foo` 以及 `master` branch，比較遺憾的是 `git checkout` 在這個關卡中是不被允許的喔！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Push 参数","","好! 既然你知道了远端跟踪分支, 我们可以开始揭开隐藏在git push/pull/fetch背后的秘密. ","","首先看看`git push`, 在远端跟踪分支中, 你学到了git 会找出要push的目的地(通过查看检出的分支, 及分支关联到的跟踪分支). 这是无参数的行为, 不过我们也可以为push指定参数:","","`git push <remote> <place>`","",""]}},{type:"ModalAlert",options:{markdowns:["`<place>` 参数意味什么呢? 我们会深入其中的细节, 先看看例子, 这个命令是:","","`git push origin master`","","* 切到master分支, 然后抓取所有的提交, 再将新提交推送到远端的master分支!","","通过指定`master`为<place>参数, 我们告诉git 提交来自于master, 要推送到远端的master. 这种使用方式基本上用于同步两仓库","","谨记, 因为我们通过指定参数告诉了git 所有的事, git 就忽略了我们所检出的分支(转而直接使用参数指定的分支作为source/destination)"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["我们看看指定参数的例子. 注意下我们当前检出的位置."],afterMarkdowns:["好了! 通过指定参数, 远端的`master` 得到了更新"],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["不指定参数会发生什么呢?"],afterMarkdowns:["命令失败了! 因为我们所check out 的HEAD没有跟踪分支.  "],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["本节, 我们要更新远端的`foo`和`master`, 在本节中`git checkout` 是被禁用的!"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Push-Optionen","","Großartig! Da du dich jetzt mit Remote Tracking Branches auskennst können wir anfangen, die Geheimnisse hinter `git push`, `fetch` und `pull` zu ergründen. Wir werden uns einen Befehl nach dem anderen vornehmen, aber die Funktionsweisen sind sich sehr ähnlich.","",'Zunächst schauen wir uns `git push` an. Du hast im Level über Remote Tracking schon mitbekommen, dass Git den Remote Server *und* den Branch herausbekommt, indem es sich die Eigenschaften des aktuell ausgecheckten Branches ansieht (in denen das Remote steht, das der Branch "trackt"). Das ist das Verhalten bei keiner Angabe weiterer Optionen -- du kannst bei `git push` aber auch folgende setzen:',"","`git push <Remote> <Ort>`","",""]}},{type:"ModalAlert",options:{markdowns:['Was "Ort" sein soll fragst du? Das klären wir später genau, schauen wir uns zunächst ein Beispiel an:',"","`git push origin master`","","Das bedeutet im Klartext:","",'"Geh zum Branch namens `master` in meinem Repository, nimm all seine Commits, dann geh zum Branch `master` auf dem Remote namens `origin`. Leg da alles Commits ab die fehlen und sag mir wenn du fertig bist."',"",'Dadurch, dass wir `master` als "Ort" angegeben haben, weiß Git *woher* die Commits kommen und *wohin* sie sollen. Es ist im Grunde der Name der Orte, die zwischen zwei Repositorys synchronisiert werden soll.',"","Dadurch, dass wir Git alles explizit gesagt haben, was es für die Operation wissen muss (durch Angabe von Remote und Ort) ist es vollkommen egal, was gerade ausgecheckt ist."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns noch ein Beispiel an. Beachte was in diesem Fall gerade ausgecheckt ist."],afterMarkdowns:["Da haben wir's! `master` wurde auf dem Remote aktualisiert, weil wir beide Optionen angegeben haben."],command:"git checkout C0; git push origin master",beforeCommand:"git clone; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was wäre passiert, wenn wir keine Optionen benutzt hätten?"],afterMarkdowns:["Der Befehl schlägt fehlt, da `HEAD` nicht auf einem Branch steht, der ein Remote trackt."],command:"git checkout C0; git push",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Ok, in diesem Level lass und sowohl `foo` als auch `master` auf dem Remote aktualisieren. Um's spannender zu machen, ist `git checkout` in diesem Level deaktiviert."]}}]}}}},{}],105:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C4","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C4","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C5","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C4","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C5","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C5":{"parents":["C2"],"id":"C5"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git push origin master^:foo;git push origin foo:master",startTree:'{"branches":{"master":{"target":"C6","id":"master","remoteTrackingBranchID":"o/master"},"foo":{"target":"C4","id":"foo","remoteTrackingBranchID":"o/foo"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C2","C3"],"id":"C4"},"C5":{"parents":["C2"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Git push arguments -- Expanded!",zh_CN:"Git push 参数 2!",zh_TW:"git push 的參數，延伸討論！",es_AR:"¡Más! Parámetros de git push",pt_BR:"Parâmetros do git push -- expandido",de_DE:"Optionen für Git Push -- noch mehr!",ja:"Git pushの引数 -- 拡張編!",fr_FR:"Arguments de git push -- toujours plus !"},hint:{en_US:'Remember you can admit defeat and type in "show solution" :P',zh_CN:'如果你失败了, 可以通过 "show solution" 找到解决方案 :P',zh_TW:'如果你失敗了，可以利用 "show solution" 來找到解答:P',es_AR:'Recordá que podés admitir tu derrota y tipear "show solution" para ver la solución :P',pt_BR:'Lembre-se que você pode admitir que foi derrotado e digitar "show solution" :P',de_DE:'Vergiss nicht dass du aufgeben kannst, indem du "show solution" eingibst :P',ja:'降参して解説を見るには"show solution"を実行できるのをお忘れなく',fr_FR:'N\'oubliez pas que vous pouvez toujours déclarer forfait avec "show solution" :P'},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## `<place>` argument details","","Remember from the previous lesson that when we specified `master` as the place argument for git push, we specified both the *source* of where the commits would come from and the *destination* of where the commits would go.","","You might then be wondering -- what if we wanted the source and destination to be different? What if you wanted to push commits from the `foo` branch locally onto the `bar` branch on remote?","","Well unfortunately that's impossible in git... just kidding! Of course it's possible :)... git has tons and tons of flexibility (almost too much).","","Let's see how in the next slide..."]}},{type:"ModalAlert",options:{markdowns:["In order to specify both the source and the destination of `<place>`, simply join the two together with a colon:","","`git push origin <source>:<destination>`","","This is commonly referred to as a colon refspec. Refspec is just a fancy name for a location that git can figure out (like the branch `foo` or even just `HEAD~1`)","","Once you are specifying both the source and destination independently, you can get quite fancy and precise with remote commands. Let's see a demo!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Remember, `source` is any location that git will understand:"],afterMarkdowns:["Woah! That's a pretty trippy command but it makes sense -- git resolved `foo^` into a location, uploaded whatever commits that weren't present yet on the remote, and then updated destination."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["What if the destination you want to push doesn't exist? No problem! Just give a branch name and git will create the branch on the remote for you."],afterMarkdowns:["Sweet, that's pretty slick :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["For this level, try to get to the end goal state shown in the visualization, and remember the format of:","","`<source>:<destination>`"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Détails de l'argument `<place>`","","Vous vous rappelez de la dernière leçon : quand vous passiez `master` comme argument `<place>` à git push, cela spécifiait à la fois la *source* de provenance des commits et leur *destination*.","","Vous vous demandez peut-être donc -- et si nous voulions avoir une source et une destination différentes ? Et si vous voulez envoyez des commits de la branche locale `foo` dans la branche distante `bar` ?","","Malheureusement ce n'est pas possible avec git ... ou pas ! Bien sûr que c'est possible :)... git a des tonnes de flexibilité (presque trop).","","Voyons cela au prochain slide ..."]}},{type:"ModalAlert",options:{markdowns:["Pour spécifier la source et la destination dans `<place>`, on les joint simplement par deux points :","","`git push origin <source>:<destination>`","","On en parle souvent comme un refspec. Refspec est juste un nom exotique pour un emplacement que git peut résoudre (comme la branche `foo` ou juste `HEAD~1`)","","Lorsque vous précisez la source et la destination indépendemment, vous pouvez être original et précis avec les commandes sur les dépôts distants. Faisons une démo !"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Rappelez-vous, `source` peut être n'importe quel emplacement que git peut résoudre :"],afterMarkdowns:["Woahou ! C'est une commande très alambiquée mais qui a du sens -- git résoud `foo^` en un emplacement, envoie tous les commits qui n'étaient pas encore présents sur le dépôt distant, et met ensuite à jour la destination."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Que se passe-t-il quand la destination du push n'existe pas encore ? Pas de problème ! Donnez simplement un nom de branche et git va créer la branche distante pour vous."],afterMarkdowns:["Cool, c'est habile :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Pour ce niveau, essayez d'atteindre l'état montré dans la fenêtre d'objectif, et souvenez-vous du format :","","`<source>:<destination>`"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Detalles sobre el parámetro `<lugar>`","","Acordate de la lección anterior que cuando especificamos `master` como el parámetro lugar de git push, especificamos tanto el *origen* del que sacar los commits como el *destino* al que enviarlos.","","Podrías estár preguntándote ¿Y si quisieramos que el origen y el destino sean distintos? ¿Si quisieras pushear los commits de la rama local `foo` a la rama `bar` del remote?","","Bueno, lamentablemente eso no se puede hacer en git... ¡Bazinga! Claro que se puede :)... git es extremadísimamente flexible (casi casi que demsiado).","","Veamos cómo hacerlo a continuación..."]}},{type:"ModalAlert",options:{markdowns:["Para especificar tanto el origen como el destino de `<lugar>`, simplemente unilos usando un dos puntos:","","`git push origin <origen>:<destino>`","","Esto se lo suele llamar refspec con dos puntos. Refspec es simplemente un nombre cool para una ubicación que git puede entender (como la rama `foo`, o incluso `HEAD~1`)","","Una vez que especificás tanto el origen como el destino independientemente, podés ponerte bastante cómodo y preciso con los comandos remotos. ¡Veámos una demo!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Recordá: `origen` es cualquier ubicación que git pueda entender:"],afterMarkdowns:["¡Woow! Ese commando es bastante loco, pero tiene sentido: git resolvió `foo^` a una ubicación, subió cualquier commit de ahí que aún no estuviera en el remoto, y luego actualizó el destino."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["¿Y qué hay si el destino que al querés pushear no existe? ¡No hay drama! Simplemente dale un nombre al branch y git se va a encargar de creártelo en el remoto."],afterMarkdowns:["Genial, simplemente fluye :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para este nivel, tratá de llegar al objetivo final, y acordate del formato:","","`<origen>:<destino>`"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Detalhes sobre `<lugar>`","","Lembra que na lição anterior especificamos `master` como o parâmetro lugar para o git push? Lá definimos tanto a *origem* de onde os commits viriam quanto o *destino* para onde os commits foram.","","Você pode estar se perguntando -- e se eu quisesse que a origem e o destino fossem diferentes? E se eu quisesse enviar commits do ramo local `foo` para o ramo remoto `bar`?","","Bem, infelizmente isso é impossível no Git... só brincando! Claro que é possível :)... o Git tem muita flexibilidade (até mais do que deveria).","","Veremos como fazê-lo no próximo slide..."]}},{type:"ModalAlert",options:{markdowns:["Para especificar tanto a origem como o destino do `<lugar>`, simplesmente juntamos os dois usando dois-pontos:","","`git push origin <origem>:<destino>`","",'Isso é geralmente chamado de "colon refspec" (especificação de referência com dois-pontos). Refspec é só um nome extravagante para um local que o Git consiga entender (como o ramo `foo` ou mesmo `HEAD~1`)',"","Uma vez que você está especificando tanto a origem como o destino independentemente, você pode ser bastante preciso nos comandos relacionados a repositórios remotos. Vejamos uma demonstração!"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lembre-se, `origem` é qualquer lugar que o Git possa entender:"],afterMarkdowns:["Uau! Esse comando é bastante viajado, mas ele faz sentido -- o Git entendeu a referência `foo^`, enviou quaisquer commits que não estavam presentes no repositório remoto, e então atualizou o destino."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["E se o destino para o qual você quiser fazer push não existir? Sem problemas! Dê um nome de ramo e o Git criará o ramo no repositório remoto para você."],afterMarkdowns:["Doce, isso é muito bom :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Para este nível, tente chegar ao estado do objetivo mostrado na visualização, e lembre-se do formato:","","`<origem>:<destino>`"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## `<place>` 這個參數的細節","","回想一下，我們在之前的課程中提到，當我們用 `git push` 並且把 `master`  當作 `<place>` 這個參數的時候，我們就相當於告訴 git 我們的所要更新的 commit 要*從哪裡來*（source） 並且要 *往哪裡去*（destination）。","","你可能會很好奇，當我們的 source 以及 destination 是不同的時候，應該怎麼做？當你想要 push `foo` branch 上面的 commit 到 remote 的 `bar` branch 的時候，應該怎麼做？","","很遺憾地，對於 git 來說這是不可能的...開玩笑的啦！當然是有可能的:)... git 有非常非常大的彈性（太超過了啦）。","","讓我們來看看下一頁..."]}},{type:"ModalAlert",options:{markdowns:["為了要指定 `<place>` 的 source 以及 destination，只要利用一個冒號將這兩個連在一起：","","`git push origin <source>:<destination>`","","這通常被稱為一個 colon （冒號） refspec，refspec 只是一個表示 location （位置） 的花俏的名稱，這個位置可以被 git 辨別（例如 `foo` branch 或是 `HEAD~1`）。","","一旦你單獨指定了 source 以及 destination，你可以看到花俏且準確的指令。讓我來來看一個例子！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["記住， `source` 表示任意可以被 git 辨識的位置："],afterMarkdowns:["哇!這實在是一個很花俏的指令但是確很合理，git 把 `foo^` 解讀成一個位置，並且 push 該位置的 commit 到目前 remote 的 master branch。"],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果你想要 push 的 destination 不存在怎麼辦？沒有問題！只要給一個 branch 的名稱，git 就會在 remote 幫你建立。"],afterMarkdowns:["太讚了，實在非常地簡單:D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["對於這個關卡，想辦法達到這個視覺化的目標，而且要記得格式：","","`<source>:<destination>`"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## `<place>` argument details","","还记得之前课程说的吧, 当为git push 指定master为place时,我们可以设置 要提交的来源 和 提交到目的地. ","","你可能想知道-- 如果来源和目的地不一样呢? ","","好吧, 很不幸git 不可能做到... 只是个玩笑! 当然是可能的啦:)... git拥有超强的灵活性(几乎不能再多了) ","","我们看看下一个幻灯片..."]}},{type:"ModalAlert",options:{markdowns:["要为<place> 指定 source 和 destination, 只需要用冒号`:`将二者联结.","","`git push origin <source>:<destination>`","","这通常被称为<colon refspec>, refspec是一个奇特的名-- 用于git 能识别的位置(比如分支foo 或者 HEAD~1) ","","一旦你指定了独立的来源和目的地, 你就可以得到花哨而精确的远程命令, 让我们看看演示! "]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["记住, `source` 是git 能理解的任何位置:"],afterMarkdowns:[" 这是个很迷幻的命令, 但它是合理的 --  git 将foo^解析 为位置, 上传新提交到远端的目的地.  "],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果你要push到的destination不存在呢? 没问题! git 会在远端为你创建这个分支!"],afterMarkdowns:["很赞吧! 干得漂亮!:D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["本节练习, 试着达到可视窗口展示的目标, 记住参数格式哟:","","`<source>:<destination>`"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Details zum `<Ort>`-Parameter","",'Du erinnerst dich von dem vorherigen Level, dass, als wir `master` als "Ort" beim `git push` angegeben haben, daraus sowohl die *Quelle* als auch das *Ziel* für die Operation abgeleitet wurden.',"","Daher fragst du dich vielleicht -- was wenn wir möchten, dass Quelle und Ziel anders sind? Was wenn du Commits von einem lokalen Branch `foo` in den Branch `bar` auf einem Server schieben möchtest?","","Tja, leider ist das in Git unmöglich .... ein Scherz! Natürlich ist das möglich. Git besitzt tonnenweise Flexibilität (eher zuviel, als zuwenig).","","Und gleich sehen wir, wie das geht ..."]}},{type:"ModalAlert",options:{markdowns:["Um sowohl Quelle als auch Ziel im `<Ort>`-Parameter anzugeben, gib sie einfach verbunden mit einem Doppelpunkt ein:","","`git push origin <Quelle>:<Ziel>`","","Das wird üblicherweise Refspec (Referenz-Spezifikation) genannt. Refspec ist nur ein anderer Name für einen Ort, mit dem Git etwas anfangen kann (wie mit Branch `foo` oder mit `HEAD~2`)","","Sobald du Quelle und Ziel separat angibt, kannst du flexibel und präzise entfernte Branches ansteuern. Hier eine Demo:"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vergiss nicht, `Quelle` ist jeder mögliche Ort, mit dem Git etwas anfangen kann:"],afterMarkdowns:["Boah! Das ist ein ziemlich abgefahrener Befehl gewesen, aber er ist sinnvoll -- Git hat `foo^` zu einem Commit aufgelöst, alle Commits die bis zu diesem einschließich noch nicht auf dem Server waren hochgeladen und dann dort das Ziel aktualisiert."],command:"git push origin foo^:master",beforeCommand:"git clone; go -b foo; git commit; git commit"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Was wäre wenn das Ziel des `push` gar nicht existiert? Kein Problem! Wenn das Ziel ein Branch-Name ist, wird Git den Branch auf dem Server einfach anlegen."],afterMarkdowns:["Schick, das ist ziemlich praktisch. :D"],command:"git push origin master:newBranch",beforeCommand:"git clone; git commit"}},{type:"ModalAlert",options:{markdowns:["Um dieses Level zu schaffen versuch den dargestellten Zielzustand zu erreichen und vergiss nicht das Format:","","`<Quelle>:<Ziel>`"]}}]}}}
},{}],106:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22o/master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22o/master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3A%5B%22master%22%5D%7D%2C%22side1%22%3A%7B%22target%22%3A%22C2%27%22%2C%22id%22%3A%22side1%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22side2%22%3A%7B%22target%22%3A%22C4%27%22%2C%22id%22%3A%22side2%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%2C%22side3%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22side3%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C4%22%3A%7B%22parents%22%3A%5B%22C3%22%5D%2C%22id%22%3A%22C4%22%7D%2C%22C5%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C5%22%7D%2C%22C6%22%3A%7B%22parents%22%3A%5B%22C5%22%5D%2C%22id%22%3A%22C6%22%7D%2C%22C7%22%3A%7B%22parents%22%3A%5B%22C6%22%5D%2C%22id%22%3A%22C7%22%7D%2C%22C8%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C8%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C8%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%2C%22originTree%22%3A%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C7%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3Anull%2C%22localBranchesThatTrackThis%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C8%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C8%22%7D%2C%22C2%27%22%3A%7B%22parents%22%3A%5B%22C8%22%5D%2C%22id%22%3A%22C2%27%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%27%22%5D%2C%22id%22%3A%22C3%27%22%7D%2C%22C4%27%22%3A%7B%22parents%22%3A%5B%22C3%27%22%5D%2C%22id%22%3A%22C4%27%22%7D%2C%22C5%27%22%3A%7B%22parents%22%3A%5B%22C4%27%22%5D%2C%22id%22%3A%22C5%27%22%7D%2C%22C6%27%22%3A%7B%22parents%22%3A%5B%22C5%27%22%5D%2C%22id%22%3A%22C6%27%22%7D%2C%22C7%27%22%3A%7B%22parents%22%3A%5B%22C6%27%22%5D%2C%22id%22%3A%22C7%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D%7D",solutionCommand:"git fetch;git rebase o/master side1;git rebase side1 side2;git rebase side2 side3;git rebase side3 master;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master","localBranchesThatTrackThis":null},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":["master"]},"side1":{"target":"C2","id":"side1","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side2":{"target":"C4","id":"side2","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null},"side3":{"target":"C7","id":"side3","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C3"],"id":"C4"},"C5":{"parents":["C1"],"id":"C5"},"C6":{"parents":["C5"],"id":"C6"},"C7":{"parents":["C6"],"id":"C7"}},"HEAD":{"target":"side3","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C8","id":"master","remoteTrackingBranchID":null,"localBranchesThatTrackThis":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C8":{"parents":["C1"],"id":"C8"}},"HEAD":{"target":"master","id":"HEAD"}}}',hint:{en_US:"Remember you can always use the undo or reset commands",zh_CN:"你随时都可以使用 undo/reset 命令.",zh_TW:"你隨時都可以使用 undo 或 reset 指令。",es_AR:"Acordate que siempre podés usar los comandos reset y undo",pt_BR:"Lembre-se que você sempre pode usar undo ou reset",de_DE:"Denk dran, du kannst immer undo oder reset benutzen, um deine Befehle zurück zu nehmen.",ja:"undoやresetコマンドをいつでも使用することができるのをお忘れなく",fr_FR:"Rappelez-vous que vous pouvez toujours utiliser les commandes undo et reset."},name:{en_US:"Push Master!",zh_CN:"Push Master!",zh_TW:"push master！",es_AR:"¡Push Master!",pt_BR:"Push Master!",de_DE:"Push Master!",ja:"Push Master!",fr_FR:"Maître du push !"},compareOnlyMasterHashAgnostic:!0,startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Merging feature branches","","Now that you're comfortable with fetching, pulling, and pushing, lets put these skills to the test with a new workflow.","","It's common for developers on big projects to do all their work on feature branches (off of `master`) and then integrate that work only once it's ready. This is similar to the previous lesson (where side branches get pushed to the remote), but here we introduce one more step.","","Some developers only push and pull when on the `master` branch -- that way `master` always stays updated to what is on the remote (`o/master`).","","So for this workflow we combine two things:","","* integrating feature branch work onto `master`, and","* pushing and pulling from the remote"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see a refresher real quick of how to update `master` and push work."],afterMarkdowns:["We executed two commands here that:","","* rebased our work onto new commits from remote, and","* published our work to the remote"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["This level is pretty hefty -- here is the general outline to solve:","","* There are three feature branches -- `side1` `side2` and `side3`","* We want to push each one of these features, in order, to the remote","* The remote has since been updated, so we will need to incorporate that work as well","",":O intense! good luck, completing this level is a big step."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Fusionner les modifications des branches","","Maintenant que vous êtes habitué à fetch, pull, et push, utilisons ces compétences dans le test avec un nouveau plan de travail.","","Il est commun pour les développeurs de gros projets de faire tout leur travail dans des branches représentant une fonctionnalité (en dehors de `master`) et d'intégrer ce travvail une fois qu'il est prêt. C'est similaire à la leçon précédente (où les branches secondaires étaient pushées sur le dépôt distant), mais ici nous introduisons une étape supplémentaire.","","Certains développeurs font un push puis un pull uniquement quand ils sont sur la branche `master` -- de cette manière `master` reste toujours à jour avec ce qu'il y a sur le dépôt distant (`o/master`).","","Ainsi pour ce faire nous combinons deux choses :","","* intégrer la fonctionnalité de la branche dans `master`, et","* pusher et puller sur le dépôt distant."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Rappelons-nous rapidement comment mettre à jour `master` et envoyer (push) le travail."],afterMarkdowns:["Nous exécutons ici deux commandes :","","* on rebase nôtre travail sur de nouveaux commits, et","* on publie nôtre travail sur le dépôt distant"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Ce niveau est assez gigantesque -- voici l'idée générale de la solution :","","* Il y a trois branches de fonctionnalités -- `side1` `side2` et `side3`","* Nous voulons envoyer chacune de ces modifications, dans l'ordre, sur le dépôt distant","* Le dépôt distant a été mis à jour entre-temps, donc nous avons aussi besoin d'intégrer ce travail","",":O difficile ! bonne chance, finir ce niveau est une grande étape."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Mergeando feature branches","","Ahora que estás cómodo fetcheando, pulleando y pusheando, pongamos a prueba estas habilidades con un nuevo flujo de trabajo.","","Es bastante común que los desarrolladores en los grandes proyectos trabajen sobre ramas específicas para cada tarea (feature branches) basadas en `master`, y que las integren sólo cuando están listas. Esto es similar a la lección anterior, en que pusheabamos las ramas periféricas al remoto, pero acá tenemos un paso más.","","Algunos desarrolladores sólo pushean y pullean cuando están en `master`: de ese modo, `master` siempre se mantiene actualizado con el remoto (`o/master`).","","Entonces, en este flujo de trabajo combinamos dos cosas:","","* integramos el trabajo de las ramas específicas a `master`, y","* pusheamos y pulleamos del remoto"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Refresquemos un poco cómo actualizar `master` y pushear nuestro trabajo."],afterMarkdowns:["Acá ejecutamos dos comandos que:","","* rebasearon nuestro trabajo sobre los nuevos commits del remoto, y","* publicamos nuestro trabajo en ese remoto"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Este nivel es bastante pesado. Acá tenés algunos lineamientos para resolverlo:","","* Tenemos tres ramas específicas -- `side1` `side2` and `side3`","* Queremos pushear cada una de esas ramas, en orden, al remoto","* El remoto fue actualizado, así que vamos a tener que integrar esos cambios también","",":O ¡Intenso! ¡Éxitos! Completar este nivel representa un gran avance."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Merge de ramos de funcionalidades","","Agora que você está confortável com fetch, pull e push, vamos colocar essas habilidades em teste com um novo fluxo de trabalho.","","É comum para desenvolvedores de grande projetos fazer todo o trabalho em ramos de funcionalidades (fora do `master`) e então integrar esse trabalho uma única vez quando ele estiver pronto. Isso é similar à lição anterior (onde ramos laterais eram enviados ao repositório remoto), mas introduzimos mais um passo.","","Alguns desenvolvedores só fazem push e pull quando no ramo `master` -- desta forma o `master` sempre se mantém atualizado com aquilo que está no ramo remoto (`o/master`).","","Então, para este fluxo de trabalho, combinaremos duas coisas:","","* Integrar ramos de funcionalidade no `master`, e","* Realizar push e pull do repositório remoto"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos refrescar a memória sobre como atualizar o `master` e enviar trabalho."],afterMarkdowns:["Nós executamos dois comandos aqui que:","","* Fizeram rebase de nosso trabalho nos novos commits do repositório remoto, e","* Publicaram nosso trabalho no repositório remoto"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Esse nível é um pouco pesado -- aqui está a linha geral de como resolver:","","* Há três ramos de funcionalidades -- `side1`, `side2` e `side3`","* Queremos enviar cada uma dessas funcionalidades, em ordem, para o repositório remoto","* O repositório remoto foi atualizado desde então, então também precisaremos incorporar o trabalho realizado lá","",":O intenso! boa sorte, completar este nível é um grande passo."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## merge feature branch","","現在你已經很熟悉 fetch、pull 以及 push，讓我們來針對一個新的問題來應用這些技巧。","","在一個大型的專案裡面，程式設計師經常會在 feature branch（有別於 master branch）上面做開發，之後等開發完之後，在一次 merge 回去。這跟之前的課程是很類似的（其它的 branch 被 push 到 remote），但是現在我們還要再多介紹一個步驟。","","某些程式設計師只針對 `master` branch 進行 push 或者是 pull。這樣子的話 `master` 一直都保持跟 remote （`o/master`） 同步。","","所以針對這個問題我們結合了兩件事情：","","* merge feature branch 到`master` branch，並且","* push remote 以及 pull remote"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們馬上來實際看一下如何更新 `master` 並且 push 到 remote。"],afterMarkdowns:["我們在這裡執行兩個指令:","","* rebase 我們的 branch 到 remote 的新的 commit 上面，並且","* 發佈到 remote 上面"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["這個關卡很複雜，這裡有一些提示：","","* 總共有三個 feature branch，分別是 `side1`，`side2` 以及 `side3`","* 我們想要將這三個 branch 分別 push 到 remote。","* 但是 remote 已經被事先更新過了，所以我們必須要先同步那些更新。","",":O 很好！祝你好運，完成這個關卡是一個很重要的步驟。"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Einen Feature Branch reintegrieren","","Nun da du mit `fetch`, `pull`, und `push` vertraut bist sollten wir diese Fähigkeiten mit einem neuen Arbeitsablauf auf die Probe stellen.","","Für Entwickler in großen Projekten ist es nicht ungewöhnlich ihre Arbeit in Feature Branches (von `master` abgeleitet) zu erledigen und dann diese Inhalte zu reintegrieren, wenn sie fertig sind. Das ist ähnlich dem vorherigen Level (in dem ein Feature Branch auf den Server geschoben wird), nur mit einem zusätzlichen Schritt.","","Einige Entwickler pushen und pullen nur auf dem `master` -- dadurch ist `master` immer aktuell zu seinem Gegenstück auf dem Server (`o/master`).","","Für diesen Ablauf werden wir also zwei Dinge kombinieren:","","* einen Feature Branch in `master` reintegrieren und","* vom entfernten Server pushen und pullen."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns zur Erinnerung schnell noch mal an wie man den `master` aktualisiert und seine Commits pusht."],afterMarkdowns:["Wir haben hier zwei Befehle ausgeführt, die:","","* unsere Commits auf die neuen Commits vom Server gepackt und","* unsere Commits zum Server gepusht haben."],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["Dieser Level ist ziemlich heftig -- hier ist im Groben der Weg:","","* Es gibt drei Feature Branches -- `side1`, `side2` und `side3`.","* Wir möchten jedes dieser Features, in dieser Reihenfolge, auf den Server bringen.","* Der Server hat Commits, die wir noch nicht haben, diese müssen also bei uns integriert werden.","",":O Krass! Viel Erfolg, diesen Level zu schaffen ist ein großer Schritt."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## 合并特性分支","","现在你应该很熟悉fetch/pull/push了, 现在我们将这些技能用于一种新的工作流.","","在一个大型项目中, 这是非常普遍的 -- 开发者在特性分支(不是`master`)上工作, 工作完成后只做一次合并. 这跟前面课程描述很相像, 不过本节我们会深入一些.","","一些开发者只在master上做push/pull —— 这样的话master总是最新的,即与远端(o/master)一致. ","","对于这样的工作流, 我们合并两个步骤","","* 合并特性分支到`master`","* 推送并更新远端"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["让我们看看更快的推送流程 "],afterMarkdowns:["我们执行了两个命令: ","","* 将远端的新提交衍合到我们的工作中","* 向远端推送我们的工作"],command:"git pull --rebase; git push",beforeCommand:"git clone; git commit; git fakeTeamwork"}},{type:"ModalAlert",options:{markdowns:["本篇有点儿复杂-- 以下是问题核心","","* 这里有三个特性分支 -- `side1` `side2` and `side3`","* 我需要按顺序将这三分支推送到远端.","* 因为远端已经被更新过了, 所以我们需要先做合并!","",":O 紧张了? 祝好运! 完成了本节, 你就前进了一大步啦! "]}}]}}}},{}],107:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C3","id":"master"},"o/master":{"target":"C1","id":"o/master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C3":{"parents":["C1"],"id":"C3"},"C4":{"parents":["C1"],"id":"C4"}},"HEAD":{"target":"C4","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git commit;git checkout o/master;git commit",startTree:'{"branches":{"master":{"target":"C1","id":"master"},"o/master":{"target":"C1","id":"o/master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master"}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Remote Branches",zh_CN:"Remote Branches",zh_TW:"remote branch （遠端分支）",es_AR:"Ramas remotas",pt_BR:"Ramos remotos",de_DE:"Branches auf entfernten Servern",ja:"リモートのブランチ",fr_FR:"Les branches distantes"},hint:{en_US:"Pay attention to the ordering -- commit on master first!",zh_CN:"注意顺序 -- 先在 master 上 commit!",zh_TW:"注意順序的問題喔！先在 master branch 上面送 commit",es_AR:"Prestá atención al orden: ¡commiteá sobre master primero!",pt_BR:"Preste atenção na ordem: commite no master primeiro!",de_DE:"Beachte die Sortierung -- committe zuerst auf dem master!",ja:"順番に注意 -- まずmasterに対してcommitしましょう",fr_FR:"Prêtez attention à l'ordre -- les commits sur master d'abord !"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git Remote Branches","","Now that you've seen `git clone` in action, let's dive into what actually changed.","","The first thing you may have noticed is that a new branch appeared in our local repository called `o/master`. This type of branch is called a _remote_ branch; remote branches have special properties because they serve a unique purpose.","","Remote branches reflect the _state_ of remote repositories (since you last talked to those remote repositories). They help you understand the difference between your local work and what work is public -- a critical step to take before sharing your work with others.","","Remote branches have the special property that when you check them out, you are put into detached `HEAD` mode. Git does this on purpose because you can't work on these branches directly; you have to work elsewhere and then share your work with the remote (after which your remote branches will be updated)."]}},{type:"ModalAlert",options:{markdowns:["### What is `o/`?","","You may be wondering what the leading `o/` is for on these remote branches. Well, remote branches also have a (required) naming convention -- they are displayed in the format of:","","* `<remote name>/<branch name>`","","Hence, if you look at a branch named `o/master`, the branch name is `master` and the name of the remote is `o`.","","Most developers actually name their main remote `origin`, not `o`. This is so common that git actually sets up your remote to be named `origin` when you `git clone` a repository.","","Unfortunately the full name of `origin` does not fit in our UI, so we use `o` as shorthand :( Just remember when you're using real git, your remote is probably going to be named `origin`!","","That's a lot to take in, so let's see all this in action."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lets check out a remote branch and see what happens"],afterMarkdowns:["As you can see, git put us into detached `HEAD` mode and then did not update `o/master` when we added a new commit. This is because `o/master` will only update when the remote updates."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["To finish this level, commit once off of `master` and once after checking out `o/master`. This will help drive home how remote branches behave differently, and they only update to reflect the state of the remote."]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Les branches distantes de git","","Maintenant que nous avons vu `git clone` en action, plongeons dans ce qui a changé.","","La première chose que vous avez peut-être remarqué est qu'une nouvelle branche est apparue dans vôtre dépôt local appelée `o/master`. Ce type de branche est appelée une branche _distante_; les branches distantes ont des propriétés spécifiques car elles servent à un but précis.","","Les branches distantes reflètent _l'état_ des dépôts distants (depuis que nous avons parlé de ces dépôts distants). Elles vous aident à comprendre les différences entre vôtre travail et le travail public -- une étape critique à effectuer avant de partager son travail avec les autres.","","Les branches distantes ont la propriété particulière que quand vous vous rendez dessus (checkout), `HEAD` est détaché. Git fait cela car vous ne pouvez pas travailler sur ces branches directement ; vous devez travailler ailleurs et ensuite partager vôtre travail avec le dépôt distant (après quoi vos branches distantes seront mises à jour)."]}},{type:"ModalAlert",options:{markdowns:["### Qu'est-ce que `o/`?","","Vous vous demandez peut-être ce qu'est le préfixe `o/` devant ces branches distantes. En pratique, les branches distantes ont aussi une convention de nommage (obligatoire) -- elles sont affichées avec le format :","","* `<nom dépôt distant>/<nom de la branche>`","","Donc, si vous regardez une branche nommée `o/master`, le nom de la branche est `master` et le nom du dépôt distant est `o`.","","La plupart des développeurs nomment leur principal dépôt distant `origin`, pas `o`. C'est si commun que git configure en fait vôtre dépôt local pour être nommé `origin` quand vous faîtes un `git clone` du dépôt.","","Malheureusement le nom complet `origin` ne rentre pas dans notre interface graphique et nous utilisons donc `o` comme raccourci :( Rappelez-vous juste que quand vous utilisez le vrai git, vôtre dépôt distant est probablement nommé `origin`!","","Cela fait beaucoup d'un coup, donc voyons cela en action."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Rendons-nous sur une branche et regardons ce qui se passe"],afterMarkdowns:["Comme vous pouvez le voir, git nous a mis dans le mode \"detached\" `HEAD` puis n'a pas mis à jour `o/master` quand nous avons ajouté un nouveau commit. C'est parce que `o/master` va se mettre à jour uniquement quand le dépôt distant est mis à jour."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Pour finir ce niveau, faîtes un commit en dehors de `master` puis un après s'être rendu dans `o/master`. Cela va nous aider à comprendre la différence de comportement des branches distantes, et qu'elles se mettent à jour uniquement pour refléter l'état du dépôt distant."]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramas remotas de git","","Ahora que viste `git clone` en acción, ahondemos en lo que realmente cambió.","","Lo primero que habrás notado es que apareció una nueva rama en tu repositorio local llamada `o/master`. A este tipo de ramas se las llama ramas _remotas_. Las ramas remotas tienen propiedades especiales porque sirven un propósito específico.","","Las ramas remotas reflejan el _estado_ de los repositorios remotos (como estaban la última vez que hablaste con ellos). Te ayudan a entender las diferencias entre tu trabajo local y el trabajo que ya está publicado - un paso crítico antes de compartir tu trabajo con los demás.","","Las ramas remotas tienen la propiedad especial de que cuando las checkouteás, pasás al modo detached `HEAD`. Git lo hace a propósito porque no podés trabajar en esas ramas directamente: tenés que trabajar en algún otro lado y después compartir tu trabajo con el remoto (tras lo que tus ramas remotas se actualizarán)."]}},{type:"ModalAlert",options:{markdowns:["### ¿Qué es `o/`?","","Podrías estar preguntándote qué significa ese `o/` al principio de las ramas remotas. Bueno, las ramas remotas también tienen una convención de nombres obligatoria -- se las muestra con el formato:","","* `<nombre del remoto>/<nombre de la rama>`","","Entonces, si mirás una rama llamada `o/master`, el nombre de la rama es `master`, y el nombre del remoto es `o`.","","La mayoría de los desarrolladores llaman `origin` a su remoto en lugar de `o`. Esto es tan común que git efectivamente crea tu remoto llamándolo `origin` cuando hacés `git clone` de un repositorio.","","Desafortunadamente el nombre `origin` completo no entra en nuestra UI, así que usamos `o` para abreviar :( Simplemente recordá que cuando uses el git real, tu remoto ¡probablemente se llame `origin`!","","Hay mucho para procesar, así que veámoslo en acción."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Checkouteemos una rama remota a ver qué pasa"],afterMarkdowns:["Como ves, git nos puso en el modo detached `HEAD` y no actualizó `o/master` cuando creamos un nuevo commit. Esto es porque `o/master` sólo va a actualizarse cuando el remoto se actualice."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Para completar este nivel, commiteá una vez sobre `master` y una después de checkoutear `o/master`. Esto te va a ayudar a caer en cómo las ramas remotas funcionan distinto, y que sólo se actualizan para reflejar el estado del remoto."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["## Ramos Remotos no Git","","Agora que vimos o `git clone` em ação, vamos estudar aquilo que realmente mudou.","","A primeira coisa que você pode ter percebido é que um novo ramo chamado `o/master` aparece no nosso repositório local. Esse tipo de ramo é chamado de ramo _remoto_; ramos remotos possuem propriedades especiais pois eles servem a um propósito único.","","Ramos remotos refletem o _estado_ de repositórios remotos (desde a última vez na qual você falou com eles). Eles ajudam a entender as diferenças entre o trabalho local e o trabalho atualmente público -- um passo crítico a ser dado antes de compartilhar seu trabalho com os outros.","",'Ramos remotos possuem a propriedade especial de, ao sofrerem um checkout, colocarem o repositório em modo "Detached HEAD". O Git faz isso de propósito, porque você não pode trabalhar nesses ramos diretamente; você é obrigado a trabalhar em outro lugar e só então compartilhar seu trabalho com o remoto (depois disso, os ramos remotos serão atualizados).']}},{type:"ModalAlert",options:{markdowns:["### O que é `o/`?","","Você pode estar se perguntando o que o `o/` no início do nome dos ramos remotos significa. Bem, ramos remotos possuem uma convenção obrigatória de nomes -- eles são mostrados no seguinte formato:","","* `<nome do repositório remoto>/<nome do ramo>`","","Então, se o ramo remoto é chamado `o/master`, o nome do ramo é `master` e o nome do repositório remoto é `o`.","","A maioria dos desenvolvedores na verdade chama o repositório remoto principal de `origin`, e não de `o`. Isso é tão comum que o Git define por padrão o nome `origin` para o repositório remoto quando você usa o comando `git clone` para clonar um repositório.","","Infelizmente o nome completo `origin` não cabe na nossa tela, então usamos `o` como uma abreviação :( Apenas lembre-se que no Git de verdade, o repositório remoto provavelmente será chamado `origin` em vez de `o`!","","É muita informação de uma só vez, então vamos dar uma pausa e ver um pouco de ação."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vamos fazer checkout de um ramo remoto e ver o que acontece"],afterMarkdowns:['Como você pode ver, o Git nos colocou no modo "Detached HEAD", e não atualizou o `o/master` quando adicionamos um novo commit. Isso é porque o `o/master` só será atualizado quando o repositório remoto for atualizado.'],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Para completar este nível, commite uma vez em `master`, e outra vez depois de fazer checkout em `o/master`. Isso vai ajudá-lo a sentir como os ramos remotos se comportam de forma diferente, e como eles apenas se atualizam para refletir o estado do repositório remoto."]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["## git remote branch","","現在你已經知道 `git clone` 在幹嘛了，讓我們仔細看看到底發生了什麼事。","","你首先看到的是在你的本地端（local repository）出現了一個新的 branch 叫作 `o/master`，這種型態的 branch 叫作 remote branch （遠端分支），因為特殊的需求，因此 remote branch 有特殊的性質。","","remote branch 反應了 remote repository 的狀態（因為你最後接觸的是這些 remote repository），最重要的是，在你想要分享你的 commit 給其他人時，你必須知道你現在的 commit 跟 remote repository 有哪些不同，而 remote branch 的狀態就是在告訴你這些資訊。","","remote branch 有特別的特性，當你移動到 remote branch 時，你就進入到分離 `HEAD` 的狀態，git 這樣做的原因是告訴你不能夠直接影響這些 branch。你必須要在其它的 branch 工作，並且分享到 remote （分享之後，你的 remote branch 就會被更新）。"]}},{type:"ModalAlert",options:{markdowns:["### 什麼是 `o/`?","","你也許會對於 remote branch 前面的 `o/` 感到困惑，喔！remote branch 也（需要） 一個命名法則，或者是一般表示 remote branch 的格式。","","* `<remote 名稱>/<branch 名稱>`","","因此，當你看到一個 branch 叫做 `o/master`，就表示這個 branch 叫做 master，而且這個 remote 的名稱叫作 `o`。","","很多程式設計師實際上會把他們的 remote 命名為 `origin`，而不是 `o`，這在 git 是很常見的事情，因為當你使用 `git clone` 時，git 會自動把你的 remote 命名為 `origin`。","","但是很不幸的是 `origin` 並沒有辦法完全顯示在我們的 UI 上面，所以我們用 `o` 來簡化它（只要記住當你使用 git 的時候，實際上是命名為 `origin`）。","","有很多事情需要說明，現在讓我們來看看吧！"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["讓我們移動到（checkout）一個 remote branch 並且看一下會發生什麼事情"],afterMarkdowns:["就像你看到的， git 讓我們進到 detached `HEAD` 狀態，同時，當我們加入一個新的 commit 時，`o/master` 都沒有更新，這是因為只有當 remote 更新的時候，`o/master` 才會更新。"],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["要完成這一關，先在 master branch 上面做一次 commit，再移動到 `o/master` 上做一次 commit，這有助於我們了解到 remote branch 的不同，它們只會反應 remote 的狀態。"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["## Branches auf entfernten Servern","","Nun da du `git clone` in Aktion gesehen hast, lass uns tiefer in die Materie eintauchen.","","Das erste, was dir wahrscheinlich aufgefallen ist, ist dass ein neuer Branch in unserem lokalen Repository aufgetaucht ist, namens `o/master`. Diese Art von Branch nennt sich _Remote_ Branch; er hat besondere Eigenschaften, weil er einem bestimmten Zweck dient.","","Ein Remote Branch bildet den Zustand des entsprechenden Branch in einem entfernten Repository ab (dem Zustand in dem der Branch war, als du das letzte mal das entfernte Repository angesprochen hast). Er hilft dir, den Unterschied zwischen deinem lokalen Branch und dem Gegenstück auf dem Server zu sehen -- eine nötige Information, bevor du deine Arbeit mit anderen teilen kannst.","",'Remote Branches besitzen die besondere Eigenschaft dein Repository in den "Detached `HEAD`" Zustand zu versetzen, wenn du sie auscheckst. Git macht das absichtlich so, denn du kannst nicht direkt auf Remote Branches arbeiten; du musst auf Kopien von ihnen arbeiten und deine Änderungen von dort auf den entfernten Server schieben (wonach der Remote Branch dann auch bei dir aktualisiert wird).']}},{type:"ModalAlert",options:{markdowns:["### Was heißt `o/`?","","Du fragst dich vielleicht was das `o/` am Anfang des Namens des Remote Branch bedeuten soll. Nun, Namen von Remote Branches folgen einer (zwingenden) Konvention -- sie werden mit diesem Format gebildet:","","* `<Name des Remote>/<Name des Branches>`","","Wenn du also einen Remote Branch namens `o/master` hast, ist es eine Abbildung des Branches `master` auf dem Server, der in deinem Repository als `origin` bekannt ist.","","Die meisten Entwickler nennen das Haupt-Remote tatsächlich `origin` und nicht `o`. Das ist so verbreitet, dass Git den entfernten Server von dem man ein `git clone` macht tatsächlich als `origin` im Clone speichert.","","Leider passt der ganze Name, `origin`, nicht in unsere Darstellung, deshalb benutzen wir hier kurz `o`. :( Merk dir einfach: wenn du echtes Git benutzt werden die Remotes meistens `origin` heißen!","","So, das war eine Menge zu verdauen, schauen wir uns das in Aktion an."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Checken wir mal einen Remote Branch aus und schauen was passiert"],afterMarkdowns:['Wie du siehst setzt uns Git in den "Detached `HEAD`" Modus und aktualisiert dann nach dem Commit nicht den Branch `o/master`. Das liegt daran, dass der Remote Branch nur aktualisiert wird, wenn sich der entsprechende Branch auf dem Remote verändert.'],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Um diesen Level zu bewältigen musst du einen Commit in `master` machen und einen nachdem du `o/master` ausgecheckt hast. Das illustriert noch einmal wie sich Branches und Remote Branches unterschiedlich verhalten und dass letztere sich nur verändern, wenn sich ihr Zustand auf dem entfernten Server ändert."]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["## Git 远端分支","","现在你看过`git clone`的执行了, 让我们深入下去看看发生了什么?","","第一件事, 你应该注意到在我们的本地仓库出现了一个新的分支`o/master` , 这种类型的分支叫 _remote_ branch (就叫远端分支好了), 远端分支拥有一些用于特别目的的特殊属性.","","远程分支反映了无端仓库的状态(你上次和远端仓库通信的时刻). 这会帮助你理解本地工作与公共工作的不同 -- 这是你与别人分享工作前很重要的一步.","","检出远端分支时, 有一个特别的属性 -- 你会被置于一个分离式的`HEAD`. 因为你不能在这些分支上直接操作, 你必须在别的地方完成你的工作, 再与远端分享你的工作. "]}},{type:"ModalAlert",options:{markdowns:["### 什么是 `o/`？","","你可能想知道这些远端分支的头`o/` 意味着什么. 好吧, 远端分支有一个全名规范 -- 它们以这样的格式显示: ","","* `<remote name>/<branch name>`","","提示, 如果你看到一个分支命名为`o/master`, 那分支名就是`master`, 远端的名就是 `o`. ","","大多数的开发者会将它们的远端命名为`origin`, 而非`o`. 这是如此的普遍, 以致于当你用`git clone` 时,得到的仓库名就是 `origin`","","不幸的是, 我们的UI不适用`origin`, 我们使用缩写`o`, :) 记住, 当你使用真正的git时, 你的远程仓库很可能被命名为`origin`! ","","说了这么多, 让我们看看实例."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果检出remote分支, 会发生什么呢?"],afterMarkdowns:["正如你所见, git 处于了分离`HEAD`, 当添加新的提交时, `o/master`不被更新, 这是因为`o/master` 仅伴随远端更新而更新."],command:"git checkout o/master; git commit",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["尝试完成本节, 在`master`上做一个提交, 再检出`o/master`后再做一提交. 这展示了远端分支行为上的不同, 他们的更新只是反映了远端的状态."]}}]}}}
},{}],108:[function(a,b,c){c.level={goalTreeString:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"bar":{"target":"C1","id":"bar","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',solutionCommand:"git push origin :foo;git fetch origin :bar",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null},"o/foo":{"target":"C1","id":"o/foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":null},"foo":{"target":"C1","id":"foo","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Source of nothing",zh_CN:"没有 source",zh_TW:"沒有 source",es_AR:"Origen de nada",pt_BR:"Origem vazia",de_DE:"Die Quelle des Nichts",ja:"無のsource",fr_FR:"Source de rien du tout"},hint:{en_US:"The branch command is disabled for this level so you'll have to use fetch!",zh_CN:"本节的 branch 命令被禁用了, 你只能使用 fetch! ",zh_TW:"在本關卡中，不允許使用 branch 指令，因此你只能使用 fetch！",es_AR:"El comando branch está deshabilitado para este nivel, así que ¡vas a tener que usar fetch!",pt_BR:"O comando branch está desabilitado para este nível, então você terá de usar o fetch!",de_DE:"Der branch Befehl ist für diesen Level inaktiv, du musst also fetch benutzen",ja:"このレベルではbranchコマンドが無効になっているのでfetchを使うしかない！",fr_FR:"La commande branch est désactivée pour ce niveau, vous devrez donc utiliser fetch !"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Oddities of `<source>`","",'Git abuses the `<source>` parameter in two weird ways. These two abuses come from the fact that you can technically specify "nothing" as a valid `source` for both git push and git fetch. The way you specify nothing is via an empty argument:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Let's see what these do..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['What does pushing "nothing" to a remote branch do? It deletes it!'],afterMarkdowns:['There, we successfully deleted the `foo` branch on remote by pushing the concept of "nothing" to it. That kinda makes sense...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Finally, fetching "nothing" to a place locally actually makes a new branch'],afterMarkdowns:["Very odd / bizarre, but whatever. That's git for you!"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["This is a quick level -- just delete one remote branch and create a new branch with `git fetch` to finish!"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Les bizarreries de `<source>`","",'Git maltraite le paramètre `<source>` parameter de deux façons bizarres. Ces deux abus viennent du fait que vous pouvez techniquement ne "rien spécifier commre `source` valide pour git push et git fetch. Le moyen de ne rien spécifier est un argument vide :',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Voyons ce que cela fait ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Qu'est-ce que produit l'envoi de \"rien\" sur une branche distante ? Cela la détruit !"],afterMarkdowns:['Ici, nous avons brillamment supprimé  la branche `foo` du dépôt distant en lui envoyant le concept de "rien". Cela prend du sens ...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Enfin, un fetch de "rien" dans un emplacement local crée une nouvelle branche'],afterMarkdowns:["Très étrange, mais peu importe. C'est git !"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["C'est un petit niveau -- supprimez simplement une branche distante et faites-en une nouvelle (locale) avec `git fetch` pour terminer !"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Rarezas de `<origen>`","",'Git abusa del parámetro `<origen>` de dos extrañas maneras. Estos dos abusos vienen del hecho de que tecnicamente podés especificar "la nada" como un `origen` válido tanto para git push como para git fetch. El modo de especificar la nada es a través de un parámetro vacío:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Veamos qué hacen estos..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['¿Qué hace el pushear "nada" a una rama remota? ¡La elimina!'],afterMarkdowns:['Ahí está, borramos la rama `foo` exitosamente del remoto pusheándole el concepto de "nada". Tiene algo de sentido...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Finalmente, fetchear "nada" a un lugar local en realidad crea una nueva rama'],afterMarkdowns:["Bastante bizarro, pero, meh, da igual. Así es git."],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Este es un nivel rápido: simplemente borrá una rama remota y creá una nueva usando `git fetch` para completarlo."]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Coisas estranhas do `<origem>`","",'O Git abusa do parâmetro `<origem>` de duas formas estranhas. Esses dois abusos vem do fato de que tecnicamente você pode especificar "nada" como uma `origem` válida tanto para o git push como para o git fetch. A forma como você especifica "nada" é por meio de um argumento vazio:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Vejamos o que esses comandos fazem..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['O que fazer push de "coisa nenhuma" para um ramo remoto significa? Deletar o ramo!'],afterMarkdowns:['Aqui, excluímos com sucesso o ramo `foo` do repositório remoto por meio de um push de "coisa nenhuma" direcionado a ele. Até que faz sentido...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Finalmente, fazer um fetch de "coisa nenhuma" para uma referência local cria um novo ramo'],afterMarkdowns:["Bastante estranho / bizarro, mas de qualquer forma. É assim que o Git é!"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Este é um nível rápido de resolver -- basta remover um ramo remoto com `git push` e criar um novo ramo local com `git fetch` para terminar!"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["###`<source>` 奇怪的地方","",'在兩個奇怪的情況下，git 不使用 `<source>` 參數，事實上，在`git push`以及`git fetch`的情況下，可以允許你"不用"指定` source`，你可以藉由把參數留空，來表示你不想指定 source：',"","* `git push origin :side`","* `git fetch origin :bugFix`","","讓我們來看看這些在做什麼..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["當*沒有*指定 source 的時候，`push` 對於 remote branch 做了什麼？`push`把它刪除掉了！"],afterMarkdowns:['看吧，我們藉由把 source "留空"，成功用 `push` 刪除了 `foo` branch，這合理吧...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['最後，對於 `fetch` 來說，source "留空" 表示我們要在 local 上建立一個新的 branch。'],afterMarkdowns:["很奇怪吧！但那正是 git 為你做的事情！"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["這是一個很簡單的關卡，只需要利用 `git push` 刪除一個 remote 的 branch，並且利用 `git fetch` 建立一個新的 local 的 branch！"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### 奇葩的`<source>`","","有两种罕见的情况, git 不需要 `<source>`. 这基于这样一个事实-- 技术上说就是你不指定<source>. 这是通过空参数实现的","","* `git push origin :side`","* `git fetch origin :bugFix`","","我们看看这是怎么进行的..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果给push传一个空参数会如何呢? 远端会删除分支! "],afterMarkdowns:["就是这样子, 我们通过给push传空值source, 成功删除了远端的`foo`分支, 这真有意思..."],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["如果给fetch传空<source>, 那本地会创建一个新分支."],afterMarkdowns:["很神奇吧! 但无论怎么说, 这就是git !"],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["快速测试 -- 删除远端的分支, 再在本地创建新的分支! "]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Die Eigentümlichkeiten von `<Quelle>`","",'Git "missbraucht" den `<Quelle>`-Parameter in zwei Fällen. Diese rühren daher, dass man technisch gesehen "nichts" als gültige `<Quelle>` sowohl für `git push` als auch für `git fetch` angeben kann. Das macht man so:',"","* `git push origin :side`","* `git fetch origin :bugFix`","","Schauen wir, was das bewirkt ..."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Was passiert, wenn man "nichts" auf einen entfernten Branch pusht? Er wird gelöscht!'],afterMarkdowns:['Und schon haben wir `foo` erfolgreich auf dem Remote gelöscht, weil wir "Leere" darauf geschoben haben. Ist auf seine Weise irgendwie logisch ...'],command:"git push origin :foo",beforeCommand:"git clone; git push origin master:foo"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:['Und weiter: indem man "nichts" von einem Remote in sein lokales Repository zieht, erstellt man tatsächlich einen neuen Branch.'],afterMarkdowns:["Ziemlich abgefahren / bizarr, aber was soll's. Das ist halt Git."],command:"git fetch origin :bar",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["Das ist ein kurzer Level -- lösch einfach den Remote Branch und erstelle einen neuen Branch mit `git fetch`, um ihn zu lösen."]}}]}}}},{}],109:[function(a,b,c){c.level={goalTreeString:"%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C1%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%7D%2C%22o/master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22o/master%22%2C%22remoteTrackingBranchID%22%3Anull%7D%2C%22side%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22side%22%2C%22remoteTrackingBranchID%22%3A%22o/master%22%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C3%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C3%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22side%22%2C%22id%22%3A%22HEAD%22%7D%2C%22originTree%22%3A%7B%22branches%22%3A%7B%22master%22%3A%7B%22target%22%3A%22C3%27%22%2C%22id%22%3A%22master%22%2C%22remoteTrackingBranchID%22%3Anull%7D%7D%2C%22commits%22%3A%7B%22C0%22%3A%7B%22parents%22%3A%5B%5D%2C%22id%22%3A%22C0%22%2C%22rootCommit%22%3Atrue%7D%2C%22C1%22%3A%7B%22parents%22%3A%5B%22C0%22%5D%2C%22id%22%3A%22C1%22%7D%2C%22C2%22%3A%7B%22parents%22%3A%5B%22C1%22%5D%2C%22id%22%3A%22C2%22%7D%2C%22C3%27%22%3A%7B%22parents%22%3A%5B%22C2%22%5D%2C%22id%22%3A%22C3%27%22%7D%7D%2C%22HEAD%22%3A%7B%22target%22%3A%22master%22%2C%22id%22%3A%22HEAD%22%7D%7D%7D",solutionCommand:"git checkout -b side o/master;git commit;git pull --rebase;git push",startTree:'{"branches":{"master":{"target":"C1","id":"master","remoteTrackingBranchID":"o/master"},"o/master":{"target":"C1","id":"o/master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"}},"HEAD":{"target":"master","id":"HEAD"},"originTree":{"branches":{"master":{"target":"C2","id":"master","remoteTrackingBranchID":null}},"commits":{"C0":{"parents":[],"id":"C0","rootCommit":true},"C1":{"parents":["C0"],"id":"C1"},"C2":{"parents":["C1"],"id":"C2"}},"HEAD":{"target":"master","id":"HEAD"}}}',name:{en_US:"Remote Tracking",zh_CN:"Remote Tracking",zh_TW:"remote tracking",es_AR:"Trackeando remotos",pt_BR:"Seguindo remotos",de_DE:"Remote Tracking",ja:"リモートのトラッキング",fr_FR:"Suivi de branche distante"},hint:{en_US:"Remember there are two ways to set remote tracking!",zh_CN:"记住，有两种设置 remote tracking 的方法!",zh_TW:"記住喔，有兩個方式可以去設定 remote tracking",es_AR:"¡Acordate de que hay dos formas de trackear un remoto!",pt_BR:"Lembre-se que há duas formas de seguir um ramo remoto!",de_DE:"Nicht vergessen, es gibt zwei Arten Remote Tracking einzurichten!",ja:"リモートトラッキングを設定する方法が二つあるのをお忘れなく!",fr_FR:"Rappelez-vous qu'il existe deux façons de configurer le suivi de branche distante !"},startDialog:{en_US:{childViews:[{type:"ModalAlert",options:{markdowns:["### Remote-Tracking branches","",'One thing that might have seemed "magical" about the last few lessons is that git knew the `master` branch was related to `o/master`. Sure these branches have similar names and it might make logical sense to connect the `master` branch on the remote to the local `master` branch, but this connection is demonstrated clearly in two scenarios:',"","* During a pull operation, commits are downloaded onto `o/master` and then *merged* into the `master` branch. The implied target of the merge is determined from this connection.","* During a push operation, work from the `master` branch was pushed onto the remote's `master` branch (which was then represented by `o/master` locally). The *destination* of the push is determined from the connection between `master` and `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Remote tracking","",'Long story short, this connection between `master` and `o/master` is explained simply by the "remote tracking" property of branches. The `master` branch is set to track `o/master` -- this means there is an implied merge target and implied push destination for the `master` branch.',"","You may be wondering how this property got set on the `master` branch when you didn't run any commands to specify it. Well, when you clone a repository with git, this property is actually set for you automatically. ","","During a clone, git creates a remote branch for every branch on the remote (aka branches like `o/master`). It then creates a local branch that tracks the currently active branch on the remote, which is `master` in most cases.","","Once git clone is complete, you only have one local branch (so you aren't overwhelmed) but you can see all the different branches on the remote (if you happen to be very curious). It's the best of both worlds!","","This also explains why you may see the following command output when cloning:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### Can I specify this myself?","","Yes you can! You can make any arbitrary branch track `o/master`, and if you do so, that branch will have the same implied push destination and merge target as `master`. This means you can run `git push` on a branch named `totallyNotMaster` and have your work pushed to the `master` branch on the remote!","","There are two ways to set this property. The first is to checkout a new branch by using a remote branch as the specified ref. Running","","`git checkout -b totallyNotMaster o/master`","","Creates a new branch named `totallyNotMaster` and sets it to track `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Enough talking, let's see a demonstration! We will checkout a new branch named `foo` and set it to track `master` on the remote."],afterMarkdowns:["As you can see, we used the implied merge target of `o/master` to update the `foo` branch. Note how master doesn't get updated!!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["This also applies for git push"],afterMarkdowns:["Boom. We pushed our work to the `master` on the remote even though our branch was named something totally different"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Way #2","","Another way to set remote tracking on a branch is to simply use the `git branch -u` option. Running","","`git branch -u o/master foo`","","will set the `foo` branch to track `o/master`. If `foo` is currently checked out you can even leave it off:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Let's see this other way of specifying remote tracking real quick..."],afterMarkdowns:["Same as before, just a more explicit command. Sweet!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Ok! For this level let's push work onto the `master` branch on remote while *not* checked out on `master` locally. I'll let you figure out the rest since this is the advanced course :P"]}}]},fr_FR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Le suivi des branches distantes","",'Dans les dernières leçons, git savait que la branche `master` était reliée à `o/master`, et cela a pu paraître "magique". Il est certain que ces deux branches ont des noms similaires et il peut être logique de croire que la branche locale `master` est liée à la branche distante `master`, mais la relation n\'est prouvée que dans deux scénarios :',"","* Pendant un pull, les commits sont téléchargés dans `o/master` et ensuite *fusionnés* (merge) dans la branche `master`. La cible impliquée dans cette fusion est déterminée par cette relation.","* Pendant un push, le travail de la branche `master` a été envoyé sur la branche distante `master` (qui est localement représentée par `o/master`). La *destination* du push est déterminée par la relation entre `master` and `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Remote tracking","","Pour faire court, cette relation entre `master` et `o/master` est simplement expliquée par la propriété \"remote tracking\" (suivi distant) des branches. La branche `master` est configurée pour suivre `o/master` -- cela signifie qu'il y a une cible de fusion et une destination d'envoi pour la branche `master`.","","Vous vous demandez peut-être comment cette propriété a été configurée pour la branche `master` alors que vous n'avez exécuté aucune commande pour le faire. Eh bien, quand vous clonez un dépôt avec git, cette propriété est configurée automatiquement. ","","Pendant le clonage, git crée une branche distante pour chaque branche du dépôt distant (i.e. des branches comme `o/master`). Il crée ensuite une branche locale qui suit la branche actuellement active sur le dépôt distant, qui se trouve être `master` dans la plupart des cas.","","Une fois que git clone est terminé, vous avez seulement une branche locale (comme ça vous n'êtes pas submergé) mais vous pouvez voir toutes les branches distantes (si vous êtes très curieux). C'est le mieux que l'on puisse vouloir !","","Cela explique aussi pourquoi vous avez peut-être vu la sortie suivante pendant le clonage :","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### Puis-je configurer cela moi-même ?","","Oui vous pouvez ! Vous pouvez suivre `o/master` depuis n'importe quelle branche, et si vous le faîtes, cette branche va avoir la même destination de push et cible de merge que pour `master`. Cela signifie que vous pouvez exéctuer `git push` sur une branche nommée `totallyNotMaster` et envoyer vôtre travail sur la branche `master` du dépôt distant!","","Il y a deux façons de configurer cette propriété. La première est de se placer (checkout) sur une nouvelle branche en utilisant une branche distante comme argument (ref). Exécutons cela","","`git checkout -b totallyNotMaster o/master`","","Crée une nouvelle branche nommée `totallyNotMaster` et la configure pour suivre `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Assez parlé, faisons une démonstration ! Nous allons nous placer sur une nouvelle branche nommée `foo` et la configurer pour suivre `master` du dépôt distant."],afterMarkdowns:["Comme vous pouvez le voir, nous avons utilisé la cible de fusion de `o/master` pour mettre à jour la branche `foo`. Remarquez comme master n'a pas été mise à jour !!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Cela s'applique aussi pour git push"],afterMarkdowns:["Boum. Nous avons envoyé nôtre travail sur `master` du dépôt distant alors que nôtre branche avait un nom totalement différent."],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Way #2","","Une autre façon de configurer le suivi d'une branche est d'utiliser l'option `git branch -u`. Exécuter cela :","","`git branch -u o/master foo`","","va configurer la branche `foo` pour suivre `o/master`. Si `foo` est la branche courante, vous pouvez même ne pas le préciser:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Voyons cette autre manière de paramètrer rapidement le suivi d'une branche distante..."],afterMarkdowns:["Cela se passe comme avant, et c'est plus explicite. Cool !"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Ok ! Pour ce niveau, envoyons le travail dans la branche distante `master` en ne se trouvant *pas* sur la branche `master` locale. Je vous laisse imaginer comment faire :P"]}}]},es_AR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Ramas que trackean remotos","",'Una de las cosas que pueden haber parecido "mágicas" de las últimas lecciones es que git sabía que la rama `master` estaba relacionada con `o/master`. Obviamente, estas ramas tienen nombres parecidos, y podría parecer lógico conectar la rama `master` del remoto con la rama `master` local, pero esta conexión es bien evidente en dos escenarios:',"","* Durante una operación de pull, los commits se descargan a `o/master` y después se *mergean* a la rama `master`. El objetivo implícito del merge se determina con esta conexión.","* Durante un push, el trabajo de la rama `master` se sube a la rama `master` del remoto (que estaba representada localmente por `o/master`). El *destino* del push se determina con esta conexión entre `master` y `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Trackeando remotos","",'Haciéndola corta, esta conexión entre `master` y `o/master` se explica simplemente por la propiedad de "trackear (seguir) remotos" de las ramas. La rama `master` está configurada para trackear `o/master` -- osea, que hay un objetivo implícito para el merge y un destino implícito para de la rama `master`.',"","Podrías estar pensando cómo esa propiedad apareció en tu rama `master` si vos no corriste ningún comando para especificarlo. Bueno, cuando clonás un repositorio con git, esta propiedad se asigna por vos automáticamente.","","Durante un clone, git crea una rama remota por cada rama en el remoto (por ejemplo, ramas como `o/master`). Pero después crea una rama local que trackea la rama activa del remote, que suele ser `master`.","","Una vez completado el git clone, sólo tenés una única rama local (para que no te asustes) pero podés ver todas las ramas que del remoto (si fueras tan curioso). ¡Es lo mejor de ambos mundos!","","Esto también explica por qué podrías ver un mensaje como este durante la clonación:","",'    local branch "master" set to track remote branch "o/master"',"",'    rama local "master" establecida para trackear la rama remota "o/master"']}},{type:"ModalAlert",options:{markdowns:["### ¿Puedo especificarlo yo?","","¡Claro que sí! Podés hacer que cualquier rama que quieras trackee `o/master`, y si lo hicieras, esa rama va a tener el mismo destino implícito de push y objetivo implícito de merge que `master`. Eso signfica que podés correr `git push` en una rama llamada `absolutamenteNoEsMaster` y ¡que tu trabajo se pushee a la rama `master` del remoto!","","Hay dos formas de establecer esta propiedad. La primera es checkoutear una nueva rama usando una rama remota como la referencia especificada. Ejecutar","","`git checkout -b absolutamenteNoEsMaster o/master`","","Crea una nueva rama llamada `absolutamenteNoEsMaster` y la hace trackear a `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Suficiente charla, ¡veamos una demo! Vamos a checkoutear una nueva rama llamada `foo` y hacer que trackee a `master` en el remoto."],afterMarkdowns:["Como podés ver, usamos el objetivo implícito de merge `o/master` para actualizar la rama `foo`. ¡Notá cómo `master` no fue actualizada!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Lo mismo aplica para git push"],afterMarkdowns:["Boom. Pusheamos nuestro trabajo a la rama `master` del remoto incluso cuando nuestra rama se llamaba totalmente distinto"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Forma número 2","","Otra forma de especificar la rama a trackear es usar la opción `git branch -u`. Ejecutando","","`git branch -u o/master foo`","","establecemos que la rama `foo` trackee a `o/master`. Si encima estás parado en `foo`, incluso podés obviarlo:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Veamos rápidamente esta otra forma de especificar la rama a trackear..."],afterMarkdowns:["Lo mismo que antes, sólo que con un comando bastante más explícito. ¡Una belleza!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["¡Ok! Para este nivel, pusheá tu trabajo a la rama `master` del remoto *sin* estar parado sobre `master` localmente. Te dejo que te des cuenta del resto solo, que para algo este es el curso avanzado :P"]}}]},pt_BR:{childViews:[{type:"ModalAlert",options:{markdowns:["### Seguindo ramos remotos","",'Uma coisa que pode ter parecido "mágica" nas lições passadas é que o Git sabia que o ramo `master` estava relacionado com o `o/master`. Certamente esses ramos possuem nomes similares, e tem todo sentido lógico conectar o ramo `master` do lado remoto com o ramo `master` local, mas essa conexão é demonstrada claramente em dois cenários:',"","* Durante uma operação de pull, os commits são baixados em `o/master` e então são *mergidos* no ramo `master`. O alvo do merge é determinado a partir dessa conexão.","* Durante uma operação de push, o trabalho do ramo `master` local é enviado para o ramo `master` remoto (que é representado localmente por `o/master`). O *destino* do push é determinado da conexão entre `master` e `o/master`.",""]}},{type:"ModalAlert",options:{markdowns:["## Remote tracking","",'Resumindo a história, essa conexão entre `master` e `o/master` é explicada pela propriedade de "remote tracking" dos ramos. O ramo `master` é configurado para seguir o ramo `o/master` -- isso significa que existe um alvo implícito de merge e um destino implícito de push para o ramo `master`.',"","Você pode estar se perguntando como essa propriedade foi configurada no ramo `master` se você não executou nenhum comando ordenando que isso fosse feito. Bem, quando você clona um repositório com o Git, essa propriedade é configurada para você automaticamente. ","","Durante a clonagem, o Git cria um ramo remoto para cada ramo que existe no repositório remoto (ou seja, ramos como o `o/master`). Ele cria então um ramo local que segue o ramo atualmente ativo no repositório remoto, que geralmente é o `master`.","","Uma vez que a clonagem esteja completa, você terá apenas um único ramo local (para que você não seja sobrecarregado), mas você pode ver todos os ramos diferentes que existem no repositório remoto (caso você esteja curioso). É o melhor dos dois mundos!","","Isso também explica porque você vê a seguinte mensagem quando clona um repositório:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### Posso eu mesmo especificar isso?","","Sim, você pode! Você pode fazer com que qualquer ramo arbitrário siga o `o/master`, e se você fizer isso, esse ramo terá o mesmo destino de push implícito que e o mesmo alvo de merge que o `master`. Isso significa que você pode executar `git push` em um ramo chamado `realmenteNaoSouOMaster` e ainda assim ter seu trabalho enviado ao ramo `master` do repositório remoto!","","Há duas formas de configurar essa propriedade. A primeira consiste em fazer checkout de um novo ramo usando o ramo remoto como especificação de referência. Executar","","`git checkout -b realmenteNaoSouOMaster o/master`","","Cria um novo ramo chamado `realmenteNaoSouOMaster` e o configura para seguir o `o/master`."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Já foi conversa o suficiente, vamos ver uma demonstração! Vamos fazer checkout de um novo ramo chamado `foo` e configurá-lo para seguir o `master` do repositório remoto."],afterMarkdowns:["Como você pode ver, usamos o alvo implícito de merge do `o/master` para atualizar o ramo `foo`. Veja como o master local não sofreu atualização!!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Isso também se aplica ao git push"],afterMarkdowns:["Boom. Nós enviamos nosso trabalho para o ramo remoto `master` ainda que nosso ramo local tivesse um nome completamente diferente"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Forma #2","","Outra maneira de configurar remote tracking em um ramo é utilizando `git branch -u`. Executando","","`git branch -u o/master foo`","","configuraremos o ramo local `foo` para seguir o `o/master`. Se `foo` for o que estiver atualmente em checkout, você pode inclusive omiti-lo:","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Vejamos outra forma realmente rápida de configurar remote tracking..."],afterMarkdowns:["O mesmo de antes, apenas um comando mais explícito. Doce!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Ok! Para este nível, vamos fazer push no ramo remoto `master` *sem estar* em um checkout do `master` local. Vou deixar você descobrir o resto, já que isto é um curso avançado :P"]}}]},zh_TW:{childViews:[{type:"ModalAlert",options:{markdowns:["### remote tracking branch","",'在之前的課程中，有一件事情看起來很"神奇"，那就是 git 知道 `master` branch 是對應到 `o/master` branch。當然這些 branch 有類似的名稱，所以可以大概猜到， local 的 `master` branch 可以對應到 remote 的 `master branch`，但是我們是在兩種情況下可以確定有這個對應關係：',"","* 在使用 `pull` 的時候，下載 commit 到 `o/master`，並且 `merge` 這些 commit 到 `master` branch，這就表示這個 merge 的目標是決定於這個對應關係。","* 在使用 `push` 的時候，在 `master` branch 上面的 commit 被 push 到 remote 上面的 `master` branch （它在 local 被表示成 `o/master`），這就表示 push 的目標是決定於 `master` 以及 `o/master` 之間的對應關係。",""]}},{type:"ModalAlert",options:{markdowns:["## Remote tracking","",'長話短說，我們可以用 branch 上面的 "remote tracking" 特性來表示介於 `master` 以及 `o/master` 的對應關係，`master` branch 被設定用來追蹤（track） `o/master`，這就表示對於 `master` branch 來說的話，有一個 merge 的目標以及 push 的目標。',"","你可能會覺得很奇怪，當你沒有下任何指令去設定的時候，關於 `master` branch 的對應關係是如何被設定的。喔！其實當你 clone 一個 repo 的時候，其實就已經自動幫你做設定了。 ","","在做 clone 的時候，git 會針對每一個在 remote 上面的 branch 建立一個 branch （例如 `o/master`），之後它會建立一個 local branch 來追蹤目前在 remote 上面的 active branch，在大部份的情況下，幾乎都是設定 `master` branch。","","一旦 git 完成這個動作，你就只會有一個 local branch ，但是你可以看到所有在 remote 上面的不同的 branch，對於 local 和 remote 來說的話，這樣子是最好的！","","這也解釋了為什麼當你 clone 的時候可能會看到以下被輸出的指令：","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### 我可以自己設定嗎？","","是的你可以！你可以設定任何的 branch 來 track `o/master`， 假如你真的這麼做的話，那麼該 branch 的 push 及 merge 的目標就會跟 `master` 一樣。這就表示說你可以在 `totallyNotMaster` branch 上面執行 `git push`，並且 push 你的 commit 到 remote 的 `master` branch！","","有兩個方式可以設定，第一個就是藉由參考一個 remote branch 來 checkout 一個新的 branch。執行","","`git checkout -b totallyNotMaster o/master`","","建立一個新的 `totallyNotMaster` branch 並且它會 track `o/master`。"]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["說的好多，我們現在來看一個例子！我們會 checkout 一個新的 `foo` branch，而且該 branch 會被用來 track remote 上的 `master` branch。"],afterMarkdowns:["就像你看到的，當 `o/master` 更新的時候，`foo` branch 也跟著一起被更新，要注意 master 並沒有被更新！"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["同樣適用於 `git push`"],afterMarkdowns:["哇，即使我們的 branch 名稱完全一點關係都沒有，但我們還是 push 了 commit 到 remote 的 `master` branch 上面。"],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### 方法 #2","","另外一個設定 remote tracking 的方法是使用 `git branch -u` 這一個指令，執行","","`git branch -u o/master foo`","","你就會看到 `foo` branch 被設定成 track `o/master`，如果你現在已經 checkout 到 foo 這個 branch 上面了，你就可以省略掉它：","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["我們來看這個快速設定 remote tracking 的方法..."],afterMarkdowns:["跟之前一樣，就只是一個更加明確的指令，讚啦！"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["好！在這個關卡中，我們要 push 我們的 commit 到 remote 上面的 `master` branch，但是我們*不* checkout 到 local 的 `master` branch。因為這是一個進階的課程，所以我會讓你明白其它的東西。:P"]}}]},zh_CN:{childViews:[{type:"ModalAlert",options:{markdowns:["### Remote-Tracking branches","","在前几节课程中有件事儿挺神奇的, git 好像知道`master`与`o/master`是相关的. 当然, 这些分支的名字是相同的, 所以可能是这种逻辑连接了远端的master分支和本地的master分支, 其实这种连接在以下两种情况下清楚体现: ","","* pull操作时, 我们下载提交到o/master并且合并到本地master分支。隐含的合并目标由此连接确定.","* push操作时, 我们把工作从`master`推到远端的`master`(同时会更新远端的副本`o/master`) 这个推送的目的地也是由这种连接确定的! ",""]}},{type:"ModalAlert",options:{markdowns:["## 远端跟踪","",'长话短说,  `master` 和 `o/master` 的连接关系就是 分支属性"remote tracking" (我们叫远端跟踪好啦). `master` 被设定为跟踪 `o/master` -- 这就是隐含的合并(merge)/推送(push)目的地.',"","你可能想知道这个属性是怎么被设定的? 你并没有用命令指定过这个属性呀! 好吧, 当你克隆仓库的时候, 这个属性就存在了. ","","当你克隆时, git会创建跟踪分支(就像`o/master`), 对于每个远端分支, 创建一个跟踪远端分支的本地分支(`master`), 所以你经常会看到这个的命令输出:","",'    local branch "master" set to track remote branch "o/master"',""]}},{type:"ModalAlert",options:{markdowns:["### 我能自己指定这个属性吗?","","当然可以啦! 你可以让做任意分支跟踪`o/master`, 然后分支就会隐含push的destination(`o/master`) 以及merge的target (`o/master`). 这意味着你可以在分支`totallyNotMaster`上执行`git push`, 将工作推送到远端的`master`.","","有两种方法设置这个属性, 第一种就是通过远端分支检出一个新的分支, 执行: ","","`git checkout -b totallyNotMaster o/master`","","这样就创建了一个跟踪 `o/master` 的 新分支`totallyNotMaster`.  "]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["说得够多了, 我们看看演示! 我们检出一个名叫`foo`的新分支, 然后让其跟踪远端的`master`."],afterMarkdowns:["正如你所看到的, 我们使用了隐含的目标`o/master`来更新`foo`分支. 注意, master未被更新!"],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["git push 同样适用这一原则"],afterMarkdowns:["我们将一个不叫`master`的分支工作 推送到的远端的`master`."],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### 方法#2","","另一种追踪远端分支的方法就是使用选项 : `git branch -u` . ","","`git branch -u o/master foo`","","这样`foo` 就会跟踪`o/master`了. 如果你处于foo分支, 那么可以省略 foo","","`git branch -u o/master`",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["看看实际的效果..."],afterMarkdowns:["结果跟之前一样, 这个命令的意义更精确!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["好了! 本节我们在不检出`master`的情况下将工作推送到的远端的`master`. 因为这是高级课程, 我会让你自己摸索出技巧! :P"]}}]},de_DE:{childViews:[{type:"ModalAlert",options:{markdowns:["### Remote Tracking Branches","",'In den letzten paar Leveln wirkte es womöglich etwas "magisch", dass Git automatisch wusste, dass der Branch `master` irgendwie mit `o/master` verwandt ist. Klar, sie haben ähnliche Namen und daher mag es logisch erscheinen sie in Verbindung zu bringen, aber offensichtlich wird es in zwei Szenarien:',"","* Beim `pull` werden Commits in `o/master` heruntergeladen und dann per *Merge* in den Branch `master` gebracht. Aus der Verbindung zwischen den beiden Branches leitet sich das Ziel des Merges ab.","* Beim `push` werden Commits vom `master` auf den `master` auf dem Remote Server geschoben (und die Änderung _danach_ in `o/master` abgebildet). Das *Ziel* des Push wird aus der Verbindung zwischen `master` und `o/master` abgeleitet.",""]}},{type:"ModalAlert",options:{markdowns:['Langer Rede kurzer Sinn, die Verbindung zwischen `master` und `o/master` ist einfach die Eigenschaft des "Remote Tracking" dieser Branches. `master` ist so eingestellt, dass er `o/master` trackt -- das heißt es gibt ein implizites Ziel für `pull` und `push` Operationen auf dem `master` Branch.',"","Du fragst dich vielleicht wieso diese Eigenschaft auf dem `master` definiert ist, wenn du das doch gar nicht explizit gemacht hast. Naja, beim Clonen eines Repository macht Git das für den `master` automatisch.","","Während des Clonens erstellt Git einen Remote Branch für jeden Branch, den es auf dem Remote Server findet (also Branches wie `o/master`); dann erstellt es für den Branch, auf den auf dem entfernten Server `HEAD` zeigt (meistens `master`) automatisch einen lokalen Branch und stellt ihn so ein, dass er sein Gegenstück auf dem Server trackt. Deswegen hast du beim clonen vielleicht schon mal dies gesehen:","",'    local branch "master" set to track remote branch "o/master"']}},{type:"ModalAlert",options:{markdowns:["### Kann ich das auch selbst machen?","","Na klar! Du kannst jeden beliebigen Branch so einstellen, dass er `o/master` trackt, und wenn du das tust wird der Branch dieselben impliziten Zielangaben für `push` und `pull` haben wie `master`. Du kannst also `git push` auf dem Branch `absolut_nicht_master` ausführen und deine Commits auf `master` auf dem entfernten Server schieben lassen.","","Es gibt zwei Möglichkeiten diese Eigenschaft zu definieren. Die erste ist, einen neuen lokalen Branch von einem Remote Branch auszuchecken. Wenn man","","    git checkout -b absolut_nicht_master o/master","","eingibt, wir ein neuer lokaler Branch namens `absolut_nicht_master` angelegt, der `o/master` trackt."]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Genug gequatscht, schauen wir uns eine Demonstration an! Wir checken einen neuen Branch `foo` aus, so dass er `master` auf dem Server trackt."],afterMarkdowns:["Wie du siehst benutzen wir der implizite Ziel beim `pull` um `foo` zu aktualisieren. Beachte, dass `master` nicht aktualisiert wird."],command:"git checkout -b foo o/master; git pull",beforeCommand:"git clone; git fakeTeamwork"}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Das gilt auch für `git push`."],afterMarkdowns:["Bämm. Wir haben unsere Commits auf den `master` auf dem Server geschoben, obwohl unser lokaler Branch völlig anders heißt."],command:"git checkout -b foo o/master; git commit; git push",beforeCommand:"git clone"}},{type:"ModalAlert",options:{markdowns:["### Methode 2","","Noch eine Möglichkeit um Remote Tracking auf einem Branch einzustellen, ist einfach `git branch -u` zu benutzen. Wenn man","","    git branch -u o/master foo","","eingibt, wir damit der lokale Branch `foo` so eingestellt, dass er `o/master` trackt. Den Namen des lokalen Branch kannst du auch weglassen, falls du ihn eh aktuell ausgecheckt hast:","","    git branch -u o/master",""]}},{type:"GitDemonstrationView",options:{beforeMarkdowns:["Schauen wir uns auch diese Methode noch an ..."],afterMarkdowns:["Genau wie vorher, nur ein bisschen ausführlicherer Befehl. Schick!"],command:"git branch -u o/master foo; git commit; git push",beforeCommand:"git clone; git checkout -b foo"}},{type:"ModalAlert",options:{markdowns:["Ok. In diesem Level muss du Commits auf den `master` auf dem Server schieben, *ohne* den lokalen `master` ausgecheckt zu haben. Den Rest kannst du selbst herausfinden, schließlich ist das hier für Fortgeschrittene. :P"]}}]}}}
},{}]},{},[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109]);